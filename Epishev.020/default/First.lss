
First.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b2  00800100  0000427c  00004310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000427c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000674  008007b2  008007b2  000049c2  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  000049c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b21  00000000  00000000  00004be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004bfc  00000000  00000000  00005703  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b5f  00000000  00000000  0000a2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003376  00000000  00000000  0000be5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000680  00000000  00000000  0000f1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f2b  00000000  00000000  0000f854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001656  00000000  00000000  0001077f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00011dd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_12>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__vector_18>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      74:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      80:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      8c:	b7 0b       	sbc	r27, r23
      8e:	be 0b       	sbc	r27, r30
      90:	28 0c       	add	r2, r8
      92:	35 0c       	add	r3, r5
      94:	3e 0c       	add	r3, r14
      96:	50 0c       	add	r5, r0
      98:	71 0c       	add	r7, r1
      9a:	8f 0c       	add	r8, r15
      9c:	c4 0c       	add	r12, r4
      9e:	db 0c       	add	r13, r11
      a0:	de 0c       	add	r13, r14
      a2:	0d 0d       	add	r16, r13
      a4:	90 0d       	add	r25, r0
      a6:	90 0d       	add	r25, r0
      a8:	79 0d       	add	r23, r9
      aa:	8e 0d       	add	r24, r14
      ac:	90 0d       	add	r25, r0
      ae:	90 0d       	add	r25, r0
      b0:	90 0d       	add	r25, r0
      b2:	90 0d       	add	r25, r0
      b4:	90 0d       	add	r25, r0
      b6:	90 0d       	add	r25, r0
      b8:	3c 0d       	add	r19, r12
      ba:	45 0d       	add	r20, r5
      bc:	90 0d       	add	r25, r0
      be:	90 0d       	add	r25, r0
      c0:	90 0d       	add	r25, r0
      c2:	9e 0c       	add	r9, r14
      c4:	f1 0c       	add	r15, r1
      c6:	90 0d       	add	r25, r0
      c8:	90 0d       	add	r25, r0
      ca:	16 0d       	add	r17, r6

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d0 e1       	ldi	r29, 0x10	; 16
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	17 e0       	ldi	r17, 0x07	; 7
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	ec e7       	ldi	r30, 0x7C	; 124
      e0:	f2 e4       	ldi	r31, 0x42	; 66
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	0b bf       	out	0x3b, r16	; 59
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
      e8:	07 90       	elpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a2 3b       	cpi	r26, 0xB2	; 178
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
      f2:	1e e0       	ldi	r17, 0x0E	; 14
      f4:	a2 eb       	ldi	r26, 0xB2	; 178
      f6:	b7 e0       	ldi	r27, 0x07	; 7
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a6 32       	cpi	r26, 0x26	; 38
      fe:	b1 07       	cpc	r27, r17
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <main>
     106:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_default>

0000010e <GetTime>:
//------------------------------------------------------------------------------------

TTime GetTime(void) {
	unsigned char sreg;
	unsigned int retVal;
	sreg = SREG;
     10e:	8f b7       	in	r24, 0x3f	; 63
	cli();
     110:	f8 94       	cli
	retVal = TimerVar5ms;
     112:	20 91 b2 07 	lds	r18, 0x07B2
     116:	30 91 b3 07 	lds	r19, 0x07B3
	SREG = sreg;
     11a:	8f bf       	out	0x3f, r24	; 63
	return retVal;
}
     11c:	c9 01       	movw	r24, r18
     11e:	08 95       	ret

00000120 <Ticks>:
//------------------------------------------------------------------------------------

unsigned int Ticks(unsigned long int Time_ms) {
     120:	25 e0       	ldi	r18, 0x05	; 5
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__udivmodsi4>
     12c:	c9 01       	movw	r24, r18
	return Time_ms / 5;
}
     12e:	08 95       	ret

00000130 <__vector_default>:

//------------------------------------------------------------------------------------
// делаем заглушку для всех векторов прерываний
char WasBadVect = 0;
ISR(BADISR_vect)
{
     130:	1f 92       	push	r1
     132:	0f 92       	push	r0
     134:	0f b6       	in	r0, 0x3f	; 63
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	8f 93       	push	r24
	WasBadVect = 1;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 93 b4 07 	sts	0x07B4, r24
}
     142:	8f 91       	pop	r24
     144:	0f 90       	pop	r0
     146:	0f be       	out	0x3f, r0	; 63
     148:	0f 90       	pop	r0
     14a:	1f 90       	pop	r1
     14c:	18 95       	reti

0000014e <__vector_12>:
//------------------------------------------------------------------------------------

ISR(TIMER1_COMPA_vect) {
     14e:	1f 92       	push	r1
     150:	0f 92       	push	r0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	0f 92       	push	r0
     156:	11 24       	eor	r1, r1
     158:	8f 93       	push	r24
     15a:	9f 93       	push	r25
	//sei();
	TimerVar5ms++;
     15c:	80 91 b2 07 	lds	r24, 0x07B2
     160:	90 91 b3 07 	lds	r25, 0x07B3
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	90 93 b3 07 	sts	0x07B3, r25
     16a:	80 93 b2 07 	sts	0x07B2, r24
	TIFR = (1<<OCF1A); // выставить в 1 для осуществления прерывания!
     16e:	80 e1       	ldi	r24, 0x10	; 16
     170:	86 bf       	out	0x36, r24	; 54
}
     172:	9f 91       	pop	r25
     174:	8f 91       	pop	r24
     176:	0f 90       	pop	r0
     178:	0f be       	out	0x3f, r0	; 63
     17a:	0f 90       	pop	r0
     17c:	1f 90       	pop	r1
     17e:	18 95       	reti

00000180 <initTimer>:
//------------------------------------------------------------------------------------

void initTimer(void) {
	// OCR1A = 73728;
	TCNT1 = 0;
     180:	1d bc       	out	0x2d, r1	; 45
     182:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 36864; // 5ms // задаем верхний предел
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e9       	ldi	r25, 0x90	; 144
     188:	9b bd       	out	0x2b, r25	; 43
     18a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B = ((1<<WGM12) | (1<<CS10));
     18c:	89 e0       	ldi	r24, 0x09	; 9
     18e:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1<<OCIE1A); // Timer/Counter1 Compare Match interrupt is enabled
     190:	80 e1       	ldi	r24, 0x10	; 16
     192:	87 bf       	out	0x37, r24	; 55
	TIFR = (1<<OCF1A); // выставить в 1 для осуществления прерывания!
     194:	86 bf       	out	0x36, r24	; 54
}
     196:	08 95       	ret

00000198 <SirenaOn>:
}

//------------------------------------------------------------------------------------
// включить сирену
void SirenaOn(void) {
	DOuts = DOuts & 0b11101111; 
     198:	80 91 4b 02 	lds	r24, 0x024B
     19c:	8f 7e       	andi	r24, 0xEF	; 239
     19e:	80 93 4b 02 	sts	0x024B, r24
}
     1a2:	08 95       	ret

000001a4 <SirenaOff>:
//------------------------------------------------------------------------------------
// выключить сирену
void SirenaOff(void) {
	DOuts = DOuts | 0b00010000; 
     1a4:	80 91 4b 02 	lds	r24, 0x024B
     1a8:	80 61       	ori	r24, 0x10	; 16
     1aa:	80 93 4b 02 	sts	0x024B, r24
}
     1ae:	08 95       	ret

000001b0 <SrabotkaOn>:
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// включить выход, являющийся сборным для всех входов
void SrabotkaOn(void) {
	DOuts = DOuts & 0b11011111; 
     1b0:	80 91 4b 02 	lds	r24, 0x024B
     1b4:	8f 7d       	andi	r24, 0xDF	; 223
     1b6:	80 93 4b 02 	sts	0x024B, r24
}
     1ba:	08 95       	ret

000001bc <SrabotkaOff>:
//------------------------------------------------------------------------------------
// выключить выход, являющийся сборным для всех входов
void SrabotkaOff(void) {
	DOuts = DOuts | 0b00100000; 
     1bc:	80 91 4b 02 	lds	r24, 0x024B
     1c0:	80 62       	ori	r24, 0x20	; 32
     1c2:	80 93 4b 02 	sts	0x024B, r24
}
     1c6:	08 95       	ret

000001c8 <IsModemOn>:
// Для запуска функции нужно: swIsModemOn = cswStart;
// если за 1000 мс был получен отклик от модема, то возвращает всегда 1
// для сброса (квитирования) требуется swIsModemOn = cswIdle;
TTime TPrevIsModemOn;
int swIsModemOn = cswIdle;
char IsModemOn(void) {
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
	char RetVal = 0;
	switch(swIsModemOn) {
     1d0:	80 91 b5 07 	lds	r24, 0x07B5
     1d4:	90 91 b6 07 	lds	r25, 0x07B6
     1d8:	8c 31       	cpi	r24, 0x1C	; 28
     1da:	91 05       	cpc	r25, r1
     1dc:	c9 f0       	breq	.+50     	; 0x210 <IsModemOn+0x48>
     1de:	8d 31       	cpi	r24, 0x1D	; 29
     1e0:	91 05       	cpc	r25, r1
     1e2:	1c f4       	brge	.+6      	; 0x1ea <IsModemOn+0x22>
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	49 f5       	brne	.+82     	; 0x23a <IsModemOn+0x72>
     1e8:	08 c0       	rjmp	.+16     	; 0x1fa <IsModemOn+0x32>
     1ea:	8a 32       	cpi	r24, 0x2A	; 42
     1ec:	91 05       	cpc	r25, r1
     1ee:	19 f0       	breq	.+6      	; 0x1f6 <IsModemOn+0x2e>
     1f0:	8c 97       	sbiw	r24, 0x2c	; 44
     1f2:	19 f5       	brne	.+70     	; 0x23a <IsModemOn+0x72>
     1f4:	1e c0       	rjmp	.+60     	; 0x232 <IsModemOn+0x6a>
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	21 c0       	rjmp	.+66     	; 0x23c <IsModemOn+0x74>
		case cswIdle:
		break;
		
		case cswStart:
			DoCommand(&TPrevIsModemOn, "at+cpin?", &swIsModemOn, csw010);
     1fa:	81 ef       	ldi	r24, 0xF1	; 241
     1fc:	97 e0       	ldi	r25, 0x07	; 7
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	45 eb       	ldi	r20, 0xB5	; 181
     204:	57 e0       	ldi	r21, 0x07	; 7
     206:	2c e1       	ldi	r18, 0x1C	; 28
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
     20e:	15 c0       	rjmp	.+42     	; 0x23a <IsModemOn+0x72>
		break;
		
		case csw010:
			WaitAnswer(TPrevIsModemOn, "+CPIN: READY", 2000, &swIsModemOn, cswOK, cswIdle);
     210:	80 91 f1 07 	lds	r24, 0x07F1
     214:	90 91 f2 07 	lds	r25, 0x07F2
     218:	69 e0       	ldi	r22, 0x09	; 9
     21a:	71 e0       	ldi	r23, 0x01	; 1
     21c:	40 ed       	ldi	r20, 0xD0	; 208
     21e:	57 e0       	ldi	r21, 0x07	; 7
     220:	25 eb       	ldi	r18, 0xB5	; 181
     222:	37 e0       	ldi	r19, 0x07	; 7
     224:	0a e2       	ldi	r16, 0x2A	; 42
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	ee 24       	eor	r14, r14
     22a:	ff 24       	eor	r15, r15
     22c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
     230:	04 c0       	rjmp	.+8      	; 0x23a <IsModemOn+0x72>
		case cswOK:
			RetVal = 1;
		break;
		
		case cswEnd:
			swIsModemOn = cswIdle;
     232:	10 92 b6 07 	sts	0x07B6, r1
     236:	10 92 b5 07 	sts	0x07B5, r1
     23a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return RetVal;
}
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	08 95       	ret

00000246 <OutTermToPC>:

char tmpStr2[100]; // для нескольких последующих алгоритмов
//------------------------------------------------------------------------------------
TTime TOutTermToPC;
int swOutTermToPC = cswStart;
void OutTermToPC(void) {
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
	switch (swOutTermToPC) {
     24a:	80 91 37 02 	lds	r24, 0x0237
     24e:	90 91 38 02 	lds	r25, 0x0238
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	91 05       	cpc	r25, r1
     256:	19 f0       	breq	.+6      	; 0x25e <OutTermToPC+0x18>
     258:	4c 97       	sbiw	r24, 0x1c	; 28
     25a:	91 f5       	brne	.+100    	; 0x2c0 <OutTermToPC+0x7a>
     25c:	09 c0       	rjmp	.+18     	; 0x270 <OutTermToPC+0x2a>
		case cswIdle:
		break;
		
		case cswStart:
			TOutTermToPC = GetTime();
     25e:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     262:	90 93 a2 08 	sts	0x08A2, r25
     266:	80 93 a1 08 	sts	0x08A1, r24
			swOutTermToPC = csw010;
     26a:	8c e1       	ldi	r24, 0x1C	; 28
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	24 c0       	rjmp	.+72     	; 0x2b8 <OutTermToPC+0x72>
		break;
			
		case csw010:
			if (GetTime() - TOutTermToPC > Ticks(5000)) {
     270:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     274:	20 91 a1 08 	lds	r18, 0x08A1
     278:	30 91 a2 08 	lds	r19, 0x08A2
     27c:	8c 01       	movw	r16, r24
     27e:	02 1b       	sub	r16, r18
     280:	13 0b       	sbc	r17, r19
     282:	68 e8       	ldi	r22, 0x88	; 136
     284:	73 e1       	ldi	r23, 0x13	; 19
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
     28e:	80 17       	cp	r24, r16
     290:	91 07       	cpc	r25, r17
     292:	b0 f4       	brcc	.+44     	; 0x2c0 <OutTermToPC+0x7a>
				MakeTerm(tmpStr2);
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	9d e0       	ldi	r25, 0x0D	; 13
     298:	0e 94 9d 14 	call	0x293a	; 0x293a <MakeTerm>
				if (strlen(tmpStr2) > 0) {
     29c:	80 91 02 0d 	lds	r24, 0x0D02
     2a0:	88 23       	and	r24, r24
     2a2:	41 f0       	breq	.+16     	; 0x2b4 <OutTermToPC+0x6e>
					PutPC(tmpStr2);
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	9d e0       	ldi	r25, 0x0D	; 13
     2a8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
					PutPC("\n\r");
     2ac:	86 e1       	ldi	r24, 0x16	; 22
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
				}
				swOutTermToPC = cswStart;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 38 02 	sts	0x0238, r25
     2bc:	80 93 37 02 	sts	0x0237, r24
			}
		break;
	}
}
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	08 95       	ret

000002c6 <AlgMakeTermSirena>:

//------------------------------------------------------------------------------------

char flSirenaOtkaz = 0;
TTime TOtpalDatchik;
void AlgMakeTermSirena(void) {
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
	for (int i=0; i<THERM_COUNT; ++i) { // алгоритм должен работать всегда
		TermAlg(i);
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 7f 15 	call	0x2afe	; 0x2afe <TermAlg>
		if (Terms[i].swTermAlg == cswIdle) Terms[i].swTermAlg = cswStart;
     2d2:	80 91 af 0d 	lds	r24, 0x0DAF
     2d6:	90 91 b0 0d 	lds	r25, 0x0DB0
     2da:	89 2b       	or	r24, r25
     2dc:	31 f4       	brne	.+12     	; 0x2ea <AlgMakeTermSirena+0x24>
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	90 93 b0 0d 	sts	0x0DB0, r25
     2e6:	80 93 af 0d 	sts	0x0DAF, r24

char flSirenaOtkaz = 0;
TTime TOtpalDatchik;
void AlgMakeTermSirena(void) {
	for (int i=0; i<THERM_COUNT; ++i) { // алгоритм должен работать всегда
		TermAlg(i);
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 7f 15 	call	0x2afe	; 0x2afe <TermAlg>
		if (Terms[i].swTermAlg == cswIdle) Terms[i].swTermAlg = cswStart;
     2f2:	80 91 ef 0d 	lds	r24, 0x0DEF
     2f6:	90 91 f0 0d 	lds	r25, 0x0DF0
     2fa:	89 2b       	or	r24, r25
     2fc:	31 f4       	brne	.+12     	; 0x30a <AlgMakeTermSirena+0x44>
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	90 93 f0 0d 	sts	0x0DF0, r25
     306:	80 93 ef 0d 	sts	0x0DEF, r24
	}
	// если сейчас не ждем секунду перед сиреной по отказу датчиков(не было отказов), то анализируем отказы по датчикам
	// если отказ случился, то засекаем время
	if (!flSirenaOtkaz) {
     30a:	80 91 ce 07 	lds	r24, 0x07CE
     30e:	88 23       	and	r24, r24
     310:	d9 f5       	brne	.+118    	; 0x388 <AlgMakeTermSirena+0xc2>
		for (int i=0; i<THERM_COUNT; ++i) {
			if (!Terms[i].flEnable) continue; // если датчик не в работе, то по нему и не жужжжжим
     312:	80 91 b5 0d 	lds	r24, 0x0DB5
     316:	88 23       	and	r24, r24
     318:	d1 f0       	breq	.+52     	; 0x34e <AlgMakeTermSirena+0x88>
			if ((Terms[i].trigOtkaz == 1) || (Terms[i].trigCRCOtkaz == 1) || (Terms[i].trigMINLim == 1) || (Terms[i].trigMAXLim == 1)) {
     31a:	80 91 db 0d 	lds	r24, 0x0DDB
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	51 f4       	brne	.+20     	; 0x336 <AlgMakeTermSirena+0x70>
				flSirenaOtkaz = 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	80 93 ce 07 	sts	0x07CE, r24
				TOtpalDatchik = GetTime();
     328:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     32c:	90 93 a0 08 	sts	0x08A0, r25
     330:	80 93 9f 08 	sts	0x089F, r24
     334:	0c c0       	rjmp	.+24     	; 0x34e <AlgMakeTermSirena+0x88>
	// если сейчас не ждем секунду перед сиреной по отказу датчиков(не было отказов), то анализируем отказы по датчикам
	// если отказ случился, то засекаем время
	if (!flSirenaOtkaz) {
		for (int i=0; i<THERM_COUNT; ++i) {
			if (!Terms[i].flEnable) continue; // если датчик не в работе, то по нему и не жужжжжим
			if ((Terms[i].trigOtkaz == 1) || (Terms[i].trigCRCOtkaz == 1) || (Terms[i].trigMINLim == 1) || (Terms[i].trigMAXLim == 1)) {
     336:	80 91 e1 0d 	lds	r24, 0x0DE1
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	91 f3       	breq	.-28     	; 0x322 <AlgMakeTermSirena+0x5c>
     33e:	80 91 ba 0d 	lds	r24, 0x0DBA
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	71 f3       	breq	.-36     	; 0x322 <AlgMakeTermSirena+0x5c>
     346:	80 91 bb 0d 	lds	r24, 0x0DBB
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	51 f3       	breq	.-44     	; 0x322 <AlgMakeTermSirena+0x5c>
	}
	// если сейчас не ждем секунду перед сиреной по отказу датчиков(не было отказов), то анализируем отказы по датчикам
	// если отказ случился, то засекаем время
	if (!flSirenaOtkaz) {
		for (int i=0; i<THERM_COUNT; ++i) {
			if (!Terms[i].flEnable) continue; // если датчик не в работе, то по нему и не жужжжжим
     34e:	80 91 f5 0d 	lds	r24, 0x0DF5
     352:	88 23       	and	r24, r24
     354:	c9 f0       	breq	.+50     	; 0x388 <AlgMakeTermSirena+0xc2>
			if ((Terms[i].trigOtkaz == 1) || (Terms[i].trigCRCOtkaz == 1) || (Terms[i].trigMINLim == 1) || (Terms[i].trigMAXLim == 1)) {
     356:	80 91 1b 0e 	lds	r24, 0x0E1B
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	61 f0       	breq	.+24     	; 0x376 <AlgMakeTermSirena+0xb0>
     35e:	80 91 21 0e 	lds	r24, 0x0E21
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	41 f0       	breq	.+16     	; 0x376 <AlgMakeTermSirena+0xb0>
     366:	80 91 fa 0d 	lds	r24, 0x0DFA
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	21 f0       	breq	.+8      	; 0x376 <AlgMakeTermSirena+0xb0>
     36e:	80 91 fb 0d 	lds	r24, 0x0DFB
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	49 f4       	brne	.+18     	; 0x388 <AlgMakeTermSirena+0xc2>
				flSirenaOtkaz = 1;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 ce 07 	sts	0x07CE, r24
				TOtpalDatchik = GetTime();
     37c:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     380:	90 93 a0 08 	sts	0x08A0, r25
     384:	80 93 9f 08 	sts	0x089F, r24
			}
		}
	}
	// надо подождать секунду, только после этого фомировать температурную сирену и смс
	// если заходим по флагу, значит сто пудово случилась ситуация по одному из СКОНФИГУРИР-ЫХ датчиков
	if (flSirenaOtkaz) {
     388:	80 91 ce 07 	lds	r24, 0x07CE
     38c:	88 23       	and	r24, r24
     38e:	09 f4       	brne	.+2      	; 0x392 <AlgMakeTermSirena+0xcc>
     390:	4a c0       	rjmp	.+148    	; 0x426 <AlgMakeTermSirena+0x160>
		if ((GetTime() - TOtpalDatchik) >= Ticks(2000)) {
     392:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     396:	20 91 9f 08 	lds	r18, 0x089F
     39a:	30 91 a0 08 	lds	r19, 0x08A0
     39e:	8c 01       	movw	r16, r24
     3a0:	02 1b       	sub	r16, r18
     3a2:	13 0b       	sbc	r17, r19
     3a4:	60 ed       	ldi	r22, 0xD0	; 208
     3a6:	77 e0       	ldi	r23, 0x07	; 7
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
     3b0:	08 17       	cp	r16, r24
     3b2:	19 07       	cpc	r17, r25
     3b4:	c0 f1       	brcs	.+112    	; 0x426 <AlgMakeTermSirena+0x160>
			MakeTerm(tmpStr2);
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	9d e0       	ldi	r25, 0x0D	; 13
     3ba:	0e 94 9d 14 	call	0x293a	; 0x293a <MakeTerm>
			for (int i=0; i<THERM_COUNT; ++i) {
				Terms[i].trigOtkaz = 0;
     3be:	10 92 db 0d 	sts	0x0DDB, r1
				Terms[i].trigCRCOtkaz = 0;
     3c2:	10 92 e1 0d 	sts	0x0DE1, r1
				Terms[i].trigMINLim = 0;
     3c6:	10 92 ba 0d 	sts	0x0DBA, r1
				Terms[i].trigMAXLim = 0;
     3ca:	10 92 bb 0d 	sts	0x0DBB, r1
	// если заходим по флагу, значит сто пудово случилась ситуация по одному из СКОНФИГУРИР-ЫХ датчиков
	if (flSirenaOtkaz) {
		if ((GetTime() - TOtpalDatchik) >= Ticks(2000)) {
			MakeTerm(tmpStr2);
			for (int i=0; i<THERM_COUNT; ++i) {
				Terms[i].trigOtkaz = 0;
     3ce:	10 92 1b 0e 	sts	0x0E1B, r1
				Terms[i].trigCRCOtkaz = 0;
     3d2:	10 92 21 0e 	sts	0x0E21, r1
				Terms[i].trigMINLim = 0;
     3d6:	10 92 fa 0d 	sts	0x0DFA, r1
				Terms[i].trigMAXLim = 0;
     3da:	10 92 fb 0d 	sts	0x0DFB, r1
			}
			if (!IsDebug()) { //!#ifdef M_DEBUG
     3de:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
     3e2:	88 23       	and	r24, r24
     3e4:	61 f4       	brne	.+24     	; 0x3fe <AlgMakeTermSirena+0x138>
				//#ifndef M_DEBUG // если отладка, то СМС не отсылаем
				SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS|cPrivilegeAlarmSMS;
     3e6:	87 e0       	ldi	r24, 0x07	; 7
     3e8:	80 93 62 09 	sts	0x0962, r24
				SMSToSend.SMSZones = 0xFF; // все зоны
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	80 93 63 09 	sts	0x0963, r24
				strcpy(SMSToSend.SMSText, tmpStr2);
     3f2:	8c ec       	ldi	r24, 0xCC	; 204
     3f4:	98 e0       	ldi	r25, 0x08	; 8
     3f6:	62 e0       	ldi	r22, 0x02	; 2
     3f8:	7d e0       	ldi	r23, 0x0D	; 13
     3fa:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
			} //!#endif
			
			swAlgTermSirena = cswStart;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 d8 07 	sts	0x07D8, r25
     406:	80 93 d7 07 	sts	0x07D7, r24
			
			if (IsDebug()) { //!#ifdef M_DEBUG
     40a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
     40e:	88 23       	and	r24, r24
     410:	41 f0       	breq	.+16     	; 0x422 <AlgMakeTermSirena+0x15c>
				PutPC(tmpStr2);
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	9d e0       	ldi	r25, 0x0D	; 13
     416:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
				PutPC("\n\r");
     41a:	86 e1       	ldi	r24, 0x16	; 22
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
			} //!#endif

			flSirenaOtkaz = 0; // опять переходим на анализ отказов по датчикам
     422:	10 92 ce 07 	sts	0x07CE, r1
		}
	}
}
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <GetNumberPrivileges>:
	return 0;
}
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

char GetNumberPrivileges(char *InPhoneNumber) {
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	7c 01       	movw	r14, r24
     43e:	06 e0       	ldi	r16, 0x06	; 6
     440:	10 e0       	ldi	r17, 0x00	; 0
	char RetVal = 0;
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		if (strncmp(InPhoneNumber, PhoneNumber[CellNumber-cSettings].Number, MAX_NUMBER_LENGTH-1)==0) {
     442:	86 e2       	ldi	r24, 0x26	; 38
     444:	c8 2e       	mov	r12, r24
     446:	d1 2c       	mov	r13, r1
     448:	0c 9d       	mul	r16, r12
     44a:	e0 01       	movw	r28, r0
     44c:	0d 9d       	mul	r16, r13
     44e:	d0 0d       	add	r29, r0
     450:	1c 9d       	mul	r17, r12
     452:	d0 0d       	add	r29, r0
     454:	11 24       	eor	r1, r1
     456:	c5 50       	subi	r28, 0x05	; 5
     458:	d6 4f       	sbci	r29, 0xF6	; 246
     45a:	c7 01       	movw	r24, r14
     45c:	be 01       	movw	r22, r28
     45e:	42 e2       	ldi	r20, 0x22	; 34
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <strncmp>
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	11 f4       	brne	.+4      	; 0x46e <GetNumberPrivileges+0x42>
			RetVal = PhoneNumber[CellNumber-cSettings].Privilege;
     46a:	8c a1       	ldd	r24, Y+36	; 0x24
     46c:	06 c0       	rjmp	.+12     	; 0x47a <GetNumberPrivileges+0x4e>
			break;
     46e:	0f 5f       	subi	r16, 0xFF	; 255
     470:	1f 4f       	sbci	r17, 0xFF	; 255
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

char GetNumberPrivileges(char *InPhoneNumber) {
	char RetVal = 0;
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
     472:	0c 30       	cpi	r16, 0x0C	; 12
     474:	11 05       	cpc	r17, r1
     476:	41 f7       	brne	.-48     	; 0x448 <GetNumberPrivileges+0x1c>
     478:	80 e0       	ldi	r24, 0x00	; 0
			RetVal = PhoneNumber[CellNumber-cSettings].Privilege;
			break;
		}
	}
	return RetVal;
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	08 95       	ret

0000048c <AlgCountRings>:
//------------------------------------------------------------------------------------

char CountRings = 0;
char flWasPrivUserCall = 0;
char AlgCountRings(void) {
	if (flIsReaded != 0) {
     48c:	80 91 64 09 	lds	r24, 0x0964
     490:	88 23       	and	r24, r24
     492:	09 f4       	brne	.+2      	; 0x496 <AlgCountRings+0xa>
     494:	3f c0       	rjmp	.+126    	; 0x514 <AlgCountRings+0x88>
		if (strstr(FromModemBuf, "+CLIP: \"") != NULL) {
     496:	8b e5       	ldi	r24, 0x5B	; 91
     498:	9c e0       	ldi	r25, 0x0C	; 12
     49a:	69 e1       	ldi	r22, 0x19	; 25
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <strstr>
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	a9 f0       	breq	.+42     	; 0x4d0 <AlgCountRings+0x44>
			char *tmpBegStr = &(FromModemBuf[8]);
			char *tmpEndStr = strstr(tmpBegStr, "\"");
     4a6:	83 e6       	ldi	r24, 0x63	; 99
     4a8:	9c e0       	ldi	r25, 0x0C	; 12
     4aa:	62 e2       	ldi	r22, 0x22	; 34
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <strchr>
     4b2:	fc 01       	movw	r30, r24
			*tmpEndStr = 0;
     4b4:	10 82       	st	Z, r1
			if (GetNumberPrivileges(tmpBegStr) != cPrivilegeFull) {
     4b6:	83 e6       	ldi	r24, 0x63	; 99
     4b8:	9c e0       	ldi	r25, 0x0C	; 12
     4ba:	0e 94 16 02 	call	0x42c	; 0x42c <GetNumberPrivileges>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	49 f1       	breq	.+82     	; 0x514 <AlgCountRings+0x88>
				CountRings = 0;
     4c2:	10 92 c6 07 	sts	0x07C6, r1
				PutModem("ath\r\n");
     4c6:	82 e2       	ldi	r24, 0x22	; 34
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <PutModem>
     4ce:	22 c0       	rjmp	.+68     	; 0x514 <AlgCountRings+0x88>
			}
		} else
		if (strstr(FromModemBuf, "RING") != NULL) {
     4d0:	8b e5       	ldi	r24, 0x5B	; 91
     4d2:	9c e0       	ldi	r25, 0x0C	; 12
     4d4:	68 e2       	ldi	r22, 0x28	; 40
     4d6:	71 e0       	ldi	r23, 0x01	; 1
     4d8:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <strstr>
     4dc:	00 97       	sbiw	r24, 0x00	; 0
     4de:	81 f0       	breq	.+32     	; 0x500 <AlgCountRings+0x74>
			if (CountRings >= 3) {
     4e0:	80 91 c6 07 	lds	r24, 0x07C6
     4e4:	83 30       	cpi	r24, 0x03	; 3
     4e6:	44 f0       	brlt	.+16     	; 0x4f8 <AlgCountRings+0x6c>
				PutModem("ath\r\n");
     4e8:	82 e2       	ldi	r24, 0x22	; 34
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <PutModem>
				flWasPrivUserCall = 1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 c7 07 	sts	0x07C7, r24
     4f6:	0c c0       	rjmp	.+24     	; 0x510 <AlgCountRings+0x84>
				CountRings = 0;
			}
			else {
				CountRings++;
     4f8:	8f 5f       	subi	r24, 0xFF	; 255
     4fa:	80 93 c6 07 	sts	0x07C6, r24
     4fe:	0a c0       	rjmp	.+20     	; 0x514 <AlgCountRings+0x88>
			}
		}
		else
		if (strstr(FromModemBuf, "NO CARRIER") != NULL) {
     500:	8b e5       	ldi	r24, 0x5B	; 91
     502:	9c e0       	ldi	r25, 0x0C	; 12
     504:	6d e2       	ldi	r22, 0x2D	; 45
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <strstr>
     50c:	00 97       	sbiw	r24, 0x00	; 0
     50e:	11 f0       	breq	.+4      	; 0x514 <AlgCountRings+0x88>
			CountRings = 0;
     510:	10 92 c6 07 	sts	0x07C6, r1
		}
	}
	return 0;
}
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	08 95       	ret

00000518 <Indik>:
int old_swIndik = cswIdle;
int AzbukaIndex = 0;
int swAzbuka = cswStart;
TTime TIndik;
unsigned int AzbukaMorze[10];
char Indik(void) {
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
	if (swIndik != cswIdle) {
     51c:	20 91 c0 07 	lds	r18, 0x07C0
     520:	30 91 c1 07 	lds	r19, 0x07C1
     524:	21 15       	cp	r18, r1
     526:	31 05       	cpc	r19, r1
     528:	09 f4       	brne	.+2      	; 0x52c <Indik+0x14>
     52a:	06 c1       	rjmp	.+524    	; 0x738 <Indik+0x220>
		if (old_swIndik != swIndik) { // новое состояние
     52c:	80 91 c2 07 	lds	r24, 0x07C2
     530:	90 91 c3 07 	lds	r25, 0x07C3
     534:	82 17       	cp	r24, r18
     536:	93 07       	cpc	r25, r19
     538:	09 f4       	brne	.+2      	; 0x53c <Indik+0x24>
     53a:	60 c0       	rjmp	.+192    	; 0x5fc <Indik+0xe4>
			AzbukaIndex = 0;
     53c:	10 92 c5 07 	sts	0x07C5, r1
     540:	10 92 c4 07 	sts	0x07C4, r1
			switch (swIndik) {
     544:	29 30       	cpi	r18, 0x09	; 9
     546:	31 05       	cpc	r19, r1
     548:	e9 f0       	breq	.+58     	; 0x584 <Indik+0x6c>
     54a:	2a 30       	cpi	r18, 0x0A	; 10
     54c:	31 05       	cpc	r19, r1
     54e:	2c f4       	brge	.+10     	; 0x55a <Indik+0x42>
     550:	28 30       	cpi	r18, 0x08	; 8
     552:	31 05       	cpc	r19, r1
     554:	09 f0       	breq	.+2      	; 0x558 <Indik+0x40>
     556:	f0 c0       	rjmp	.+480    	; 0x738 <Indik+0x220>
     558:	08 c0       	rjmp	.+16     	; 0x56a <Indik+0x52>
     55a:	2b 30       	cpi	r18, 0x0B	; 11
     55c:	31 05       	cpc	r19, r1
     55e:	69 f1       	breq	.+90     	; 0x5ba <Indik+0xa2>
     560:	2f 30       	cpi	r18, 0x0F	; 15
     562:	31 05       	cpc	r19, r1
     564:	09 f0       	breq	.+2      	; 0x568 <Indik+0x50>
     566:	e8 c0       	rjmp	.+464    	; 0x738 <Indik+0x220>
     568:	3d c0       	rjmp	.+122    	; 0x5e4 <Indik+0xcc>
				
				case cswStart:
				break;
				
				case cswWaitReady:
					AzbukaMorze[0] = 500;
     56a:	84 ef       	ldi	r24, 0xF4	; 244
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	90 93 de 07 	sts	0x07DE, r25
     572:	80 93 dd 07 	sts	0x07DD, r24
					AzbukaMorze[1] = 500;
     576:	90 93 e0 07 	sts	0x07E0, r25
     57a:	80 93 df 07 	sts	0x07DF, r24
					AzbukaMorze[2] = 1500;
     57e:	8c ed       	ldi	r24, 0xDC	; 220
     580:	95 e0       	ldi	r25, 0x05	; 5
     582:	27 c0       	rjmp	.+78     	; 0x5d2 <Indik+0xba>
					AzbukaMorze[3] = 0;
				break;
				
				case cswERRORWaitReady:
					AzbukaMorze[0] = 500;
     584:	84 ef       	ldi	r24, 0xF4	; 244
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	90 93 de 07 	sts	0x07DE, r25
     58c:	80 93 dd 07 	sts	0x07DD, r24
					AzbukaMorze[1] = 500;
     590:	90 93 e0 07 	sts	0x07E0, r25
     594:	80 93 df 07 	sts	0x07DF, r24
					AzbukaMorze[2] = 500;
     598:	90 93 e2 07 	sts	0x07E2, r25
     59c:	80 93 e1 07 	sts	0x07E1, r24
					AzbukaMorze[3] = 500;
     5a0:	90 93 e4 07 	sts	0x07E4, r25
     5a4:	80 93 e3 07 	sts	0x07E3, r24
					AzbukaMorze[4] = 500;
     5a8:	90 93 e6 07 	sts	0x07E6, r25
     5ac:	80 93 e5 07 	sts	0x07E5, r24
					AzbukaMorze[5] = 0;
     5b0:	10 92 e8 07 	sts	0x07E8, r1
     5b4:	10 92 e7 07 	sts	0x07E7, r1
     5b8:	bf c0       	rjmp	.+382    	; 0x738 <Indik+0x220>
				break;
				
				case cswReadSettings:
					AzbukaMorze[0] = 1500;
     5ba:	8c ed       	ldi	r24, 0xDC	; 220
     5bc:	95 e0       	ldi	r25, 0x05	; 5
     5be:	90 93 de 07 	sts	0x07DE, r25
     5c2:	80 93 dd 07 	sts	0x07DD, r24
					AzbukaMorze[1] = 1500;
     5c6:	90 93 e0 07 	sts	0x07E0, r25
     5ca:	80 93 df 07 	sts	0x07DF, r24
					AzbukaMorze[2] = 500;
     5ce:	84 ef       	ldi	r24, 0xF4	; 244
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	90 93 e2 07 	sts	0x07E2, r25
     5d6:	80 93 e1 07 	sts	0x07E1, r24
					AzbukaMorze[3] = 0;
     5da:	10 92 e4 07 	sts	0x07E4, r1
     5de:	10 92 e3 07 	sts	0x07E3, r1
     5e2:	aa c0       	rjmp	.+340    	; 0x738 <Indik+0x220>
				break;
				
				case cswStartWork: // режим "работа" - потушили все диоды
					AzbukaMorze[0] = 0;
     5e4:	10 92 de 07 	sts	0x07DE, r1
     5e8:	10 92 dd 07 	sts	0x07DD, r1
					SetIndBits(0);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
					swIndik = cswIdle;
     5f2:	10 92 c1 07 	sts	0x07C1, r1
     5f6:	10 92 c0 07 	sts	0x07C0, r1
     5fa:	9e c0       	rjmp	.+316    	; 0x738 <Indik+0x220>
				break;
			}
		}
		else { // старое состояние - продолжаем мигать
			switch (swAzbuka) {
     5fc:	80 91 35 02 	lds	r24, 0x0235
     600:	90 91 36 02 	lds	r25, 0x0236
     604:	8d 31       	cpi	r24, 0x1D	; 29
     606:	91 05       	cpc	r25, r1
     608:	09 f4       	brne	.+2      	; 0x60c <Indik+0xf4>
     60a:	4b c0       	rjmp	.+150    	; 0x6a2 <Indik+0x18a>
     60c:	8e 31       	cpi	r24, 0x1E	; 30
     60e:	91 05       	cpc	r25, r1
     610:	3c f4       	brge	.+14     	; 0x620 <Indik+0x108>
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	91 05       	cpc	r25, r1
     616:	79 f0       	breq	.+30     	; 0x636 <Indik+0x11e>
     618:	4c 97       	sbiw	r24, 0x1c	; 28
     61a:	09 f0       	breq	.+2      	; 0x61e <Indik+0x106>
     61c:	8d c0       	rjmp	.+282    	; 0x738 <Indik+0x220>
     61e:	17 c0       	rjmp	.+46     	; 0x64e <Indik+0x136>
     620:	8a 32       	cpi	r24, 0x2A	; 42
     622:	91 05       	cpc	r25, r1
     624:	91 f1       	breq	.+100    	; 0x68a <Indik+0x172>
     626:	8c 32       	cpi	r24, 0x2C	; 44
     628:	91 05       	cpc	r25, r1
     62a:	09 f4       	brne	.+2      	; 0x62e <Indik+0x116>
     62c:	60 c0       	rjmp	.+192    	; 0x6ee <Indik+0x1d6>
     62e:	4f 97       	sbiw	r24, 0x1f	; 31
     630:	09 f0       	breq	.+2      	; 0x634 <Indik+0x11c>
     632:	82 c0       	rjmp	.+260    	; 0x738 <Indik+0x220>
     634:	65 c0       	rjmp	.+202    	; 0x700 <Indik+0x1e8>
				case cswStart:
					OnIndBit(0b00000001);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <OnIndBit>
					TIndik = GetTime();
     63c:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     640:	90 93 dc 07 	sts	0x07DC, r25
     644:	80 93 db 07 	sts	0x07DB, r24
					swAzbuka = csw010;
     648:	8c e1       	ldi	r24, 0x1C	; 28
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	71 c0       	rjmp	.+226    	; 0x730 <Indik+0x218>
				break;
				case csw010:
					if ((GetTime() - TIndik) >= Ticks(AzbukaMorze[AzbukaIndex])) { 
     64e:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     652:	20 91 db 07 	lds	r18, 0x07DB
     656:	30 91 dc 07 	lds	r19, 0x07DC
     65a:	8c 01       	movw	r16, r24
     65c:	02 1b       	sub	r16, r18
     65e:	13 0b       	sbc	r17, r19
     660:	e0 91 c4 07 	lds	r30, 0x07C4
     664:	f0 91 c5 07 	lds	r31, 0x07C5
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	e3 52       	subi	r30, 0x23	; 35
     66e:	f8 4f       	sbci	r31, 0xF8	; 248
     670:	60 81       	ld	r22, Z
     672:	71 81       	ldd	r23, Z+1	; 0x01
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
     67c:	08 17       	cp	r16, r24
     67e:	19 07       	cpc	r17, r25
     680:	08 f4       	brcc	.+2      	; 0x684 <Indik+0x16c>
     682:	5a c0       	rjmp	.+180    	; 0x738 <Indik+0x220>
						swAzbuka = cswOK;
     684:	8a e2       	ldi	r24, 0x2A	; 42
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	53 c0       	rjmp	.+166    	; 0x730 <Indik+0x218>
					}
				break;
				case cswOK:
					OffIndBit(0b00000001);
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <OffIndBit>
					TIndik = GetTime();
     690:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     694:	90 93 dc 07 	sts	0x07DC, r25
     698:	80 93 db 07 	sts	0x07DB, r24
					swAzbuka = csw020;
     69c:	8d e1       	ldi	r24, 0x1D	; 29
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	47 c0       	rjmp	.+142    	; 0x730 <Indik+0x218>
				break;
				case csw020:
					if ((GetTime() - TIndik) >= Ticks(500)) { 
     6a2:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     6a6:	20 91 db 07 	lds	r18, 0x07DB
     6aa:	30 91 dc 07 	lds	r19, 0x07DC
     6ae:	8c 01       	movw	r16, r24
     6b0:	02 1b       	sub	r16, r18
     6b2:	13 0b       	sbc	r17, r19
     6b4:	64 ef       	ldi	r22, 0xF4	; 244
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
     6c0:	08 17       	cp	r16, r24
     6c2:	19 07       	cpc	r17, r25
     6c4:	c8 f1       	brcs	.+114    	; 0x738 <Indik+0x220>
						AzbukaIndex++;
     6c6:	e0 91 c4 07 	lds	r30, 0x07C4
     6ca:	f0 91 c5 07 	lds	r31, 0x07C5
     6ce:	31 96       	adiw	r30, 0x01	; 1
     6d0:	f0 93 c5 07 	sts	0x07C5, r31
     6d4:	e0 93 c4 07 	sts	0x07C4, r30
						if (AzbukaMorze[AzbukaIndex] == 0) swAzbuka = cswEnd; // закончили серию миганий - кушаем твикс
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	e3 52       	subi	r30, 0x23	; 35
     6de:	f8 4f       	sbci	r31, 0xF8	; 248
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	89 2b       	or	r24, r25
     6e6:	11 f5       	brne	.+68     	; 0x72c <Indik+0x214>
     6e8:	8c e2       	ldi	r24, 0x2C	; 44
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	21 c0       	rjmp	.+66     	; 0x730 <Indik+0x218>
						else swAzbuka = cswStart;
					}
				break;
		//------------------------
				case cswEnd: // кушаем
					TIndik = GetTime();
     6ee:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     6f2:	90 93 dc 07 	sts	0x07DC, r25
     6f6:	80 93 db 07 	sts	0x07DB, r24
					swAzbuka = csw030;
     6fa:	8f e1       	ldi	r24, 0x1F	; 31
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	18 c0       	rjmp	.+48     	; 0x730 <Indik+0x218>
				break;
				case csw030:
					if ((GetTime() - TIndik) >= Ticks(500)) { 
     700:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     704:	20 91 db 07 	lds	r18, 0x07DB
     708:	30 91 dc 07 	lds	r19, 0x07DC
     70c:	8c 01       	movw	r16, r24
     70e:	02 1b       	sub	r16, r18
     710:	13 0b       	sbc	r17, r19
     712:	64 ef       	ldi	r22, 0xF4	; 244
     714:	71 e0       	ldi	r23, 0x01	; 1
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
     71e:	08 17       	cp	r16, r24
     720:	19 07       	cpc	r17, r25
     722:	50 f0       	brcs	.+20     	; 0x738 <Indik+0x220>
						AzbukaIndex = 0;
     724:	10 92 c5 07 	sts	0x07C5, r1
     728:	10 92 c4 07 	sts	0x07C4, r1
						swAzbuka = cswStart;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	90 93 36 02 	sts	0x0236, r25
     734:	80 93 35 02 	sts	0x0235, r24
					}
				break;
			}
		}
	}
	old_swIndik = swIndik;
     738:	80 91 c0 07 	lds	r24, 0x07C0
     73c:	90 91 c1 07 	lds	r25, 0x07C1
     740:	90 93 c3 07 	sts	0x07C3, r25
     744:	80 93 c2 07 	sts	0x07C2, r24
	return 0;
}
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <SendSMS>:
//Text – текст сообщения;
////Возвращает: 0 – все удачно, в случае ошибки – ее код.
struct SSMSToSend SMSToSendAlg;
TTime TPrevSendSMS;
int swSMS = cswIdle;
char SendSMS() {
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	c6 59       	subi	r28, 0x96	; 150
     762:	d0 40       	sbci	r29, 0x00	; 0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
	char cmdSendSMS[MAX_BUF];
	switch (swSMS) {
     76e:	80 91 be 07 	lds	r24, 0x07BE
     772:	90 91 bf 07 	lds	r25, 0x07BF
     776:	8c 31       	cpi	r24, 0x1C	; 28
     778:	91 05       	cpc	r25, r1
     77a:	a9 f1       	breq	.+106    	; 0x7e6 <SendSMS+0x96>
     77c:	8d 31       	cpi	r24, 0x1D	; 29
     77e:	91 05       	cpc	r25, r1
     780:	34 f4       	brge	.+12     	; 0x78e <SendSMS+0x3e>
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	81 f0       	breq	.+32     	; 0x7a6 <SendSMS+0x56>
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	09 f0       	breq	.+2      	; 0x78c <SendSMS+0x3c>
     78a:	d5 c0       	rjmp	.+426    	; 0x936 <SendSMS+0x1e6>
     78c:	1f c0       	rjmp	.+62     	; 0x7cc <SendSMS+0x7c>
     78e:	8f 31       	cpi	r24, 0x1F	; 31
     790:	91 05       	cpc	r25, r1
     792:	09 f4       	brne	.+2      	; 0x796 <SendSMS+0x46>
     794:	af c0       	rjmp	.+350    	; 0x8f4 <SendSMS+0x1a4>
     796:	8c 32       	cpi	r24, 0x2C	; 44
     798:	91 05       	cpc	r25, r1
     79a:	09 f4       	brne	.+2      	; 0x79e <SendSMS+0x4e>
     79c:	c8 c0       	rjmp	.+400    	; 0x92e <SendSMS+0x1de>
     79e:	4d 97       	sbiw	r24, 0x1d	; 29
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <SendSMS+0x54>
     7a2:	c9 c0       	rjmp	.+402    	; 0x936 <SendSMS+0x1e6>
     7a4:	95 c0       	rjmp	.+298    	; 0x8d0 <SendSMS+0x180>
		case cswIdle:
			if (SMSToSend.SMSPriv) {
     7a6:	80 91 62 09 	lds	r24, 0x0962
     7aa:	88 23       	and	r24, r24
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <SendSMS+0x60>
     7ae:	c3 c0       	rjmp	.+390    	; 0x936 <SendSMS+0x1e6>
				memcpy(&SMSToSendAlg, &SMSToSend, sizeof(SMSToSend));
     7b0:	a3 ef       	ldi	r26, 0xF3	; 243
     7b2:	b7 e0       	ldi	r27, 0x07	; 7
     7b4:	ec ec       	ldi	r30, 0xCC	; 204
     7b6:	f8 e0       	ldi	r31, 0x08	; 8
     7b8:	88 e9       	ldi	r24, 0x98	; 152
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <SendSMS+0x6a>
				SMSToSend.SMSPriv = 0;
     7c2:	10 92 62 09 	sts	0x0962, r1
				swSMS = cswStart;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	08 c0       	rjmp	.+16     	; 0x7dc <SendSMS+0x8c>
			}
		break;

		case cswStart:
			CellNumber = cNumber01;
     7cc:	8a e1       	ldi	r24, 0x1A	; 26
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	90 93 f7 0c 	sts	0x0CF7, r25
     7d4:	80 93 f6 0c 	sts	0x0CF6, r24
			swSMS = csw010;
     7d8:	8c e1       	ldi	r24, 0x1C	; 28
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	90 93 bf 07 	sts	0x07BF, r25
     7e0:	80 93 be 07 	sts	0x07BE, r24
     7e4:	a8 c0       	rjmp	.+336    	; 0x936 <SendSMS+0x1e6>
		break;
		
		case csw010:
			if (CellNumber >= cLast) { // Отправили СМС всем абонентам
     7e6:	40 91 f6 0c 	lds	r20, 0x0CF6
     7ea:	50 91 f7 0c 	lds	r21, 0x0CF7
     7ee:	40 32       	cpi	r20, 0x20	; 32
     7f0:	51 05       	cpc	r21, r1
     7f2:	1c f0       	brlt	.+6      	; 0x7fa <SendSMS+0xaa>
				swSMS = cswEnd;
     7f4:	8c e2       	ldi	r24, 0x2C	; 44
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	f1 cf       	rjmp	.-30     	; 0x7dc <SendSMS+0x8c>
				break;
			}
			if (
     7fa:	44 51       	subi	r20, 0x14	; 20
     7fc:	50 40       	sbci	r21, 0x00	; 0
     7fe:	b6 e2       	ldi	r27, 0x26	; 38
     800:	eb 2e       	mov	r14, r27
     802:	f1 2c       	mov	r15, r1
     804:	4e 9d       	mul	r20, r14
     806:	f0 01       	movw	r30, r0
     808:	4f 9d       	mul	r20, r15
     80a:	f0 0d       	add	r31, r0
     80c:	5e 9d       	mul	r21, r14
     80e:	f0 0d       	add	r31, r0
     810:	11 24       	eor	r1, r1
     812:	4c 5e       	subi	r20, 0xEC	; 236
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	e5 50       	subi	r30, 0x05	; 5
     818:	f6 4f       	sbci	r31, 0xF6	; 246
     81a:	83 a1       	ldd	r24, Z+35	; 0x23
     81c:	88 23       	and	r24, r24
     81e:	c9 f0       	breq	.+50     	; 0x852 <SendSMS+0x102>
     820:	80 91 89 08 	lds	r24, 0x0889
     824:	94 a1       	ldd	r25, Z+36	; 0x24
     826:	89 23       	and	r24, r25
     828:	a1 f0       	breq	.+40     	; 0x852 <SendSMS+0x102>
     82a:	20 91 8a 08 	lds	r18, 0x088A
     82e:	33 27       	eor	r19, r19
     830:	27 fd       	sbrc	r18, 7
     832:	30 95       	com	r19
     834:	20 7f       	andi	r18, 0xF0	; 240
     836:	30 70       	andi	r19, 0x00	; 0
     838:	85 a1       	ldd	r24, Z+37	; 0x25
     83a:	99 27       	eor	r25, r25
     83c:	87 fd       	sbrc	r24, 7
     83e:	90 95       	com	r25
     840:	a4 e0       	ldi	r26, 0x04	; 4
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	aa 95       	dec	r26
     848:	e1 f7       	brne	.-8      	; 0x842 <SendSMS+0xf2>
     84a:	28 23       	and	r18, r24
     84c:	39 23       	and	r19, r25
     84e:	23 2b       	or	r18, r19
     850:	39 f4       	brne	.+14     	; 0x860 <SendSMS+0x110>
				(PhoneNumber[CellNumber-cSettings].IsActive==0) || // неактивен
				((PhoneNumber[CellNumber-cSettings].Privilege & SMSToSendAlg.SMSPriv) == 0) || // не обладает привилегиями получения такого СМС
				!((SMSToSendAlg.SMSZones&(PhoneNumber[CellNumber-cSettings].Zones<<4)) & 0b11110000) // НЕ сработала зона именно этого номера
				) {
				CellNumber++;
     852:	4f 5f       	subi	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	50 93 f7 0c 	sts	0x0CF7, r21
     85a:	40 93 f6 0c 	sts	0x0CF6, r20
     85e:	6b c0       	rjmp	.+214    	; 0x936 <SendSMS+0x1e6>
			}
			else {
				strncpy(cmdSendSMS, "at+cmgs=\"", MAX_BUF-1);
     860:	8e 01       	movw	r16, r28
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	c8 01       	movw	r24, r16
     868:	68 e3       	ldi	r22, 0x38	; 56
     86a:	71 e0       	ldi	r23, 0x01	; 1
     86c:	45 e9       	ldi	r20, 0x95	; 149
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
				strncat(cmdSendSMS, PhoneNumber[CellNumber-cSettings].Number, MAX_BUF-1);
     874:	80 91 f6 0c 	lds	r24, 0x0CF6
     878:	90 91 f7 0c 	lds	r25, 0x0CF7
     87c:	44 97       	sbiw	r24, 0x14	; 20
     87e:	8e 9d       	mul	r24, r14
     880:	b0 01       	movw	r22, r0
     882:	8f 9d       	mul	r24, r15
     884:	70 0d       	add	r23, r0
     886:	9e 9d       	mul	r25, r14
     888:	70 0d       	add	r23, r0
     88a:	11 24       	eor	r1, r1
     88c:	65 50       	subi	r22, 0x05	; 5
     88e:	76 4f       	sbci	r23, 0xF6	; 246
     890:	c8 01       	movw	r24, r16
     892:	45 e9       	ldi	r20, 0x95	; 149
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
				strncat(cmdSendSMS, "\"\r\n", MAX_BUF-1);
     89a:	c8 01       	movw	r24, r16
     89c:	62 e4       	ldi	r22, 0x42	; 66
     89e:	71 e0       	ldi	r23, 0x01	; 1
     8a0:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				//strncat(cmdSendSMS, Text, MAX_BUF-1);
				strncat(cmdSendSMS, SMSToSendAlg.SMSText, MAX_BUF-1);
     8a4:	c8 01       	movw	r24, r16
     8a6:	63 ef       	ldi	r22, 0xF3	; 243
     8a8:	77 e0       	ldi	r23, 0x07	; 7
     8aa:	45 e9       	ldi	r20, 0x95	; 149
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
				strncat(cmdSendSMS, "\x1A", MAX_BUF-1); // 26 = конец файла = ^Z
     8b2:	c8 01       	movw	r24, r16
     8b4:	66 e4       	ldi	r22, 0x46	; 70
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				DoCommand(&TPrevSendSMS, cmdSendSMS, &swSMS, csw020);
     8bc:	89 ed       	ldi	r24, 0xD9	; 217
     8be:	97 e0       	ldi	r25, 0x07	; 7
     8c0:	b8 01       	movw	r22, r16
     8c2:	4e eb       	ldi	r20, 0xBE	; 190
     8c4:	57 e0       	ldi	r21, 0x07	; 7
     8c6:	2d e1       	ldi	r18, 0x1D	; 29
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
     8ce:	33 c0       	rjmp	.+102    	; 0x936 <SendSMS+0x1e6>
			}
		break;
		case csw020: // просто ждем "+CMGS:"
			WaitAnswer(TPrevSendSMS, "+CMGS:", 15000, &swSMS, csw030, csw030);
     8d0:	80 91 d9 07 	lds	r24, 0x07D9
     8d4:	90 91 da 07 	lds	r25, 0x07DA
     8d8:	68 e4       	ldi	r22, 0x48	; 72
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	48 e9       	ldi	r20, 0x98	; 152
     8de:	5a e3       	ldi	r21, 0x3A	; 58
     8e0:	2e eb       	ldi	r18, 0xBE	; 190
     8e2:	37 e0       	ldi	r19, 0x07	; 7
     8e4:	0f e1       	ldi	r16, 0x1F	; 31
     8e6:	10 e0       	ldi	r17, 0x00	; 0
     8e8:	ff e1       	ldi	r31, 0x1F	; 31
     8ea:	ef 2e       	mov	r14, r31
     8ec:	f1 2c       	mov	r15, r1
     8ee:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
     8f2:	21 c0       	rjmp	.+66     	; 0x936 <SendSMS+0x1e6>
		break;
		case csw030: // ждем "OK" и не важно от ответа (кроме 0) переходим к следующему номеру
			if (WaitAnswer(TPrevSendSMS, "OK", 5000, &swSMS, csw010, csw010)) {
     8f4:	80 91 d9 07 	lds	r24, 0x07D9
     8f8:	90 91 da 07 	lds	r25, 0x07DA
     8fc:	6f e4       	ldi	r22, 0x4F	; 79
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	48 e8       	ldi	r20, 0x88	; 136
     902:	53 e1       	ldi	r21, 0x13	; 19
     904:	2e eb       	ldi	r18, 0xBE	; 190
     906:	37 e0       	ldi	r19, 0x07	; 7
     908:	0c e1       	ldi	r16, 0x1C	; 28
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	ec e1       	ldi	r30, 0x1C	; 28
     90e:	ee 2e       	mov	r14, r30
     910:	f1 2c       	mov	r15, r1
     912:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
     916:	88 23       	and	r24, r24
     918:	71 f0       	breq	.+28     	; 0x936 <SendSMS+0x1e6>
				CellNumber++;
     91a:	80 91 f6 0c 	lds	r24, 0x0CF6
     91e:	90 91 f7 0c 	lds	r25, 0x0CF7
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	90 93 f7 0c 	sts	0x0CF7, r25
     928:	80 93 f6 0c 	sts	0x0CF6, r24
     92c:	04 c0       	rjmp	.+8      	; 0x936 <SendSMS+0x1e6>
			}
		break;
		case cswEnd:
			swSMS = cswIdle;
     92e:	10 92 bf 07 	sts	0x07BF, r1
     932:	10 92 be 07 	sts	0x07BE, r1
		break;
	}

	return 0;
}
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	ca 56       	subi	r28, 0x6A	; 106
     93a:	df 4f       	sbci	r29, 0xFF	; 255
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	cf 91       	pop	r28
     948:	df 91       	pop	r29
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <Work>:
			flSirenaOtkaz = 0; // опять переходим на анализ отказов по датчикам
		}
	}
}

char Work(void) {
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
	
	AlgMakeTermSirena();
     958:	0e 94 63 01 	call	0x2c6	; 0x2c6 <AlgMakeTermSirena>
	AlgTermSirena();
     95c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <AlgTermSirena>
	
	OutTermToPC();
     960:	0e 94 23 01 	call	0x246	; 0x246 <OutTermToPC>
	
	AlgCountRings();
     964:	0e 94 46 02 	call	0x48c	; 0x48c <AlgCountRings>
	
	switch (swWork) {
     968:	80 91 c8 07 	lds	r24, 0x07C8
     96c:	90 91 c9 07 	lds	r25, 0x07C9
     970:	82 31       	cpi	r24, 0x12	; 18
     972:	91 05       	cpc	r25, r1
     974:	09 f4       	brne	.+2      	; 0x978 <Work+0x24>
     976:	a9 c0       	rjmp	.+338    	; 0xaca <Work+0x176>
     978:	83 31       	cpi	r24, 0x13	; 19
     97a:	91 05       	cpc	r25, r1
     97c:	5c f4       	brge	.+22     	; 0x994 <Work+0x40>
     97e:	80 31       	cpi	r24, 0x10	; 16
     980:	91 05       	cpc	r25, r1
     982:	99 f1       	breq	.+102    	; 0x9ea <Work+0x96>
     984:	81 31       	cpi	r24, 0x11	; 17
     986:	91 05       	cpc	r25, r1
     988:	0c f0       	brlt	.+2      	; 0x98c <Work+0x38>
     98a:	80 c0       	rjmp	.+256    	; 0xa8c <Work+0x138>
     98c:	0f 97       	sbiw	r24, 0x0f	; 15
     98e:	09 f0       	breq	.+2      	; 0x992 <Work+0x3e>
     990:	fa c1       	rjmp	.+1012   	; 0xd86 <Work+0x432>
     992:	10 c0       	rjmp	.+32     	; 0x9b4 <Work+0x60>
     994:	84 31       	cpi	r24, 0x14	; 20
     996:	91 05       	cpc	r25, r1
     998:	09 f4       	brne	.+2      	; 0x99c <Work+0x48>
     99a:	82 c1       	rjmp	.+772    	; 0xca0 <Work+0x34c>
     99c:	84 31       	cpi	r24, 0x14	; 20
     99e:	91 05       	cpc	r25, r1
     9a0:	0c f4       	brge	.+2      	; 0x9a4 <Work+0x50>
     9a2:	34 c1       	rjmp	.+616    	; 0xc0c <Work+0x2b8>
     9a4:	85 31       	cpi	r24, 0x15	; 21
     9a6:	91 05       	cpc	r25, r1
     9a8:	09 f4       	brne	.+2      	; 0x9ac <Work+0x58>
     9aa:	b0 c0       	rjmp	.+352    	; 0xb0c <Work+0x1b8>
     9ac:	46 97       	sbiw	r24, 0x16	; 22
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <Work+0x5e>
     9b0:	ea c1       	rjmp	.+980    	; 0xd86 <Work+0x432>
     9b2:	01 c1       	rjmp	.+514    	; 0xbb6 <Work+0x262>
// RABOTA
// в этом режиме:
// если поступил звонок - отбить его через 7 гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Охрана"
		case cswStartWork:
			CountRings = 0;
     9b4:	10 92 c6 07 	sts	0x07C6, r1
			//! запустить алгоритм "отправить смс" с текстом "Снято с охраны" по одному каждому абоненту
			SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	80 93 62 09 	sts	0x0962, r24
			SMSToSend.SMSZones = 0xFF; // разрешающая зона
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	80 93 63 09 	sts	0x0963, r24
			strcpy(SMSToSend.SMSText, "Snyato!  ");
     9c4:	8c ec       	ldi	r24, 0xCC	; 204
     9c6:	98 e0       	ldi	r25, 0x08	; 8
     9c8:	62 e5       	ldi	r22, 0x52	; 82
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
			if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
				MakeTerm(tmpStr2);
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	9d e0       	ldi	r25, 0x0D	; 13
     9d4:	0e 94 9d 14 	call	0x293a	; 0x293a <MakeTerm>
				strcat(SMSToSend.SMSText, tmpStr2);
     9d8:	8c ec       	ldi	r24, 0xCC	; 204
     9da:	98 e0       	ldi	r25, 0x08	; 8
     9dc:	62 e0       	ldi	r22, 0x02	; 2
     9de:	7d e0       	ldi	r23, 0x0D	; 13
     9e0:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			}
			//swSMS = cswStart;
			swWork = cswWork;
     9e4:	80 e1       	ldi	r24, 0x10	; 16
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	6b c0       	rjmp	.+214    	; 0xac0 <Work+0x16c>
		break;

		case cswWork:
			SetIndBits(0b00000000);
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
			if (flWasPrivUserCall != 0) {
     9f0:	80 91 c7 07 	lds	r24, 0x07C7
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <Work+0xa6>
     9f8:	c6 c1       	rjmp	.+908    	; 0xd86 <Work+0x432>
				if (DIns == 0) {
     9fa:	90 91 f2 0c 	lds	r25, 0x0CF2
     9fe:	99 23       	and	r25, r25
     a00:	09 f4       	brne	.+2      	; 0xa04 <Work+0xb0>
     a02:	8a c0       	rjmp	.+276    	; 0xb18 <Work+0x1c4>
					swWork = cswStartWarta;
				}
				else {
					SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	80 93 62 09 	sts	0x0962, r24
					SMSToSend.SMSZones = DIns;
     a0a:	90 93 63 09 	sts	0x0963, r25
					strcpy(SMSToSend.SMSText, "Narushen kontur");
     a0e:	8c ec       	ldi	r24, 0xCC	; 204
     a10:	98 e0       	ldi	r25, 0x08	; 8
     a12:	6c e5       	ldi	r22, 0x5C	; 92
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
					if (DIns&0b00010000) strcat(SMSToSend.SMSText, " 1");
     a1a:	80 91 f2 0c 	lds	r24, 0x0CF2
     a1e:	84 ff       	sbrs	r24, 4
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <Work+0xda>
     a22:	8c ec       	ldi	r24, 0xCC	; 204
     a24:	98 e0       	ldi	r25, 0x08	; 8
     a26:	6c e6       	ldi	r22, 0x6C	; 108
     a28:	71 e0       	ldi	r23, 0x01	; 1
     a2a:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
					if (DIns&0b00100000) strcat(SMSToSend.SMSText, " 2");
     a2e:	80 91 f2 0c 	lds	r24, 0x0CF2
     a32:	85 ff       	sbrs	r24, 5
     a34:	06 c0       	rjmp	.+12     	; 0xa42 <Work+0xee>
     a36:	8c ec       	ldi	r24, 0xCC	; 204
     a38:	98 e0       	ldi	r25, 0x08	; 8
     a3a:	6f e6       	ldi	r22, 0x6F	; 111
     a3c:	71 e0       	ldi	r23, 0x01	; 1
     a3e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
					if (DIns&0b01000000) strcat(SMSToSend.SMSText, " 3");
     a42:	80 91 f2 0c 	lds	r24, 0x0CF2
     a46:	86 ff       	sbrs	r24, 6
     a48:	06 c0       	rjmp	.+12     	; 0xa56 <Work+0x102>
     a4a:	8c ec       	ldi	r24, 0xCC	; 204
     a4c:	98 e0       	ldi	r25, 0x08	; 8
     a4e:	62 e7       	ldi	r22, 0x72	; 114
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
					if (DIns&0b10000000) strcat(SMSToSend.SMSText, " 4");
     a56:	80 91 f2 0c 	lds	r24, 0x0CF2
     a5a:	87 ff       	sbrs	r24, 7
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <Work+0x116>
     a5e:	8c ec       	ldi	r24, 0xCC	; 204
     a60:	98 e0       	ldi	r25, 0x08	; 8
     a62:	65 e7       	ldi	r22, 0x75	; 117
     a64:	71 e0       	ldi	r23, 0x01	; 1
     a66:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
					strcat(SMSToSend.SMSText, " ");
     a6a:	8c ec       	ldi	r24, 0xCC	; 204
     a6c:	98 e0       	ldi	r25, 0x08	; 8
     a6e:	68 e7       	ldi	r22, 0x78	; 120
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
					if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
						MakeTerm(tmpStr2);
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	9d e0       	ldi	r25, 0x0D	; 13
     a7a:	0e 94 9d 14 	call	0x293a	; 0x293a <MakeTerm>
						strcat(SMSToSend.SMSText, tmpStr2);
     a7e:	8c ec       	ldi	r24, 0xCC	; 204
     a80:	98 e0       	ldi	r25, 0x08	; 8
     a82:	62 e0       	ldi	r22, 0x02	; 2
     a84:	7d e0       	ldi	r23, 0x0D	; 13
     a86:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
     a8a:	7d c1       	rjmp	.+762    	; 0xd86 <Work+0x432>
// в этом режиме:
// если поступил звонок - отбить его через 3 гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Снято"
// если сработка входа - переход в режим "Аларм"
		case cswStartWarta:
			CountRings = 0;
     a8c:	10 92 c6 07 	sts	0x07C6, r1
			//! запустить алгоритм "отправить смс" с текстом "стал на охрану" по одному каждому абоненту
			SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	80 93 62 09 	sts	0x0962, r24
			SMSToSend.SMSZones = 0xFF; // разрешающая зона
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	80 93 63 09 	sts	0x0963, r24
			strcpy(SMSToSend.SMSText, "Ohrana!  ");
     a9c:	8c ec       	ldi	r24, 0xCC	; 204
     a9e:	98 e0       	ldi	r25, 0x08	; 8
     aa0:	6a e7       	ldi	r22, 0x7A	; 122
     aa2:	71 e0       	ldi	r23, 0x01	; 1
     aa4:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
			if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
				MakeTerm(tmpStr2);
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	9d e0       	ldi	r25, 0x0D	; 13
     aac:	0e 94 9d 14 	call	0x293a	; 0x293a <MakeTerm>
				strcat(SMSToSend.SMSText, tmpStr2);
     ab0:	8c ec       	ldi	r24, 0xCC	; 204
     ab2:	98 e0       	ldi	r25, 0x08	; 8
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	7d e0       	ldi	r23, 0x0D	; 13
     ab8:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			}
			//swSMS = cswStart;
			swWork = cswWarta;
     abc:	82 e1       	ldi	r24, 0x12	; 18
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 c9 07 	sts	0x07C9, r25
     ac4:	80 93 c8 07 	sts	0x07C8, r24
     ac8:	5e c1       	rjmp	.+700    	; 0xd86 <Work+0x432>
		break;
		case cswWarta:
			SetIndBits(0b00000010);
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
			if (flWasPrivUserCall != 0) {
     ad0:	80 91 c7 07 	lds	r24, 0x07C7
     ad4:	88 23       	and	r24, r24
     ad6:	31 f0       	breq	.+12     	; 0xae4 <Work+0x190>
				swWork = cswStartWork;
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 c9 07 	sts	0x07C9, r25
     ae0:	80 93 c8 07 	sts	0x07C8, r24
			}
			if (DIns > 0) { // сработка входа
     ae4:	80 91 f2 0c 	lds	r24, 0x0CF2
     ae8:	88 23       	and	r24, r24
     aea:	09 f4       	brne	.+2      	; 0xaee <Work+0x19a>
     aec:	4c c1       	rjmp	.+664    	; 0xd86 <Work+0x432>
				swWork = cswStartAlarm;
     aee:	83 e1       	ldi	r24, 0x13	; 19
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	90 93 c9 07 	sts	0x07C9, r25
     af6:	80 93 c8 07 	sts	0x07C8, r24
				swAlarm = cswStart;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	90 93 cb 07 	sts	0x07CB, r25
     b02:	80 93 ca 07 	sts	0x07CA, r24
				CountRings=0;
     b06:	10 92 c6 07 	sts	0x07C6, r1
     b0a:	3d c1       	rjmp	.+634    	; 0xd86 <Work+0x432>
// KONTUR
// в этом режиме:
// если поступил звонок - отбить его через n гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Снято" + снять сирену
		case cswStartKontur:
			CountRings = 0;
     b0c:	10 92 c6 07 	sts	0x07C6, r1
			if (DIns == 0) {
     b10:	90 91 f2 0c 	lds	r25, 0x0CF2
     b14:	99 23       	and	r25, r25
     b16:	19 f4       	brne	.+6      	; 0xb1e <Work+0x1ca>
				swWork = cswStartWarta; // опять стать под охрану!
     b18:	81 e1       	ldi	r24, 0x11	; 17
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	d1 cf       	rjmp	.-94     	; 0xac0 <Work+0x16c>
			} 
			else {
				//! запустить алгоритм "отправить смс" с текстом "Нарушен контур" каждому абоненту
				SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	80 93 62 09 	sts	0x0962, r24
				SMSToSend.SMSZones = DIns;
     b24:	90 93 63 09 	sts	0x0963, r25
				strcpy(SMSToSend.SMSText, "ALARM Narushen kontur ");
     b28:	8c ec       	ldi	r24, 0xCC	; 204
     b2a:	98 e0       	ldi	r25, 0x08	; 8
     b2c:	64 e8       	ldi	r22, 0x84	; 132
     b2e:	71 e0       	ldi	r23, 0x01	; 1
     b30:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
				if (DIns&0b00010000) strcat(SMSToSend.SMSText, " 1");
     b34:	80 91 f2 0c 	lds	r24, 0x0CF2
     b38:	84 ff       	sbrs	r24, 4
     b3a:	06 c0       	rjmp	.+12     	; 0xb48 <Work+0x1f4>
     b3c:	8c ec       	ldi	r24, 0xCC	; 204
     b3e:	98 e0       	ldi	r25, 0x08	; 8
     b40:	6c e6       	ldi	r22, 0x6C	; 108
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				if (DIns&0b00100000) strcat(SMSToSend.SMSText, " 2");
     b48:	80 91 f2 0c 	lds	r24, 0x0CF2
     b4c:	85 ff       	sbrs	r24, 5
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <Work+0x208>
     b50:	8c ec       	ldi	r24, 0xCC	; 204
     b52:	98 e0       	ldi	r25, 0x08	; 8
     b54:	6f e6       	ldi	r22, 0x6F	; 111
     b56:	71 e0       	ldi	r23, 0x01	; 1
     b58:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				if (DIns&0b01000000) strcat(SMSToSend.SMSText, " 3");
     b5c:	80 91 f2 0c 	lds	r24, 0x0CF2
     b60:	86 ff       	sbrs	r24, 6
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <Work+0x21c>
     b64:	8c ec       	ldi	r24, 0xCC	; 204
     b66:	98 e0       	ldi	r25, 0x08	; 8
     b68:	62 e7       	ldi	r22, 0x72	; 114
     b6a:	71 e0       	ldi	r23, 0x01	; 1
     b6c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				if (DIns&0b10000000) strcat(SMSToSend.SMSText, " 4");
     b70:	80 91 f2 0c 	lds	r24, 0x0CF2
     b74:	87 ff       	sbrs	r24, 7
     b76:	06 c0       	rjmp	.+12     	; 0xb84 <Work+0x230>
     b78:	8c ec       	ldi	r24, 0xCC	; 204
     b7a:	98 e0       	ldi	r25, 0x08	; 8
     b7c:	65 e7       	ldi	r22, 0x75	; 117
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				strcat(SMSToSend.SMSText, " ");
     b84:	8c ec       	ldi	r24, 0xCC	; 204
     b86:	98 e0       	ldi	r25, 0x08	; 8
     b88:	68 e7       	ldi	r22, 0x78	; 120
     b8a:	71 e0       	ldi	r23, 0x01	; 1
     b8c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				TPrevKontur = GetTime();
     b90:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     b94:	90 93 96 08 	sts	0x0896, r25
     b98:	80 93 95 08 	sts	0x0895, r24
				if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
					MakeTerm(tmpStr2);
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	9d e0       	ldi	r25, 0x0D	; 13
     ba0:	0e 94 9d 14 	call	0x293a	; 0x293a <MakeTerm>
					strcat(SMSToSend.SMSText, tmpStr2);
     ba4:	8c ec       	ldi	r24, 0xCC	; 204
     ba6:	98 e0       	ldi	r25, 0x08	; 8
     ba8:	62 e0       	ldi	r22, 0x02	; 2
     baa:	7d e0       	ldi	r23, 0x0D	; 13
     bac:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
				}
				//swSMS = cswStart;
				swWork = cswKontur;
     bb0:	86 e1       	ldi	r24, 0x16	; 22
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	85 cf       	rjmp	.-246    	; 0xac0 <Work+0x16c>
			}
		break;
		case cswKontur:
			// будем проверять контур не чаще чем 20 сек, чаще нет смысла
			if ((GetTime() - TPrevKontur) >= Ticks(20000)) { 
     bb6:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     bba:	20 91 95 08 	lds	r18, 0x0895
     bbe:	30 91 96 08 	lds	r19, 0x0896
     bc2:	8c 01       	movw	r16, r24
     bc4:	02 1b       	sub	r16, r18
     bc6:	13 0b       	sbc	r17, r19
     bc8:	60 e2       	ldi	r22, 0x20	; 32
     bca:	7e e4       	ldi	r23, 0x4E	; 78
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
     bd4:	08 17       	cp	r16, r24
     bd6:	19 07       	cpc	r17, r25
     bd8:	88 f0       	brcs	.+34     	; 0xbfc <Work+0x2a8>
				if (DIns == 0) {
     bda:	80 91 f2 0c 	lds	r24, 0x0CF2
     bde:	88 23       	and	r24, r24
     be0:	31 f4       	brne	.+12     	; 0xbee <Work+0x29a>
					swWork = cswStartWarta; // опять стать под охрану!
     be2:	81 e1       	ldi	r24, 0x11	; 17
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 c9 07 	sts	0x07C9, r25
     bea:	80 93 c8 07 	sts	0x07C8, r24
				}
				TPrevKontur = GetTime();
     bee:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     bf2:	90 93 96 08 	sts	0x0896, r25
     bf6:	80 93 95 08 	sts	0x0895, r24
     bfa:	c5 c0       	rjmp	.+394    	; 0xd86 <Work+0x432>
				break;
			}
			if (flWasPrivUserCall != 0) {
     bfc:	80 91 c7 07 	lds	r24, 0x07C7
     c00:	88 23       	and	r24, r24
     c02:	09 f4       	brne	.+2      	; 0xc06 <Work+0x2b2>
     c04:	c0 c0       	rjmp	.+384    	; 0xd86 <Work+0x432>
				swWork = cswStartWork; // 
     c06:	8f e0       	ldi	r24, 0x0F	; 15
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	b5 c0       	rjmp	.+362    	; 0xd76 <Work+0x422>
// включить сирену
// если поступил звонок - отбить его через 1 гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Снято" + снять сирену
// прошло 3 минуты (время может конфигурироваться) - переход в режим "Охрана" + снять сирену
		case cswStartAlarm:
			CountRings = 0;
     c0c:	10 92 c6 07 	sts	0x07C6, r1
			//! запустить алгоритм "отправить смс" с текстом "Сирена" по одному каждому абоненту
			SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS|cPrivilegeAlarmSMS;
     c10:	87 e0       	ldi	r24, 0x07	; 7
     c12:	80 93 62 09 	sts	0x0962, r24
			SMSToSend.SMSZones = DIns;
     c16:	80 91 f2 0c 	lds	r24, 0x0CF2
     c1a:	80 93 63 09 	sts	0x0963, r24
			strcpy(SMSToSend.SMSText, "ALARM! ");
     c1e:	8c ec       	ldi	r24, 0xCC	; 204
     c20:	98 e0       	ldi	r25, 0x08	; 8
     c22:	6b e9       	ldi	r22, 0x9B	; 155
     c24:	71 e0       	ldi	r23, 0x01	; 1
     c26:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
			if (DIns&0b00010000) strcat(SMSToSend.SMSText, " 1");
     c2a:	80 91 f2 0c 	lds	r24, 0x0CF2
     c2e:	84 ff       	sbrs	r24, 4
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <Work+0x2ea>
     c32:	8c ec       	ldi	r24, 0xCC	; 204
     c34:	98 e0       	ldi	r25, 0x08	; 8
     c36:	6c e6       	ldi	r22, 0x6C	; 108
     c38:	71 e0       	ldi	r23, 0x01	; 1
     c3a:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			if (DIns&0b00100000) strcat(SMSToSend.SMSText, " 2");
     c3e:	80 91 f2 0c 	lds	r24, 0x0CF2
     c42:	85 ff       	sbrs	r24, 5
     c44:	06 c0       	rjmp	.+12     	; 0xc52 <Work+0x2fe>
     c46:	8c ec       	ldi	r24, 0xCC	; 204
     c48:	98 e0       	ldi	r25, 0x08	; 8
     c4a:	6f e6       	ldi	r22, 0x6F	; 111
     c4c:	71 e0       	ldi	r23, 0x01	; 1
     c4e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			if (DIns&0b01000000) strcat(SMSToSend.SMSText, " 3");
     c52:	80 91 f2 0c 	lds	r24, 0x0CF2
     c56:	86 ff       	sbrs	r24, 6
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <Work+0x312>
     c5a:	8c ec       	ldi	r24, 0xCC	; 204
     c5c:	98 e0       	ldi	r25, 0x08	; 8
     c5e:	62 e7       	ldi	r22, 0x72	; 114
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			if (DIns&0b10000000) strcat(SMSToSend.SMSText, " 4");
     c66:	80 91 f2 0c 	lds	r24, 0x0CF2
     c6a:	87 ff       	sbrs	r24, 7
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <Work+0x326>
     c6e:	8c ec       	ldi	r24, 0xCC	; 204
     c70:	98 e0       	ldi	r25, 0x08	; 8
     c72:	65 e7       	ldi	r22, 0x75	; 117
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			strcat(SMSToSend.SMSText, " ");
     c7a:	8c ec       	ldi	r24, 0xCC	; 204
     c7c:	98 e0       	ldi	r25, 0x08	; 8
     c7e:	68 e7       	ldi	r22, 0x78	; 120
     c80:	71 e0       	ldi	r23, 0x01	; 1
     c82:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
				MakeTerm(tmpStr2);
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	9d e0       	ldi	r25, 0x0D	; 13
     c8a:	0e 94 9d 14 	call	0x293a	; 0x293a <MakeTerm>
				strcat(SMSToSend.SMSText, tmpStr2);
     c8e:	8c ec       	ldi	r24, 0xCC	; 204
     c90:	98 e0       	ldi	r25, 0x08	; 8
     c92:	62 e0       	ldi	r22, 0x02	; 2
     c94:	7d e0       	ldi	r23, 0x0D	; 13
     c96:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			}
			//swSMS = cswStart;
			//swCall = cswStart; //! дозвон по разрешенным номерам
			swWork = cswAlarm;
     c9a:	84 e1       	ldi	r24, 0x14	; 20
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	10 cf       	rjmp	.-480    	; 0xac0 <Work+0x16c>
		break;
		case cswAlarm:
			SetIndBits(0b00000011);
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
			if (flWasPrivUserCall != 0) {
     ca6:	80 91 c7 07 	lds	r24, 0x07C7
     caa:	88 23       	and	r24, r24
     cac:	99 f0       	breq	.+38     	; 0xcd4 <Work+0x380>
	DOuts = DOuts & 0b11101111; 
}
//------------------------------------------------------------------------------------
// выключить сирену
void SirenaOff(void) {
	DOuts = DOuts | 0b00010000; 
     cae:	80 91 4b 02 	lds	r24, 0x024B
     cb2:	80 61       	ori	r24, 0x10	; 16
     cb4:	80 93 4b 02 	sts	0x024B, r24
		break;
		case cswAlarm:
			SetIndBits(0b00000011);
			if (flWasPrivUserCall != 0) {
				SirenaOff();
				swAlarm = cswIdle; //
     cb8:	10 92 cb 07 	sts	0x07CB, r1
     cbc:	10 92 ca 07 	sts	0x07CA, r1
				swWork = cswStartKontur; // ждем собранного контура, чтоб стать под охрану
     cc0:	85 e1       	ldi	r24, 0x15	; 21
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	90 93 c9 07 	sts	0x07C9, r25
     cc8:	80 93 c8 07 	sts	0x07C8, r24
				swCall = cswIdle;
     ccc:	10 92 cd 07 	sts	0x07CD, r1
     cd0:	10 92 cc 07 	sts	0x07CC, r1
			}
			
			// СИРЕНА. отключается: или по времени или при звонке от разрешенного абонента
			switch (swAlarm) {
     cd4:	80 91 ca 07 	lds	r24, 0x07CA
     cd8:	90 91 cb 07 	lds	r25, 0x07CB
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	91 05       	cpc	r25, r1
     ce0:	21 f0       	breq	.+8      	; 0xcea <Work+0x396>
     ce2:	4c 97       	sbiw	r24, 0x1c	; 28
     ce4:	09 f0       	breq	.+2      	; 0xce8 <Work+0x394>
     ce6:	4f c0       	rjmp	.+158    	; 0xd86 <Work+0x432>
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <Work+0x3ba>
				case cswIdle:
				break;
		
				case cswStart:
					TPrevWorkAlarm = GetTime();
     cea:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     cee:	90 93 92 08 	sts	0x0892, r25
     cf2:	80 93 91 08 	sts	0x0891, r24
}

//------------------------------------------------------------------------------------
// включить сирену
void SirenaOn(void) {
	DOuts = DOuts & 0b11101111; 
     cf6:	80 91 4b 02 	lds	r24, 0x024B
     cfa:	8f 7e       	andi	r24, 0xEF	; 239
     cfc:	80 93 4b 02 	sts	0x024B, r24
				break;
		
				case cswStart:
					TPrevWorkAlarm = GetTime();
					SirenaOn();
					swAlarm = csw010;
     d00:	8c e1       	ldi	r24, 0x1C	; 28
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 93 cb 07 	sts	0x07CB, r25
     d08:	80 93 ca 07 	sts	0x07CA, r24
     d0c:	3c c0       	rjmp	.+120    	; 0xd86 <Work+0x432>
				break;

				case csw010:
					AlarmTime_ms = Settings.AlarmTime_s;
					AlarmTime_ms = AlarmTime_ms * 1000;
     d0e:	60 91 c9 08 	lds	r22, 0x08C9
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	28 ee       	ldi	r18, 0xE8	; 232
     d1a:	33 e0       	ldi	r19, 0x03	; 3
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__mulsi3>
     d24:	60 93 99 08 	sts	0x0899, r22
     d28:	70 93 9a 08 	sts	0x089A, r23
     d2c:	80 93 9b 08 	sts	0x089B, r24
     d30:	90 93 9c 08 	sts	0x089C, r25
					if ((GetTime() - TPrevWorkAlarm) >= Ticks(AlarmTime_ms)) { // 60 sec
     d34:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
     d38:	20 91 91 08 	lds	r18, 0x0891
     d3c:	30 91 92 08 	lds	r19, 0x0892
     d40:	8c 01       	movw	r16, r24
     d42:	02 1b       	sub	r16, r18
     d44:	13 0b       	sbc	r17, r19
     d46:	60 91 99 08 	lds	r22, 0x0899
     d4a:	70 91 9a 08 	lds	r23, 0x089A
     d4e:	80 91 9b 08 	lds	r24, 0x089B
     d52:	90 91 9c 08 	lds	r25, 0x089C
     d56:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
     d5a:	08 17       	cp	r16, r24
     d5c:	19 07       	cpc	r17, r25
     d5e:	98 f0       	brcs	.+38     	; 0xd86 <Work+0x432>
	DOuts = DOuts & 0b11101111; 
}
//------------------------------------------------------------------------------------
// выключить сирену
void SirenaOff(void) {
	DOuts = DOuts | 0b00010000; 
     d60:	80 91 4b 02 	lds	r24, 0x024B
     d64:	80 61       	ori	r24, 0x10	; 16
     d66:	80 93 4b 02 	sts	0x024B, r24
				case csw010:
					AlarmTime_ms = Settings.AlarmTime_s;
					AlarmTime_ms = AlarmTime_ms * 1000;
					if ((GetTime() - TPrevWorkAlarm) >= Ticks(AlarmTime_ms)) { // 60 sec
						SirenaOff();
						swAlarm = cswIdle; //
     d6a:	10 92 cb 07 	sts	0x07CB, r1
     d6e:	10 92 ca 07 	sts	0x07CA, r1
						swWork = cswStartKontur; // ждем собранного контура, чтоб стать под охрану
     d72:	85 e1       	ldi	r24, 0x15	; 21
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	90 93 c9 07 	sts	0x07C9, r25
     d7a:	80 93 c8 07 	sts	0x07C8, r24
						swCall = cswIdle;
     d7e:	10 92 cd 07 	sts	0x07CD, r1
     d82:	10 92 cc 07 	sts	0x07CC, r1
				break;
			}
			// END СИРЕНА. отключается: или по времени или при звонке от разрешенного абонента
		break;
	}
	SendSMS();
     d86:	0e 94 a8 03 	call	0x750	; 0x750 <SendSMS>

	if (DIns) SrabotkaOn();
     d8a:	80 91 f2 0c 	lds	r24, 0x0CF2
     d8e:	90 91 4b 02 	lds	r25, 0x024B
     d92:	88 23       	and	r24, r24
     d94:	11 f0       	breq	.+4      	; 0xd9a <Work+0x446>
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// включить выход, являющийся сборным для всех входов
void SrabotkaOn(void) {
	DOuts = DOuts & 0b11011111; 
     d96:	9f 7d       	andi	r25, 0xDF	; 223
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <Work+0x448>
}
//------------------------------------------------------------------------------------
// выключить выход, являющийся сборным для всех входов
void SrabotkaOff(void) {
	DOuts = DOuts | 0b00100000; 
     d9a:	90 62       	ori	r25, 0x20	; 32
     d9c:	90 93 4b 02 	sts	0x024B, r25
	SendSMS();

	if (DIns) SrabotkaOn();
	else SrabotkaOff();
	
	flWasPrivUserCall = 0;
     da0:	10 92 c7 07 	sts	0x07C7, r1

	return 0;
}
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	08 95       	ret

00000dac <TryBilling>:
}
//------------------------------------------------------------------------------------

int swTryBilling = cswIdle;
TTime TTryBilling;
char TryBilling(void) {
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	c6 59       	subi	r28, 0x96	; 150
     dbe:	d0 40       	sbci	r29, 0x00	; 0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
	char RetWaitAnswer;
	char RetVal = 1; // еще работает - нет определенного результата
	char cmdSendSMS[MAX_BUF];
	switch (swTryBilling) {
     dca:	80 91 bc 07 	lds	r24, 0x07BC
     dce:	90 91 bd 07 	lds	r25, 0x07BD
     dd2:	8a 31       	cpi	r24, 0x1A	; 26
     dd4:	91 05       	cpc	r25, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <TryBilling+0x2e>
     dd8:	5e c0       	rjmp	.+188    	; 0xe96 <TryBilling+0xea>
     dda:	8b 31       	cpi	r24, 0x1B	; 27
     ddc:	91 05       	cpc	r25, r1
     dde:	34 f4       	brge	.+12     	; 0xdec <TryBilling+0x40>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	81 f0       	breq	.+32     	; 0xe06 <TryBilling+0x5a>
     de6:	49 97       	sbiw	r24, 0x19	; 25
     de8:	c1 f4       	brne	.+48     	; 0xe1a <TryBilling+0x6e>
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <TryBilling+0x56>
     dec:	8d 31       	cpi	r24, 0x1D	; 29
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <TryBilling+0x48>
     df2:	47 c0       	rjmp	.+142    	; 0xe82 <TryBilling+0xd6>
     df4:	8a 32       	cpi	r24, 0x2A	; 42
     df6:	91 05       	cpc	r25, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <TryBilling+0x50>
     dfa:	4f c0       	rjmp	.+158    	; 0xe9a <TryBilling+0xee>
     dfc:	4c 97       	sbiw	r24, 0x1c	; 28
     dfe:	69 f4       	brne	.+26     	; 0xe1a <TryBilling+0x6e>
     e00:	2e c0       	rjmp	.+92     	; 0xe5e <TryBilling+0xb2>
     e02:	8a e0       	ldi	r24, 0x0A	; 10
     e04:	4b c0       	rjmp	.+150    	; 0xe9c <TryBilling+0xf0>
		case cswIdle:
		break;
		
		case cswStart:
			if (PhoneNumber[cProverkaScheta-cSettings].IsActive == 0) {
     e06:	80 91 90 0a 	lds	r24, 0x0A90
     e0a:	88 23       	and	r24, r24
     e0c:	41 f4       	brne	.+16     	; 0xe1e <TryBilling+0x72>
				swTryBilling = cswOK;
     e0e:	8a e2       	ldi	r24, 0x2A	; 42
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	90 93 bd 07 	sts	0x07BD, r25
     e16:	80 93 bc 07 	sts	0x07BC, r24
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <TryBilling+0xf0>
				break;
			}
			strncpy(cmdSendSMS, "at+cusd=1,\"", MAX_BUF-1);
     e1e:	8e 01       	movw	r16, r28
     e20:	0f 5f       	subi	r16, 0xFF	; 255
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	c8 01       	movw	r24, r16
     e26:	63 ea       	ldi	r22, 0xA3	; 163
     e28:	71 e0       	ldi	r23, 0x01	; 1
     e2a:	45 e9       	ldi	r20, 0x95	; 149
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
			strncat(cmdSendSMS, PhoneNumber[cProverkaScheta-cSettings].Number, MAX_BUF-1);
     e32:	c8 01       	movw	r24, r16
     e34:	6d e6       	ldi	r22, 0x6D	; 109
     e36:	7a e0       	ldi	r23, 0x0A	; 10
     e38:	45 e9       	ldi	r20, 0x95	; 149
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
			strncat(cmdSendSMS, "\",15\r\n", MAX_BUF-1);
     e40:	c8 01       	movw	r24, r16
     e42:	6f ea       	ldi	r22, 0xAF	; 175
     e44:	71 e0       	ldi	r23, 0x01	; 1
     e46:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			DoCommand(&TTryBilling, cmdSendSMS, &swTryBilling, csw010);
     e4a:	83 e9       	ldi	r24, 0x93	; 147
     e4c:	98 e0       	ldi	r25, 0x08	; 8
     e4e:	b8 01       	movw	r22, r16
     e50:	4c eb       	ldi	r20, 0xBC	; 188
     e52:	57 e0       	ldi	r21, 0x07	; 7
     e54:	2c e1       	ldi	r18, 0x1C	; 28
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
     e5c:	de cf       	rjmp	.-68     	; 0xe1a <TryBilling+0x6e>
		break;
		
		case csw010:
			RetWaitAnswer = WaitAnswer(TTryBilling, "+CUSD: ", 10000, &swTryBilling, csw020, cswCantConnectBill);
     e5e:	80 91 93 08 	lds	r24, 0x0893
     e62:	90 91 94 08 	lds	r25, 0x0894
     e66:	66 eb       	ldi	r22, 0xB6	; 182
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	40 e1       	ldi	r20, 0x10	; 16
     e6c:	57 e2       	ldi	r21, 0x27	; 39
     e6e:	2c eb       	ldi	r18, 0xBC	; 188
     e70:	37 e0       	ldi	r19, 0x07	; 7
     e72:	0d e1       	ldi	r16, 0x1D	; 29
     e74:	10 e0       	ldi	r17, 0x00	; 0
     e76:	e9 e1       	ldi	r30, 0x19	; 25
     e78:	ee 2e       	mov	r14, r30
     e7a:	f1 2c       	mov	r15, r1
     e7c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
     e80:	cc cf       	rjmp	.-104    	; 0xe1a <TryBilling+0x6e>
		break;
		
		case csw020: // разбор остатка
			//Ostatok = GetNumberFromBillString(FromModemBuf);
			if (Ostatok < MinBill) swTryBilling = cswLittleMoney;
     e82:	80 91 d5 07 	lds	r24, 0x07D5
     e86:	90 91 d6 07 	lds	r25, 0x07D6
     e8a:	04 97       	sbiw	r24, 0x04	; 4
     e8c:	0c f0       	brlt	.+2      	; 0xe90 <TryBilling+0xe4>
     e8e:	bf cf       	rjmp	.-130    	; 0xe0e <TryBilling+0x62>
     e90:	8a e1       	ldi	r24, 0x1A	; 26
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	be cf       	rjmp	.-132    	; 0xe12 <TryBilling+0x66>
			else swTryBilling = cswOK;
     e96:	8b e0       	ldi	r24, 0x0B	; 11
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <TryBilling+0xf0>
			RetVal = 10;
		break;
		
		case cswLittleMoney: // остаток на счете меньше дозволенной границы
			RetVal = 11;
		break;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
			RetVal = 0;
		break;
		
	}
	return RetVal;
}
     e9c:	ca 56       	subi	r28, 0x6A	; 106
     e9e:	df 4f       	sbci	r29, 0xFF	; 255
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	08 95       	ret

00000eb8 <GetNumberFromBillString>:
	DOuts = DOuts | 0b00100000; 
}
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
int GetNumberFromBillString(char *BillStr, char *StrNumber) {
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	1f 93       	push	r17
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	c6 59       	subi	r28, 0x96	; 150
     ec8:	d0 40       	sbci	r29, 0x00	; 0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
	char tmpCh[MAX_BUF];
	int CifraIndex = 0;
	char flWasCifra = 0;
	
	BillStr = strstr(BillStr, "\"");
     ed4:	62 e2       	ldi	r22, 0x22	; 34
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <strchr>
     edc:	9c 01       	movw	r18, r24
	if (BillStr == NULL) return 0;
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	e9 f1       	breq	.+122    	; 0xf5c <GetNumberFromBillString+0xa4>
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	10 e0       	ldi	r17, 0x00	; 0
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e0       	ldi	r21, 0x00	; 0
			tmpCh[1] = 0;
			break;
		}
		
		if ((BillStr[i] >= '0') && (BillStr[i] <= '9')) { // это цифра
			tmpCh[CifraIndex] = BillStr[i];
     eec:	7e 01       	movw	r14, r28
     eee:	08 94       	sec
     ef0:	e1 1c       	adc	r14, r1
     ef2:	f1 1c       	adc	r15, r1
     ef4:	21 c0       	rjmp	.+66     	; 0xf38 <GetNumberFromBillString+0x80>
	
	BillStr = strstr(BillStr, "\"");
	if (BillStr == NULL) return 0;
	
	for (int i=0; i<strlen(BillStr); ++i) {
		if (i >= MAX_BUF-5) {
     ef6:	41 39       	cpi	r20, 0x91	; 145
     ef8:	51 05       	cpc	r21, r1
     efa:	21 f4       	brne	.+8      	; 0xf04 <GetNumberFromBillString+0x4c>
			tmpCh[0] = '0';
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	89 83       	std	Y+1, r24	; 0x01
			tmpCh[1] = 0;
     f00:	1a 82       	std	Y+2, r1	; 0x02
     f02:	24 c0       	rjmp	.+72     	; 0xf4c <GetNumberFromBillString+0x94>
			break;
		}
		
		if ((BillStr[i] >= '0') && (BillStr[i] <= '9')) { // это цифра
     f04:	f9 01       	movw	r30, r18
     f06:	e4 0f       	add	r30, r20
     f08:	f5 1f       	adc	r31, r21
     f0a:	90 81       	ld	r25, Z
     f0c:	89 2f       	mov	r24, r25
     f0e:	80 53       	subi	r24, 0x30	; 48
     f10:	8a 30       	cpi	r24, 0x0A	; 10
     f12:	40 f4       	brcc	.+16     	; 0xf24 <GetNumberFromBillString+0x6c>
			tmpCh[CifraIndex] = BillStr[i];
     f14:	f7 01       	movw	r30, r14
     f16:	e6 0f       	add	r30, r22
     f18:	f7 1f       	adc	r31, r23
     f1a:	90 83       	st	Z, r25
			++CifraIndex;
     f1c:	6f 5f       	subi	r22, 0xFF	; 255
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	11 e0       	ldi	r17, 0x01	; 1
     f22:	08 c0       	rjmp	.+16     	; 0xf34 <GetNumberFromBillString+0x7c>
			flWasCifra = 1;
		}
		else { // какой-то левый символ - нам не нужен
			if (flWasCifra == 1) { // дочитали число до конца
     f24:	11 30       	cpi	r17, 0x01	; 1
     f26:	29 f4       	brne	.+10     	; 0xf32 <GetNumberFromBillString+0x7a>
				tmpCh[CifraIndex] = 0;
     f28:	6c 0f       	add	r22, r28
     f2a:	7d 1f       	adc	r23, r29
     f2c:	fb 01       	movw	r30, r22
     f2e:	11 82       	std	Z+1, r1	; 0x01
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <GetNumberFromBillString+0x98>
     f32:	10 e0       	ldi	r17, 0x00	; 0
	char flWasCifra = 0;
	
	BillStr = strstr(BillStr, "\"");
	if (BillStr == NULL) return 0;
	
	for (int i=0; i<strlen(BillStr); ++i) {
     f34:	4f 5f       	subi	r20, 0xFF	; 255
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	f9 01       	movw	r30, r18
     f3a:	01 90       	ld	r0, Z+
     f3c:	00 20       	and	r0, r0
     f3e:	e9 f7       	brne	.-6      	; 0xf3a <GetNumberFromBillString+0x82>
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	e2 1b       	sub	r30, r18
     f44:	f3 0b       	sbc	r31, r19
     f46:	4e 17       	cp	r20, r30
     f48:	5f 07       	cpc	r21, r31
     f4a:	a8 f2       	brcs	.-86     	; 0xef6 <GetNumberFromBillString+0x3e>
			}
		}
	}
	
	int RetVal = 0;
	if (flWasCifra) {
     f4c:	11 23       	and	r17, r17
     f4e:	31 f0       	breq	.+12     	; 0xf5c <GetNumberFromBillString+0xa4>
		RetVal = atoi(tmpCh);
     f50:	ce 01       	movw	r24, r28
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <atoi>
     f58:	9c 01       	movw	r18, r24
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GetNumberFromBillString+0xa8>
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return RetVal;
}
     f60:	c9 01       	movw	r24, r18
     f62:	ca 56       	subi	r28, 0x6A	; 106
     f64:	df 4f       	sbci	r29, 0xFF	; 255
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	1f 91       	pop	r17
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	08 95       	ret

00000f7c <UnPackTermSetts>:
		PhoneNumber[CellNumber-cSettings].Zones = tmpVal;
	}
}
//------------------------------------------------------------------------------------

void UnPackTermSetts(char *StrSettings, int NumTerm) {
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	2a 97       	sbiw	r28, 0x0a	; 10
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	6c 01       	movw	r12, r24
     f9e:	7b 01       	movw	r14, r22
	char tmpStr[10];
	int tmpVal = 0;
	int NumLen = strlen(StrSettings);
     fa0:	fc 01       	movw	r30, r24
     fa2:	01 90       	ld	r0, Z+
     fa4:	00 20       	and	r0, r0
     fa6:	e9 f7       	brne	.-6      	; 0xfa2 <UnPackTermSetts+0x26>
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	e8 1b       	sub	r30, r24
     fac:	f9 0b       	sbc	r31, r25
     fae:	db 01       	movw	r26, r22
     fb0:	16 e0       	ldi	r17, 0x06	; 6
     fb2:	aa 0f       	add	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	1a 95       	dec	r17
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <UnPackTermSetts+0x36>
	if (NumLen < 8) {
     fba:	38 97       	sbiw	r30, 0x08	; 8
     fbc:	6c f4       	brge	.+26     	; 0xfd8 <UnPackTermSetts+0x5c>
		Terms[NumTerm].MINLim = -55;
     fbe:	fd 01       	movw	r30, r26
     fc0:	ee 55       	subi	r30, 0x5E	; 94
     fc2:	f2 4f       	sbci	r31, 0xF2	; 242
     fc4:	89 ec       	ldi	r24, 0xC9	; 201
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
     fc8:	90 8b       	std	Z+16, r25	; 0x10
     fca:	87 87       	std	Z+15, r24	; 0x0f
		Terms[NumTerm].MAXLim = 200;
     fcc:	88 ec       	ldi	r24, 0xC8	; 200
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	92 8b       	std	Z+18, r25	; 0x12
     fd2:	81 8b       	std	Z+17, r24	; 0x11
		Terms[NumTerm].flEnable = 0;
     fd4:	13 8a       	std	Z+19, r1	; 0x13
     fd6:	49 c0       	rjmp	.+146    	; 0x106a <UnPackTermSetts+0xee>
		return;
	}
	
	Terms[NumTerm].flEnable = 1;
     fd8:	ae 55       	subi	r26, 0x5E	; 94
     fda:	b2 4f       	sbci	r27, 0xF2	; 242
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	53 96       	adiw	r26, 0x13	; 19
     fe0:	8c 93       	st	X, r24
	// Tmin - 0 позиции
	strncpy(tmpStr, &(StrSettings[1]), 3);
     fe2:	b6 01       	movw	r22, r12
     fe4:	6f 5f       	subi	r22, 0xFF	; 255
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8e 01       	movw	r16, r28
     fea:	0f 5f       	subi	r16, 0xFF	; 255
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	c8 01       	movw	r24, r16
     ff0:	43 e0       	ldi	r20, 0x03	; 3
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
	tmpStr[3] = 0;
     ff8:	1c 82       	std	Y+4, r1	; 0x04
	tmpVal = atoi(tmpStr);
     ffa:	c8 01       	movw	r24, r16
     ffc:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <atoi>
    1000:	9c 01       	movw	r18, r24
	if (StrSettings[0] == '1') tmpVal = 0 - tmpVal;
    1002:	f6 01       	movw	r30, r12
    1004:	80 81       	ld	r24, Z
    1006:	81 33       	cpi	r24, 0x31	; 49
    1008:	19 f4       	brne	.+6      	; 0x1010 <UnPackTermSetts+0x94>
    100a:	30 95       	com	r19
    100c:	21 95       	neg	r18
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
	Terms[NumTerm].MINLim = tmpVal;
    1010:	f7 01       	movw	r30, r14
    1012:	a6 e0       	ldi	r26, 0x06	; 6
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	aa 95       	dec	r26
    101a:	e1 f7       	brne	.-8      	; 0x1014 <UnPackTermSetts+0x98>
    101c:	ee 55       	subi	r30, 0x5E	; 94
    101e:	f2 4f       	sbci	r31, 0xF2	; 242
    1020:	30 8b       	std	Z+16, r19	; 0x10
    1022:	27 87       	std	Z+15, r18	; 0x0f

	// Tmax - 4 позиции
	strncpy(tmpStr, &(StrSettings[5]), 3);
    1024:	b6 01       	movw	r22, r12
    1026:	6b 5f       	subi	r22, 0xFB	; 251
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8e 01       	movw	r16, r28
    102c:	0f 5f       	subi	r16, 0xFF	; 255
    102e:	1f 4f       	sbci	r17, 0xFF	; 255
    1030:	c8 01       	movw	r24, r16
    1032:	43 e0       	ldi	r20, 0x03	; 3
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
	tmpStr[3] = 0;
    103a:	1c 82       	std	Y+4, r1	; 0x04
	tmpVal = atoi(tmpStr);
    103c:	c8 01       	movw	r24, r16
    103e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <atoi>
    1042:	9c 01       	movw	r18, r24
	if (StrSettings[4] == '1') tmpVal = 0 - tmpVal;
    1044:	f6 01       	movw	r30, r12
    1046:	84 81       	ldd	r24, Z+4	; 0x04
    1048:	81 33       	cpi	r24, 0x31	; 49
    104a:	19 f4       	brne	.+6      	; 0x1052 <UnPackTermSetts+0xd6>
    104c:	30 95       	com	r19
    104e:	21 95       	neg	r18
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
	Terms[NumTerm].MAXLim = tmpVal;
    1052:	f6 e0       	ldi	r31, 0x06	; 6
    1054:	ee 0c       	add	r14, r14
    1056:	ff 1c       	adc	r15, r15
    1058:	fa 95       	dec	r31
    105a:	e1 f7       	brne	.-8      	; 0x1054 <UnPackTermSetts+0xd8>
    105c:	82 ea       	ldi	r24, 0xA2	; 162
    105e:	9d e0       	ldi	r25, 0x0D	; 13
    1060:	e8 0e       	add	r14, r24
    1062:	f9 1e       	adc	r15, r25
    1064:	f7 01       	movw	r30, r14
    1066:	32 8b       	std	Z+18, r19	; 0x12
    1068:	21 8b       	std	Z+17, r18	; 0x11
}
    106a:	2a 96       	adiw	r28, 0x0a	; 10
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	08 95       	ret

00001088 <UnPackZonesSetts>:
		PhoneNumber[CellNumber-cSettings].Privilege = Priv;
	}
}
//------------------------------------------------------------------------------------

void UnPackZonesSetts(char *StrSettings) {
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	2a 97       	sbiw	r28, 0x0a	; 10
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
	char tmpStr[10];
	unsigned char tmpVal = 0;
	int NumLen = strlen(StrSettings);
    10a8:	fc 01       	movw	r30, r24
    10aa:	01 90       	ld	r0, Z+
    10ac:	00 20       	and	r0, r0
    10ae:	e9 f7       	brne	.-6      	; 0x10aa <UnPackZonesSetts+0x22>
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	e8 1b       	sub	r30, r24
    10b4:	f9 0b       	sbc	r31, r25
	if (NumLen < 12) {
    10b6:	3c 97       	sbiw	r30, 0x0c	; 12
    10b8:	ec f0       	brlt	.+58     	; 0x10f4 <UnPackZonesSetts+0x6c>
		return;
    10ba:	7c 01       	movw	r14, r24
    10bc:	04 e0       	ldi	r16, 0x04	; 4
    10be:	1b e0       	ldi	r17, 0x0B	; 11
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		strncpy(tmpStr, &(StrSettings[(CellNumber-cNumber01)*2]), 2);
    10c0:	6e 01       	movw	r12, r28
    10c2:	08 94       	sec
    10c4:	c1 1c       	adc	r12, r1
    10c6:	d1 1c       	adc	r13, r1
    10c8:	c6 01       	movw	r24, r12
    10ca:	b7 01       	movw	r22, r14
    10cc:	42 e0       	ldi	r20, 0x02	; 2
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
		tmpStr[2] = 0;
    10d4:	1b 82       	std	Y+3, r1	; 0x03
		tmpVal = atoi(tmpStr);
    10d6:	c6 01       	movw	r24, r12
    10d8:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <atoi>
		PhoneNumber[CellNumber-cSettings].Zones = tmpVal;
    10dc:	f8 01       	movw	r30, r16
    10de:	80 83       	st	Z, r24
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	e8 0e       	add	r14, r24
    10e6:	f9 1e       	adc	r15, r25
    10e8:	0a 5d       	subi	r16, 0xDA	; 218
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255
	int NumLen = strlen(StrSettings);
	if (NumLen < 12) {
		return;
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
    10ec:	9b e0       	ldi	r25, 0x0B	; 11
    10ee:	08 3e       	cpi	r16, 0xE8	; 232
    10f0:	19 07       	cpc	r17, r25
    10f2:	51 f7       	brne	.-44     	; 0x10c8 <UnPackZonesSetts+0x40>
		strncpy(tmpStr, &(StrSettings[(CellNumber-cNumber01)*2]), 2);
		tmpStr[2] = 0;
		tmpVal = atoi(tmpStr);
		PhoneNumber[CellNumber-cSettings].Zones = tmpVal;
	}
}
    10f4:	2a 96       	adiw	r28, 0x0a	; 10
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	08 95       	ret

00001112 <UnPackNumSetts>:
	tmpVal = atoi(tmpStr);
	Settings.DInInversion = (tmpVal<<4);
}
//------------------------------------------------------------------------------------

void UnPackNumSetts(char *StrSettings) {
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	2a 97       	sbiw	r28, 0x0a	; 10
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
	char tmpStr[10];
	unsigned char tmpVal = 0;
	int NumLen = strlen(StrSettings);
    1132:	fc 01       	movw	r30, r24
    1134:	01 90       	ld	r0, Z+
    1136:	00 20       	and	r0, r0
    1138:	e9 f7       	brne	.-6      	; 0x1134 <UnPackNumSetts+0x22>
    113a:	31 97       	sbiw	r30, 0x01	; 1
    113c:	e8 1b       	sub	r30, r24
    113e:	f9 0b       	sbc	r31, r25
	if (NumLen < 6) {
    1140:	36 97       	sbiw	r30, 0x06	; 6
    1142:	2c f1       	brlt	.+74     	; 0x118e <UnPackNumSetts+0x7c>
		return;
    1144:	7c 01       	movw	r14, r24
    1146:	03 e0       	ldi	r16, 0x03	; 3
    1148:	1b e0       	ldi	r17, 0x0B	; 11
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		//strncpy(tmpStr, &(StrSettings[NumLen-(CellNumber-cNumber01)-1]), 1);
		strncpy(tmpStr, &(StrSettings[CellNumber-cNumber01]), 1);
    114a:	6e 01       	movw	r12, r28
    114c:	08 94       	sec
    114e:	c1 1c       	adc	r12, r1
    1150:	d1 1c       	adc	r13, r1
    1152:	c6 01       	movw	r24, r12
    1154:	b7 01       	movw	r22, r14
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
		tmpStr[1] = 0;
    115e:	1a 82       	std	Y+2, r1	; 0x02
		tmpVal = atoi(tmpStr);
    1160:	c6 01       	movw	r24, r12
    1162:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <atoi>
		char Priv = cPrivilegeNone;
		if (tmpVal == 1) Priv = cPrivilegeFull;
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	39 f0       	breq	.+14     	; 0x1178 <UnPackNumSetts+0x66>
		else if (tmpVal == 2) Priv = cPrivilegeAllSMS;
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	29 f0       	breq	.+10     	; 0x1178 <UnPackNumSetts+0x66>
		else if (tmpVal == 3) Priv = cPrivilegeAlarmSMS;
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	11 f4       	brne	.+4      	; 0x1176 <UnPackNumSetts+0x64>
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <UnPackNumSetts+0x66>
    1176:	80 e0       	ldi	r24, 0x00	; 0
		PhoneNumber[CellNumber-cSettings].Privilege = Priv;
    1178:	f8 01       	movw	r30, r16
    117a:	80 83       	st	Z, r24
    117c:	08 94       	sec
    117e:	e1 1c       	adc	r14, r1
    1180:	f1 1c       	adc	r15, r1
    1182:	0a 5d       	subi	r16, 0xDA	; 218
    1184:	1f 4f       	sbci	r17, 0xFF	; 255
	int NumLen = strlen(StrSettings);
	if (NumLen < 6) {
		return;
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
    1186:	fb e0       	ldi	r31, 0x0B	; 11
    1188:	07 3e       	cpi	r16, 0xE7	; 231
    118a:	1f 07       	cpc	r17, r31
    118c:	11 f7       	brne	.-60     	; 0x1152 <UnPackNumSetts+0x40>
		if (tmpVal == 1) Priv = cPrivilegeFull;
		else if (tmpVal == 2) Priv = cPrivilegeAllSMS;
		else if (tmpVal == 3) Priv = cPrivilegeAlarmSMS;
		PhoneNumber[CellNumber-cSettings].Privilege = Priv;
	}
}
    118e:	2a 96       	adiw	r28, 0x0a	; 10
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	08 95       	ret

000011ac <UnPackSettings>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

void UnPackSettings(char *StrSettings) {
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	2a 97       	sbiw	r28, 0x0a	; 10
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	7c 01       	movw	r14, r24
	char tmpStr[10];
	unsigned char tmpVal = 0;
	int NumLen = strlen(StrSettings);
    11ca:	fc 01       	movw	r30, r24
    11cc:	01 90       	ld	r0, Z+
    11ce:	00 20       	and	r0, r0
    11d0:	e9 f7       	brne	.-6      	; 0x11cc <UnPackSettings+0x20>
    11d2:	31 97       	sbiw	r30, 0x01	; 1
    11d4:	e8 1b       	sub	r30, r24
    11d6:	f9 0b       	sbc	r31, r25
	if (NumLen < 5) {
    11d8:	35 97       	sbiw	r30, 0x05	; 5
    11da:	34 f4       	brge	.+12     	; 0x11e8 <UnPackSettings+0x3c>
		Settings.DInInversion = 0;
    11dc:	10 92 c8 08 	sts	0x08C8, r1
		Settings.AlarmTime_s = 60;
    11e0:	8c e3       	ldi	r24, 0x3C	; 60
    11e2:	80 93 c9 08 	sts	0x08C9, r24
    11e6:	29 c0       	rjmp	.+82     	; 0x123a <UnPackSettings+0x8e>
		return;
	}
	
	// Длина гудка сирены в секундах (3 позиции)
	strncpy(tmpStr, &(StrSettings[0]), 3);
    11e8:	8e 01       	movw	r16, r28
    11ea:	0f 5f       	subi	r16, 0xFF	; 255
    11ec:	1f 4f       	sbci	r17, 0xFF	; 255
    11ee:	c8 01       	movw	r24, r16
    11f0:	b7 01       	movw	r22, r14
    11f2:	43 e0       	ldi	r20, 0x03	; 3
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
	tmpStr[3] = 0;
    11fa:	1c 82       	std	Y+4, r1	; 0x04
	tmpVal = atoi(tmpStr);
    11fc:	c8 01       	movw	r24, r16
    11fe:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <atoi>
	Settings.AlarmTime_s = tmpVal;
    1202:	80 93 c9 08 	sts	0x08C9, r24
	if (Settings.AlarmTime_s < 30) Settings.AlarmTime_s = 30;
    1206:	8e 31       	cpi	r24, 0x1E	; 30
    1208:	18 f4       	brcc	.+6      	; 0x1210 <UnPackSettings+0x64>
    120a:	8e e1       	ldi	r24, 0x1E	; 30
    120c:	80 93 c9 08 	sts	0x08C9, r24

	// инверсия (2 позиции)
	strncpy(tmpStr, &(StrSettings[3]), 2);
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	e8 0e       	add	r14, r24
    1216:	f9 1e       	adc	r15, r25
    1218:	8e 01       	movw	r16, r28
    121a:	0f 5f       	subi	r16, 0xFF	; 255
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	c8 01       	movw	r24, r16
    1220:	b7 01       	movw	r22, r14
    1222:	42 e0       	ldi	r20, 0x02	; 2
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
	tmpStr[2] = 0;
    122a:	1b 82       	std	Y+3, r1	; 0x03
	tmpVal = atoi(tmpStr);
    122c:	c8 01       	movw	r24, r16
    122e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <atoi>
	Settings.DInInversion = (tmpVal<<4);
    1232:	82 95       	swap	r24
    1234:	80 7f       	andi	r24, 0xF0	; 240
    1236:	80 93 c8 08 	sts	0x08C8, r24
}
    123a:	2a 96       	adiw	r28, 0x0a	; 10
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	08 95       	ret

00001254 <ReadSettings>:
// ErrorReadSettings = 6; // нет 21-й записи в книге => надо произвести запись начальных установок
// ErrorReadSettings = 7; // нет 22-й записи в книге => надо произвести запись начальных установок
TTime TPrevReadSettings;
int swReadSettings = cswIdle;
char ErrorReadSettings = 0; 
char ReadSettings(void) {
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	c6 54       	subi	r28, 0x46	; 70
    1266:	d0 40       	sbci	r29, 0x00	; 0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
	char CellNumberStr[MAX_NUMBER_LENGTH];
	char tmpCh[MAX_NUMBER_LENGTH];
	char RetWaitAnswer;
	char RetVal = 1; // еще работает - нет определенного результата
	switch(swReadSettings) {
    1272:	80 91 b9 07 	lds	r24, 0x07B9
    1276:	90 91 ba 07 	lds	r25, 0x07BA
    127a:	8d 31       	cpi	r24, 0x1D	; 29
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <ReadSettings+0x2e>
    1280:	4a c0       	rjmp	.+148    	; 0x1316 <ReadSettings+0xc2>
    1282:	8e 31       	cpi	r24, 0x1E	; 30
    1284:	91 05       	cpc	r25, r1
    1286:	4c f4       	brge	.+18     	; 0x129a <ReadSettings+0x46>
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	91 05       	cpc	r25, r1
    128c:	e9 f0       	breq	.+58     	; 0x12c8 <ReadSettings+0x74>
    128e:	8c 31       	cpi	r24, 0x1C	; 28
    1290:	91 05       	cpc	r25, r1
    1292:	59 f1       	breq	.+86     	; 0x12ea <ReadSettings+0x96>
    1294:	89 2b       	or	r24, r25
    1296:	a9 f0       	breq	.+42     	; 0x12c2 <ReadSettings+0x6e>
    1298:	2b c1       	rjmp	.+598    	; 0x14f0 <ReadSettings+0x29c>
    129a:	8a 32       	cpi	r24, 0x2A	; 42
    129c:	91 05       	cpc	r25, r1
    129e:	79 f0       	breq	.+30     	; 0x12be <ReadSettings+0x6a>
    12a0:	8b 32       	cpi	r24, 0x2B	; 43
    12a2:	91 05       	cpc	r25, r1
    12a4:	24 f4       	brge	.+8      	; 0x12ae <ReadSettings+0x5a>
    12a6:	4f 97       	sbiw	r24, 0x1f	; 31
    12a8:	09 f0       	breq	.+2      	; 0x12ac <ReadSettings+0x58>
    12aa:	22 c1       	rjmp	.+580    	; 0x14f0 <ReadSettings+0x29c>
    12ac:	60 c0       	rjmp	.+192    	; 0x136e <ReadSettings+0x11a>
    12ae:	8b 32       	cpi	r24, 0x2B	; 43
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <ReadSettings+0x62>
    12b4:	14 c1       	rjmp	.+552    	; 0x14de <ReadSettings+0x28a>
    12b6:	8c 97       	sbiw	r24, 0x2c	; 44
    12b8:	09 f0       	breq	.+2      	; 0x12bc <ReadSettings+0x68>
    12ba:	1a c1       	rjmp	.+564    	; 0x14f0 <ReadSettings+0x29c>
    12bc:	13 c1       	rjmp	.+550    	; 0x14e4 <ReadSettings+0x290>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	18 c1       	rjmp	.+560    	; 0x14f2 <ReadSettings+0x29e>
		case cswIdle:
			ErrorReadSettings = 0;
    12c2:	10 92 bb 07 	sts	0x07BB, r1
    12c6:	14 c1       	rjmp	.+552    	; 0x14f0 <ReadSettings+0x29c>
		break;
	
		case cswStart: // выбор телефонной книги на симке
			DoCommand(&TPrevReadSettings, "AT+CPBS=\"SM\"\r\n", &swReadSettings, csw010);
    12c8:	8d e8       	ldi	r24, 0x8D	; 141
    12ca:	98 e0       	ldi	r25, 0x08	; 8
    12cc:	6e eb       	ldi	r22, 0xBE	; 190
    12ce:	71 e0       	ldi	r23, 0x01	; 1
    12d0:	49 eb       	ldi	r20, 0xB9	; 185
    12d2:	57 e0       	ldi	r21, 0x07	; 7
    12d4:	2c e1       	ldi	r18, 0x1C	; 28
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
			CellNumber = cSettings;
    12dc:	84 e1       	ldi	r24, 0x14	; 20
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	90 93 f7 0c 	sts	0x0CF7, r25
    12e4:	80 93 f6 0c 	sts	0x0CF6, r24
    12e8:	03 c1       	rjmp	.+518    	; 0x14f0 <ReadSettings+0x29c>
		break;
		case csw010: // ждем ответа от модема
			if (WaitAnswer(TPrevReadSettings, "OK", 2000, &swReadSettings, csw020, cswNOK) == 4) {
    12ea:	80 91 8d 08 	lds	r24, 0x088D
    12ee:	90 91 8e 08 	lds	r25, 0x088E
    12f2:	6f e4       	ldi	r22, 0x4F	; 79
    12f4:	71 e0       	ldi	r23, 0x01	; 1
    12f6:	40 ed       	ldi	r20, 0xD0	; 208
    12f8:	57 e0       	ldi	r21, 0x07	; 7
    12fa:	29 eb       	ldi	r18, 0xB9	; 185
    12fc:	37 e0       	ldi	r19, 0x07	; 7
    12fe:	0d e1       	ldi	r16, 0x1D	; 29
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	fb e2       	ldi	r31, 0x2B	; 43
    1304:	ef 2e       	mov	r14, r31
    1306:	f1 2c       	mov	r15, r1
    1308:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	09 f0       	breq	.+2      	; 0x1312 <ReadSettings+0xbe>
    1310:	ef c0       	rjmp	.+478    	; 0x14f0 <ReadSettings+0x29c>
				ErrorReadSettings = 3; // таймаут выбора телефонной книги сим карты
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	3f c0       	rjmp	.+126    	; 0x1394 <ReadSettings+0x140>
			}
		break;
		
		//----------------- чтение очередного номера из записной книжки --------------------------
		case csw020: 
			itoa(CellNumber, CellNumberStr, 10);
    1316:	80 91 f6 0c 	lds	r24, 0x0CF6
    131a:	90 91 f7 0c 	lds	r25, 0x0CF7
    131e:	7e 01       	movw	r14, r28
    1320:	08 94       	sec
    1322:	e1 1c       	adc	r14, r1
    1324:	f1 1c       	adc	r15, r1
    1326:	b7 01       	movw	r22, r14
    1328:	4a e0       	ldi	r20, 0x0A	; 10
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
			strncpy(tmpCh, "AT+CPBR=", MAX_NUMBER_LENGTH-1);
    1330:	8e 01       	movw	r16, r28
    1332:	0c 5d       	subi	r16, 0xDC	; 220
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	c8 01       	movw	r24, r16
    1338:	6d ec       	ldi	r22, 0xCD	; 205
    133a:	71 e0       	ldi	r23, 0x01	; 1
    133c:	42 e2       	ldi	r20, 0x22	; 34
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
			strncat(tmpCh, CellNumberStr, MAX_NUMBER_LENGTH-1);
    1344:	c8 01       	movw	r24, r16
    1346:	b7 01       	movw	r22, r14
    1348:	42 e2       	ldi	r20, 0x22	; 34
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
			strncat(tmpCh, "\r\n", MAX_NUMBER_LENGTH-1);
    1350:	c8 01       	movw	r24, r16
    1352:	66 ed       	ldi	r22, 0xD6	; 214
    1354:	71 e0       	ldi	r23, 0x01	; 1
    1356:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			DoCommand(&TPrevReadSettings, tmpCh, &swReadSettings, csw030);
    135a:	8d e8       	ldi	r24, 0x8D	; 141
    135c:	98 e0       	ldi	r25, 0x08	; 8
    135e:	b8 01       	movw	r22, r16
    1360:	49 eb       	ldi	r20, 0xB9	; 185
    1362:	57 e0       	ldi	r21, 0x07	; 7
    1364:	2f e1       	ldi	r18, 0x1F	; 31
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
    136c:	c1 c0       	rjmp	.+386    	; 0x14f0 <ReadSettings+0x29c>
		break;
		case csw030: // ждем ответа от модема
			RetWaitAnswer = WaitAnswer(TPrevReadSettings, "+CPBR: ", 2000, &swReadSettings, csw020, cswNOK);
    136e:	80 91 8d 08 	lds	r24, 0x088D
    1372:	90 91 8e 08 	lds	r25, 0x088E
    1376:	69 ed       	ldi	r22, 0xD9	; 217
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	40 ed       	ldi	r20, 0xD0	; 208
    137c:	57 e0       	ldi	r21, 0x07	; 7
    137e:	29 eb       	ldi	r18, 0xB9	; 185
    1380:	37 e0       	ldi	r19, 0x07	; 7
    1382:	0d e1       	ldi	r16, 0x1D	; 29
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	eb e2       	ldi	r30, 0x2B	; 43
    1388:	ee 2e       	mov	r14, r30
    138a:	f1 2c       	mov	r15, r1
    138c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
			if (RetWaitAnswer == 4) {
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	19 f4       	brne	.+6      	; 0x139a <ReadSettings+0x146>
				ErrorReadSettings = 4; // таймаут выбора телефонной книги сим карты
    1394:	80 93 bb 07 	sts	0x07BB, r24
    1398:	ac c0       	rjmp	.+344    	; 0x14f2 <ReadSettings+0x29e>
				RetVal = ErrorReadSettings;
			}
			else
			if (RetWaitAnswer == 1) {
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	09 f0       	breq	.+2      	; 0x13a0 <ReadSettings+0x14c>
    139e:	a8 c0       	rjmp	.+336    	; 0x14f0 <ReadSettings+0x29c>
				char *tmpBegStr = &(FromModemBuf[11]);
				char *tmpEndStr = strstr(tmpBegStr, "\"");
    13a0:	86 e6       	ldi	r24, 0x66	; 102
    13a2:	9c e0       	ldi	r25, 0x0C	; 12
    13a4:	62 e2       	ldi	r22, 0x22	; 34
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <strchr>
    13ac:	fc 01       	movw	r30, r24
				*tmpEndStr = 0;
    13ae:	10 82       	st	Z, r1
				strncpy(PhoneNumber[CellNumber-cSettings].Number, tmpBegStr, MAX_NUMBER_LENGTH-1);
    13b0:	80 91 f6 0c 	lds	r24, 0x0CF6
    13b4:	90 91 f7 0c 	lds	r25, 0x0CF7
    13b8:	44 97       	sbiw	r24, 0x14	; 20
    13ba:	26 e2       	ldi	r18, 0x26	; 38
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	ac 01       	movw	r20, r24
    13c0:	42 9f       	mul	r20, r18
    13c2:	c0 01       	movw	r24, r0
    13c4:	43 9f       	mul	r20, r19
    13c6:	90 0d       	add	r25, r0
    13c8:	52 9f       	mul	r21, r18
    13ca:	90 0d       	add	r25, r0
    13cc:	11 24       	eor	r1, r1
    13ce:	85 50       	subi	r24, 0x05	; 5
    13d0:	96 4f       	sbci	r25, 0xF6	; 246
    13d2:	66 e6       	ldi	r22, 0x66	; 102
    13d4:	7c e0       	ldi	r23, 0x0C	; 12
    13d6:	42 e2       	ldi	r20, 0x22	; 34
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
				// ----- действие в зависимости от ячейки
				if (CellNumber == cSettings) UnPackSettings(PhoneNumber[CellNumber-cSettings].Number);
    13de:	80 91 f6 0c 	lds	r24, 0x0CF6
    13e2:	90 91 f7 0c 	lds	r25, 0x0CF7
    13e6:	44 97       	sbiw	r24, 0x14	; 20
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <ReadSettings+0x19e>
    13ea:	8b ef       	ldi	r24, 0xFB	; 251
    13ec:	99 e0       	ldi	r25, 0x09	; 9
    13ee:	0e 94 d6 08 	call	0x11ac	; 0x11ac <UnPackSettings>
				if (CellNumber == cNumSetts) UnPackNumSetts(PhoneNumber[CellNumber-cSettings].Number);
    13f2:	80 91 f6 0c 	lds	r24, 0x0CF6
    13f6:	90 91 f7 0c 	lds	r25, 0x0CF7
    13fa:	45 97       	sbiw	r24, 0x15	; 21
    13fc:	21 f4       	brne	.+8      	; 0x1406 <ReadSettings+0x1b2>
    13fe:	81 e2       	ldi	r24, 0x21	; 33
    1400:	9a e0       	ldi	r25, 0x0A	; 10
    1402:	0e 94 89 08 	call	0x1112	; 0x1112 <UnPackNumSetts>
				if (CellNumber == cZonesSetts) UnPackZonesSetts(PhoneNumber[CellNumber-cSettings].Number);
    1406:	80 91 f6 0c 	lds	r24, 0x0CF6
    140a:	90 91 f7 0c 	lds	r25, 0x0CF7
    140e:	46 97       	sbiw	r24, 0x16	; 22
    1410:	21 f4       	brne	.+8      	; 0x141a <ReadSettings+0x1c6>
    1412:	87 e4       	ldi	r24, 0x47	; 71
    1414:	9a e0       	ldi	r25, 0x0A	; 10
    1416:	0e 94 44 08 	call	0x1088	; 0x1088 <UnPackZonesSetts>
				if (CellNumber == cProverkaScheta) {
    141a:	00 91 f6 0c 	lds	r16, 0x0CF6
    141e:	10 91 f7 0c 	lds	r17, 0x0CF7
    1422:	07 31       	cpi	r16, 0x17	; 23
    1424:	11 05       	cpc	r17, r1
    1426:	81 f4       	brne	.+32     	; 0x1448 <ReadSettings+0x1f4>
					if (strncmp(PhoneNumber[CellNumber-cSettings].Number, "000", MAX_NUMBER_LENGTH-1) == 0) PhoneNumber[CellNumber-cSettings].IsActive = 0;
    1428:	8d e6       	ldi	r24, 0x6D	; 109
    142a:	9a e0       	ldi	r25, 0x0A	; 10
    142c:	61 ee       	ldi	r22, 0xE1	; 225
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	42 e2       	ldi	r20, 0x22	; 34
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <strncmp>
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	19 f4       	brne	.+6      	; 0x1442 <ReadSettings+0x1ee>
    143c:	10 92 90 0a 	sts	0x0A90, r1
    1440:	0c c0       	rjmp	.+24     	; 0x145a <ReadSettings+0x206>
					else PhoneNumber[CellNumber-cSettings].IsActive = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 93 90 0a 	sts	0x0A90, r24
				}
				if (CellNumber == cTerm01) UnPackTermSetts(PhoneNumber[CellNumber-cSettings].Number, 0);
    1448:	08 31       	cpi	r16, 0x18	; 24
    144a:	11 05       	cpc	r17, r1
    144c:	31 f4       	brne	.+12     	; 0x145a <ReadSettings+0x206>
    144e:	83 e9       	ldi	r24, 0x93	; 147
    1450:	9a e0       	ldi	r25, 0x0A	; 10
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	0e 94 be 07 	call	0xf7c	; 0xf7c <UnPackTermSetts>
				if (CellNumber == cTerm02) UnPackTermSetts(PhoneNumber[CellNumber-cSettings].Number, 1);
    145a:	80 91 f6 0c 	lds	r24, 0x0CF6
    145e:	90 91 f7 0c 	lds	r25, 0x0CF7
    1462:	49 97       	sbiw	r24, 0x19	; 25
    1464:	31 f4       	brne	.+12     	; 0x1472 <ReadSettings+0x21e>
    1466:	89 eb       	ldi	r24, 0xB9	; 185
    1468:	9a e0       	ldi	r25, 0x0A	; 10
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	0e 94 be 07 	call	0xf7c	; 0xf7c <UnPackTermSetts>
				if (CellNumber >= cNumber01) {
    1472:	00 91 f6 0c 	lds	r16, 0x0CF6
    1476:	10 91 f7 0c 	lds	r17, 0x0CF7
    147a:	0a 31       	cpi	r16, 0x1A	; 26
    147c:	11 05       	cpc	r17, r1
    147e:	04 f1       	brlt	.+64     	; 0x14c0 <ReadSettings+0x26c>
					if (strncmp(PhoneNumber[CellNumber-cSettings].Number, "000", MAX_NUMBER_LENGTH-1) == 0) PhoneNumber[CellNumber-cSettings].IsActive = 0;
    1480:	04 51       	subi	r16, 0x14	; 20
    1482:	10 40       	sbci	r17, 0x00	; 0
    1484:	86 e2       	ldi	r24, 0x26	; 38
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	08 9f       	mul	r16, r24
    148a:	70 01       	movw	r14, r0
    148c:	09 9f       	mul	r16, r25
    148e:	f0 0c       	add	r15, r0
    1490:	18 9f       	mul	r17, r24
    1492:	f0 0c       	add	r15, r0
    1494:	11 24       	eor	r1, r1
    1496:	0c 5e       	subi	r16, 0xEC	; 236
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	8b ef       	ldi	r24, 0xFB	; 251
    149c:	99 e0       	ldi	r25, 0x09	; 9
    149e:	e8 0e       	add	r14, r24
    14a0:	f9 1e       	adc	r15, r25
    14a2:	c7 01       	movw	r24, r14
    14a4:	61 ee       	ldi	r22, 0xE1	; 225
    14a6:	71 e0       	ldi	r23, 0x01	; 1
    14a8:	42 e2       	ldi	r20, 0x22	; 34
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <strncmp>
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	19 f4       	brne	.+6      	; 0x14ba <ReadSettings+0x266>
    14b4:	f7 01       	movw	r30, r14
    14b6:	13 a2       	std	Z+35, r1	; 0x23
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <ReadSettings+0x26c>
					else PhoneNumber[CellNumber-cSettings].IsActive = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	f7 01       	movw	r30, r14
    14be:	83 a3       	std	Z+35, r24	; 0x23
				}
				// ----- END действие в зависимости от ячейки
				
				CellNumber++;
    14c0:	c8 01       	movw	r24, r16
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	90 93 f7 0c 	sts	0x0CF7, r25
    14c8:	80 93 f6 0c 	sts	0x0CF6, r24
				if (CellNumber >= cLast) { // дочитали номера до конца
    14cc:	80 97       	sbiw	r24, 0x20	; 32
    14ce:	84 f0       	brlt	.+32     	; 0x14f0 <ReadSettings+0x29c>
					swReadSettings = cswOK;
    14d0:	8a e2       	ldi	r24, 0x2A	; 42
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 ba 07 	sts	0x07BA, r25
    14d8:	80 93 b9 07 	sts	0x07B9, r24
    14dc:	09 c0       	rjmp	.+18     	; 0x14f0 <ReadSettings+0x29c>
		
		case cswOK:
			RetVal = 0; // доработал - все в порядке
		break;
		case cswNOK:
			RetVal = ErrorReadSettings; // что-то не так, код ошибки в ...
    14de:	80 91 bb 07 	lds	r24, 0x07BB
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <ReadSettings+0x29e>
		break;
		case cswEnd:
			ErrorReadSettings = 0;
    14e4:	10 92 bb 07 	sts	0x07BB, r1
			swReadSettings = cswIdle;
    14e8:	10 92 ba 07 	sts	0x07BA, r1
    14ec:	10 92 b9 07 	sts	0x07B9, r1
    14f0:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return RetVal;
}
    14f2:	ca 5b       	subi	r28, 0xBA	; 186
    14f4:	df 4f       	sbci	r29, 0xFF	; 255
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	08 95       	ret

0000150e <WriteSettings>:
}
//------------------------------------------------------------------------------------

TTime TPrevWriteSettings;
int swWriteSettings = cswIdle;
char WriteSettings(void) {
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	c9 5b       	subi	r28, 0xB9	; 185
    1520:	d0 40       	sbci	r29, 0x00	; 0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
	char CellNumberStr[MAX_NUMBER_LENGTH];
	char tmpCh[MAX_BUF];
	char RetWaitAnswer;
	char RetVal = 1; // еще работает - нет определенного результата
	switch(swWriteSettings) {
    152c:	80 91 b7 07 	lds	r24, 0x07B7
    1530:	90 91 b8 07 	lds	r25, 0x07B8
    1534:	8f 31       	cpi	r24, 0x1F	; 31
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <WriteSettings+0x2e>
    153a:	a8 c0       	rjmp	.+336    	; 0x168c <WriteSettings+0x17e>
    153c:	80 32       	cpi	r24, 0x20	; 32
    153e:	91 05       	cpc	r25, r1
    1540:	54 f4       	brge	.+20     	; 0x1556 <WriteSettings+0x48>
    1542:	8c 31       	cpi	r24, 0x1C	; 28
    1544:	91 05       	cpc	r25, r1
    1546:	29 f1       	breq	.+74     	; 0x1592 <WriteSettings+0x84>
    1548:	8d 31       	cpi	r24, 0x1D	; 29
    154a:	91 05       	cpc	r25, r1
    154c:	b9 f1       	breq	.+110    	; 0x15bc <WriteSettings+0xae>
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	09 f0       	breq	.+2      	; 0x1554 <WriteSettings+0x46>
    1552:	c7 c0       	rjmp	.+398    	; 0x16e2 <WriteSettings+0x1d4>
    1554:	0d c0       	rjmp	.+26     	; 0x1570 <WriteSettings+0x62>
    1556:	8b 32       	cpi	r24, 0x2B	; 43
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <WriteSettings+0x50>
    155c:	c4 c0       	rjmp	.+392    	; 0x16e6 <WriteSettings+0x1d8>
    155e:	8c 32       	cpi	r24, 0x2C	; 44
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <WriteSettings+0x58>
    1564:	ba c0       	rjmp	.+372    	; 0x16da <WriteSettings+0x1cc>
    1566:	8a 97       	sbiw	r24, 0x2a	; 42
    1568:	09 f0       	breq	.+2      	; 0x156c <WriteSettings+0x5e>
    156a:	bb c0       	rjmp	.+374    	; 0x16e2 <WriteSettings+0x1d4>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	bc c0       	rjmp	.+376    	; 0x16e8 <WriteSettings+0x1da>
		case cswIdle:
		break;

		case cswStart: // выбор телефонной книги на симке
			DoCommand(&TPrevWriteSettings, "AT+CPBS=\"SM\"\r\n", &swWriteSettings, csw010);
    1570:	8f e8       	ldi	r24, 0x8F	; 143
    1572:	98 e0       	ldi	r25, 0x08	; 8
    1574:	6e eb       	ldi	r22, 0xBE	; 190
    1576:	71 e0       	ldi	r23, 0x01	; 1
    1578:	47 eb       	ldi	r20, 0xB7	; 183
    157a:	57 e0       	ldi	r21, 0x07	; 7
    157c:	2c e1       	ldi	r18, 0x1C	; 28
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
			CellNumber = cSettings;
    1584:	84 e1       	ldi	r24, 0x14	; 20
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	90 93 f7 0c 	sts	0x0CF7, r25
    158c:	80 93 f6 0c 	sts	0x0CF6, r24
    1590:	a8 c0       	rjmp	.+336    	; 0x16e2 <WriteSettings+0x1d4>
		break;
		case csw010: // ждем ответа от модема
			if (WaitAnswer(TPrevWriteSettings, "OK", 2000, &swWriteSettings, csw020, cswNOK) == 4) RetVal = 4;
    1592:	80 91 8f 08 	lds	r24, 0x088F
    1596:	90 91 90 08 	lds	r25, 0x0890
    159a:	6f e4       	ldi	r22, 0x4F	; 79
    159c:	71 e0       	ldi	r23, 0x01	; 1
    159e:	40 ed       	ldi	r20, 0xD0	; 208
    15a0:	57 e0       	ldi	r21, 0x07	; 7
    15a2:	27 eb       	ldi	r18, 0xB7	; 183
    15a4:	37 e0       	ldi	r19, 0x07	; 7
    15a6:	0d e1       	ldi	r16, 0x1D	; 29
    15a8:	10 e0       	ldi	r17, 0x00	; 0
    15aa:	eb e2       	ldi	r30, 0x2B	; 43
    15ac:	ee 2e       	mov	r14, r30
    15ae:	f1 2c       	mov	r15, r1
    15b0:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	09 f0       	breq	.+2      	; 0x15ba <WriteSettings+0xac>
    15b8:	94 c0       	rjmp	.+296    	; 0x16e2 <WriteSettings+0x1d4>
    15ba:	95 c0       	rjmp	.+298    	; 0x16e6 <WriteSettings+0x1d8>
		break;
		
		case csw020: // пишем ячейку
			itoa(CellNumber, CellNumberStr, 10);
    15bc:	80 91 f6 0c 	lds	r24, 0x0CF6
    15c0:	90 91 f7 0c 	lds	r25, 0x0CF7
    15c4:	8e 01       	movw	r16, r28
    15c6:	0f 5f       	subi	r16, 0xFF	; 255
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	b8 01       	movw	r22, r16
    15cc:	4a e0       	ldi	r20, 0x0A	; 10
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
			strncpy(tmpCh, "AT+CPBW=", MAX_BUF-1);
    15d4:	b4 e2       	ldi	r27, 0x24	; 36
    15d6:	eb 2e       	mov	r14, r27
    15d8:	f1 2c       	mov	r15, r1
    15da:	ec 0e       	add	r14, r28
    15dc:	fd 1e       	adc	r15, r29
    15de:	c7 01       	movw	r24, r14
    15e0:	65 ee       	ldi	r22, 0xE5	; 229
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	45 e9       	ldi	r20, 0x95	; 149
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
			strncat(tmpCh, CellNumberStr, MAX_BUF-1);
    15ec:	c7 01       	movw	r24, r14
    15ee:	b8 01       	movw	r22, r16
    15f0:	45 e9       	ldi	r20, 0x95	; 149
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
			strncat(tmpCh, ",", MAX_BUF-1);
    15f8:	c7 01       	movw	r24, r14
    15fa:	6e ee       	ldi	r22, 0xEE	; 238
    15fc:	71 e0       	ldi	r23, 0x01	; 1
    15fe:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			strncat(tmpCh, Defaults[CellNumber-cSettings].Number, MAX_BUF-1);
    1602:	80 91 f6 0c 	lds	r24, 0x0CF6
    1606:	90 91 f7 0c 	lds	r25, 0x0CF7
    160a:	44 97       	sbiw	r24, 0x14	; 20
    160c:	06 e4       	ldi	r16, 0x46	; 70
    160e:	10 e0       	ldi	r17, 0x00	; 0
    1610:	80 9f       	mul	r24, r16
    1612:	b0 01       	movw	r22, r0
    1614:	81 9f       	mul	r24, r17
    1616:	70 0d       	add	r23, r0
    1618:	90 9f       	mul	r25, r16
    161a:	70 0d       	add	r23, r0
    161c:	11 24       	eor	r1, r1
    161e:	61 59       	subi	r22, 0x91	; 145
    1620:	7d 4f       	sbci	r23, 0xFD	; 253
    1622:	c7 01       	movw	r24, r14
    1624:	45 e9       	ldi	r20, 0x95	; 149
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
			strncat(tmpCh, ",,", MAX_BUF-1);
    162c:	c7 01       	movw	r24, r14
    162e:	60 ef       	ldi	r22, 0xF0	; 240
    1630:	71 e0       	ldi	r23, 0x01	; 1
    1632:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			strncat(tmpCh, Defaults[CellNumber-cSettings].Abonent, MAX_BUF-1);
    1636:	80 91 f6 0c 	lds	r24, 0x0CF6
    163a:	90 91 f7 0c 	lds	r25, 0x0CF7
    163e:	44 97       	sbiw	r24, 0x14	; 20
    1640:	80 9f       	mul	r24, r16
    1642:	b0 01       	movw	r22, r0
    1644:	81 9f       	mul	r24, r17
    1646:	70 0d       	add	r23, r0
    1648:	90 9f       	mul	r25, r16
    164a:	70 0d       	add	r23, r0
    164c:	11 24       	eor	r1, r1
    164e:	64 5b       	subi	r22, 0xB4	; 180
    1650:	7d 4f       	sbci	r23, 0xFD	; 253
    1652:	c7 01       	movw	r24, r14
    1654:	45 e9       	ldi	r20, 0x95	; 149
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
			strncat(tmpCh, "\r\n", MAX_BUF-1);
    165c:	c7 01       	movw	r24, r14
    165e:	66 ed       	ldi	r22, 0xD6	; 214
    1660:	71 e0       	ldi	r23, 0x01	; 1
    1662:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			if (IsDebug()) { //!#ifdef M_DEBUG
    1666:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
    166a:	88 23       	and	r24, r24
    166c:	19 f0       	breq	.+6      	; 0x1674 <WriteSettings+0x166>
				PutPC(tmpCh);
    166e:	c7 01       	movw	r24, r14
    1670:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
			} //!#endif
			DoCommand(&TPrevWriteSettings, tmpCh, &swWriteSettings, csw030);
    1674:	8f e8       	ldi	r24, 0x8F	; 143
    1676:	98 e0       	ldi	r25, 0x08	; 8
    1678:	be 01       	movw	r22, r28
    167a:	6c 5d       	subi	r22, 0xDC	; 220
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	47 eb       	ldi	r20, 0xB7	; 183
    1680:	57 e0       	ldi	r21, 0x07	; 7
    1682:	2f e1       	ldi	r18, 0x1F	; 31
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
    168a:	2b c0       	rjmp	.+86     	; 0x16e2 <WriteSettings+0x1d4>
		break;
		case csw030: // ждем ответа от модема
			RetWaitAnswer = WaitAnswer(TPrevWriteSettings, "OK", 3000, &swWriteSettings, csw020, cswNOK);
    168c:	80 91 8f 08 	lds	r24, 0x088F
    1690:	90 91 90 08 	lds	r25, 0x0890
    1694:	6f e4       	ldi	r22, 0x4F	; 79
    1696:	71 e0       	ldi	r23, 0x01	; 1
    1698:	48 eb       	ldi	r20, 0xB8	; 184
    169a:	5b e0       	ldi	r21, 0x0B	; 11
    169c:	27 eb       	ldi	r18, 0xB7	; 183
    169e:	37 e0       	ldi	r19, 0x07	; 7
    16a0:	0d e1       	ldi	r16, 0x1D	; 29
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	ab e2       	ldi	r26, 0x2B	; 43
    16a6:	ea 2e       	mov	r14, r26
    16a8:	f1 2c       	mov	r15, r1
    16aa:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
			if (RetWaitAnswer == 4) {
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	d1 f0       	breq	.+52     	; 0x16e6 <WriteSettings+0x1d8>
				RetVal = 4; 
				break;
			}
			else
			if (RetWaitAnswer == 1) {
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	b1 f4       	brne	.+44     	; 0x16e2 <WriteSettings+0x1d4>
				CellNumber++;
    16b6:	80 91 f6 0c 	lds	r24, 0x0CF6
    16ba:	90 91 f7 0c 	lds	r25, 0x0CF7
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	90 93 f7 0c 	sts	0x0CF7, r25
    16c4:	80 93 f6 0c 	sts	0x0CF6, r24
				if (CellNumber >= cLast) { // дописали номера до конца
    16c8:	80 97       	sbiw	r24, 0x20	; 32
    16ca:	5c f0       	brlt	.+22     	; 0x16e2 <WriteSettings+0x1d4>
					swWriteSettings = cswOK;
    16cc:	8a e2       	ldi	r24, 0x2A	; 42
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	90 93 b8 07 	sts	0x07B8, r25
    16d4:	80 93 b7 07 	sts	0x07B7, r24
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <WriteSettings+0x1d4>
		break;
		case cswNOK:
			RetVal = 4; // что-то не так, код ошибки в ...
		break;
		case cswEnd:
			swWriteSettings = cswIdle;
    16da:	10 92 b8 07 	sts	0x07B8, r1
    16de:	10 92 b7 07 	sts	0x07B7, r1
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <WriteSettings+0x1da>
    16e6:	84 e0       	ldi	r24, 0x04	; 4
		break;
	}
	return RetVal;
}
    16e8:	c7 54       	subi	r28, 0x47	; 71
    16ea:	df 4f       	sbci	r29, 0xFF	; 255
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	ef 90       	pop	r14
    1702:	08 95       	ret

00001704 <MainAlg>:
TTime TMainAlg;
int swMainAlg = cswIdle;
char BadCount = 0;
char flCallReady = 0;
int baudIndex = 0;
char MainAlg(void) {
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	c4 56       	subi	r28, 0x64	; 100
    171a:	d0 40       	sbci	r29, 0x00	; 0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
	long int currentBaudRate;
	//char commandBaudRate[100];
	char baudRateStr[100];
	
	// мы хотим Call Ready ловить в любом месте, а не только после инициализационных команд!
	if (!flCallReady) {
    1726:	80 91 d2 07 	lds	r24, 0x07D2
    172a:	88 23       	and	r24, r24
    172c:	79 f4       	brne	.+30     	; 0x174c <MainAlg+0x48>
		if (flIsReaded != 0) {
    172e:	80 91 64 09 	lds	r24, 0x0964
    1732:	88 23       	and	r24, r24
    1734:	59 f0       	breq	.+22     	; 0x174c <MainAlg+0x48>
			if (strstr(FromModemBuf, "Call Ready")) {
    1736:	8b e5       	ldi	r24, 0x5B	; 91
    1738:	9c e0       	ldi	r25, 0x0C	; 12
    173a:	63 ef       	ldi	r22, 0xF3	; 243
    173c:	71 e0       	ldi	r23, 0x01	; 1
    173e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <strstr>
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	19 f0       	breq	.+6      	; 0x174c <MainAlg+0x48>
				flCallReady = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 d2 07 	sts	0x07D2, r24
			}
		}
	}
	
	switch (swMainAlg) {
    174c:	e0 91 cf 07 	lds	r30, 0x07CF
    1750:	f0 91 d0 07 	lds	r31, 0x07D0
    1754:	31 97       	sbiw	r30, 0x01	; 1
    1756:	e0 32       	cpi	r30, 0x20	; 32
    1758:	f1 05       	cpc	r31, r1
    175a:	08 f0       	brcs	.+2      	; 0x175e <MainAlg+0x5a>
    175c:	e1 c1       	rjmp	.+962    	; 0x1b20 <MainAlg+0x41c>
    175e:	ea 5b       	subi	r30, 0xBA	; 186
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	ee 0f       	add	r30, r30
    1764:	ff 1f       	adc	r31, r31
    1766:	05 90       	lpm	r0, Z+
    1768:	f4 91       	lpm	r31, Z+
    176a:	e0 2d       	mov	r30, r0
    176c:	09 94       	ijmp
		case cswIdle:
		break;
		
		case cswStart:
			CurrentSet = 0;
    176e:	10 92 cb 08 	sts	0x08CB, r1
    1772:	10 92 ca 08 	sts	0x08CA, r1
			swMainAlg = cswStartModemConnectionSpeed;
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	6c c1       	rjmp	.+728    	; 0x1a54 <MainAlg+0x350>
			//swMainAlg = cswStartInitModem;
		break;
		
		case cswStartModemConnectionSpeed:
			if (baudIndex >= sizeOfBaudRates) {
    177c:	20 91 d3 07 	lds	r18, 0x07D3
    1780:	30 91 d4 07 	lds	r19, 0x07D4
    1784:	80 91 35 06 	lds	r24, 0x0635
    1788:	90 91 36 06 	lds	r25, 0x0636
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	24 f0       	brlt	.+8      	; 0x179a <MainAlg+0x96>
				baudIndex = 0;
    1792:	10 92 d4 07 	sts	0x07D4, r1
    1796:	10 92 d3 07 	sts	0x07D3, r1
			}
			
			currentBaudRate = baudRates[baudIndex];
    179a:	e0 91 d3 07 	lds	r30, 0x07D3
    179e:	f0 91 d4 07 	lds	r31, 0x07D4
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ef 5d       	subi	r30, 0xDF	; 223
    17ac:	f9 4f       	sbci	r31, 0xF9	; 249
    17ae:	c0 80       	ld	r12, Z
    17b0:	d1 80       	ldd	r13, Z+1	; 0x01
    17b2:	e2 80       	ldd	r14, Z+2	; 0x02
    17b4:	f3 80       	ldd	r15, Z+3	; 0x03
			USART0_Int_Init(BAUD(currentBaudRate));
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	78 e0       	ldi	r23, 0x08	; 8
    17ba:	87 e0       	ldi	r24, 0x07	; 7
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a7 01       	movw	r20, r14
    17c0:	96 01       	movw	r18, r12
    17c2:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__udivmodsi4>
    17c6:	da 01       	movw	r26, r20
    17c8:	c9 01       	movw	r24, r18
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <USART0_Int_Init>
			sprintf(baudRateStr, "%ld", currentBaudRate);
    17d0:	8d b7       	in	r24, 0x3d	; 61
    17d2:	9e b7       	in	r25, 0x3e	; 62
    17d4:	08 97       	sbiw	r24, 0x08	; 8
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	9e bf       	out	0x3e, r25	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	8d bf       	out	0x3d, r24	; 61
    17e0:	ed b7       	in	r30, 0x3d	; 61
    17e2:	fe b7       	in	r31, 0x3e	; 62
    17e4:	31 96       	adiw	r30, 0x01	; 1
    17e6:	8e 01       	movw	r16, r28
    17e8:	0f 5f       	subi	r16, 0xFF	; 255
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255
    17ec:	ad b7       	in	r26, 0x3d	; 61
    17ee:	be b7       	in	r27, 0x3e	; 62
    17f0:	12 96       	adiw	r26, 0x02	; 2
    17f2:	1c 93       	st	X, r17
    17f4:	0e 93       	st	-X, r16
    17f6:	11 97       	sbiw	r26, 0x01	; 1
    17f8:	8e ef       	ldi	r24, 0xFE	; 254
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	93 83       	std	Z+3, r25	; 0x03
    17fe:	82 83       	std	Z+2, r24	; 0x02
    1800:	c4 82       	std	Z+4, r12	; 0x04
    1802:	d5 82       	std	Z+5, r13	; 0x05
    1804:	e6 82       	std	Z+6, r14	; 0x06
    1806:	f7 82       	std	Z+7, r15	; 0x07
    1808:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <sprintf>
			strcat(baudRateStr, "\r\n");
    180c:	8d b7       	in	r24, 0x3d	; 61
    180e:	9e b7       	in	r25, 0x3e	; 62
    1810:	08 96       	adiw	r24, 0x08	; 8
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	9e bf       	out	0x3e, r25	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	8d bf       	out	0x3d, r24	; 61
    181c:	c8 01       	movw	r24, r16
    181e:	66 ed       	ldi	r22, 0xD6	; 214
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
			PutPC(baudRateStr);
    1826:	c8 01       	movw	r24, r16
    1828:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
			baudIndex++;
    182c:	80 91 d3 07 	lds	r24, 0x07D3
    1830:	90 91 d4 07 	lds	r25, 0x07D4
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	90 93 d4 07 	sts	0x07D4, r25
    183a:	80 93 d3 07 	sts	0x07D3, r24
			
			MarkDelay(&TMainAlg, &swMainAlg, cswModemConnectionSpeed01);
    183e:	8b e8       	ldi	r24, 0x8B	; 139
    1840:	98 e0       	ldi	r25, 0x08	; 8
    1842:	6f ec       	ldi	r22, 0xCF	; 207
    1844:	77 e0       	ldi	r23, 0x07	; 7
    1846:	43 e0       	ldi	r20, 0x03	; 3
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <MarkDelay>
    184e:	68 c1       	rjmp	.+720    	; 0x1b20 <MainAlg+0x41c>
		break;
		
		case cswModemConnectionSpeed01:
			WaitDelayAndGoTo(TMainAlg, 500, &swMainAlg, cswModemConnectionSpeed02);
    1850:	80 91 8b 08 	lds	r24, 0x088B
    1854:	90 91 8c 08 	lds	r25, 0x088C
    1858:	64 ef       	ldi	r22, 0xF4	; 244
    185a:	71 e0       	ldi	r23, 0x01	; 1
    185c:	4f ec       	ldi	r20, 0xCF	; 207
    185e:	57 e0       	ldi	r21, 0x07	; 7
    1860:	24 e0       	ldi	r18, 0x04	; 4
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <WaitDelayAndGoTo>
    1868:	5b c1       	rjmp	.+694    	; 0x1b20 <MainAlg+0x41c>
		break;
		
		case cswModemConnectionSpeed02:
			DoCommand(&TMainAlg, "AT\r\n", &swMainAlg, cswModemConnectionSpeed03);
    186a:	8b e8       	ldi	r24, 0x8B	; 139
    186c:	98 e0       	ldi	r25, 0x08	; 8
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	72 e0       	ldi	r23, 0x02	; 2
    1872:	4f ec       	ldi	r20, 0xCF	; 207
    1874:	57 e0       	ldi	r21, 0x07	; 7
    1876:	25 e0       	ldi	r18, 0x05	; 5
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	30 c0       	rjmp	.+96     	; 0x18dc <MainAlg+0x1d8>
		break;
		
		case cswModemConnectionSpeed03:
			WaitAnswer(TMainAlg, "OK", 1000, &swMainAlg, cswStartInitModem, cswStartModemConnectionSpeed);
    187c:	80 91 8b 08 	lds	r24, 0x088B
    1880:	90 91 8c 08 	lds	r25, 0x088C
    1884:	6f e4       	ldi	r22, 0x4F	; 79
    1886:	71 e0       	ldi	r23, 0x01	; 1
    1888:	48 ee       	ldi	r20, 0xE8	; 232
    188a:	53 e0       	ldi	r21, 0x03	; 3
    188c:	2f ec       	ldi	r18, 0xCF	; 207
    188e:	37 e0       	ldi	r19, 0x07	; 7
    1890:	06 e0       	ldi	r16, 0x06	; 6
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	a2 e0       	ldi	r26, 0x02	; 2
    1896:	ea 2e       	mov	r14, r26
    1898:	f1 2c       	mov	r15, r1
    189a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
    189e:	40 c1       	rjmp	.+640    	; 0x1b20 <MainAlg+0x41c>
		break;
		
		case cswStartInitModem:
			if (CurrentSet >= cFirstSettsCount) {
    18a0:	20 91 ca 08 	lds	r18, 0x08CA
    18a4:	30 91 cb 08 	lds	r19, 0x08CB
    18a8:	27 30       	cpi	r18, 0x07	; 7
    18aa:	31 05       	cpc	r19, r1
    18ac:	34 f0       	brlt	.+12     	; 0x18ba <MainAlg+0x1b6>
				SetIndBits(0); //OutInd();
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
				swMainAlg = cswWaitReady;
    18b4:	88 e0       	ldi	r24, 0x08	; 8
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	cd c0       	rjmp	.+410    	; 0x1a54 <MainAlg+0x350>
			}
			else {
				DoCommand(&TMainAlg, FirstSetts[CurrentSet].CMDName, &swMainAlg, cswInitModem);
    18ba:	84 e1       	ldi	r24, 0x14	; 20
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	28 9f       	mul	r18, r24
    18c0:	b0 01       	movw	r22, r0
    18c2:	29 9f       	mul	r18, r25
    18c4:	70 0d       	add	r23, r0
    18c6:	38 9f       	mul	r19, r24
    18c8:	70 0d       	add	r23, r0
    18ca:	11 24       	eor	r1, r1
    18cc:	6b 56       	subi	r22, 0x6B	; 107
    18ce:	7a 4f       	sbci	r23, 0xFA	; 250
    18d0:	8b e8       	ldi	r24, 0x8B	; 139
    18d2:	98 e0       	ldi	r25, 0x08	; 8
    18d4:	4f ec       	ldi	r20, 0xCF	; 207
    18d6:	57 e0       	ldi	r21, 0x07	; 7
    18d8:	27 e0       	ldi	r18, 0x07	; 7
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DoCommand>
    18e0:	1f c1       	rjmp	.+574    	; 0x1b20 <MainAlg+0x41c>
			}
		break;
		
		case cswInitModem:
			//if (WaitAnswer(TPrevWriteSettings, "OK", 2000, &swMainAlg, cswStartInitModem, cswStartInitModem)) CurrentSet++;
			if (WaitAnswer(TMainAlg, "OK", 2000, &swMainAlg, cswStartInitModem, cswStartInitModem)) 
    18e2:	80 91 8b 08 	lds	r24, 0x088B
    18e6:	90 91 8c 08 	lds	r25, 0x088C
    18ea:	6f e4       	ldi	r22, 0x4F	; 79
    18ec:	71 e0       	ldi	r23, 0x01	; 1
    18ee:	40 ed       	ldi	r20, 0xD0	; 208
    18f0:	57 e0       	ldi	r21, 0x07	; 7
    18f2:	2f ec       	ldi	r18, 0xCF	; 207
    18f4:	37 e0       	ldi	r19, 0x07	; 7
    18f6:	06 e0       	ldi	r16, 0x06	; 6
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	f6 e0       	ldi	r31, 0x06	; 6
    18fc:	ef 2e       	mov	r14, r31
    18fe:	f1 2c       	mov	r15, r1
    1900:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <WaitAnswer>
    1904:	88 23       	and	r24, r24
    1906:	09 f4       	brne	.+2      	; 0x190a <MainAlg+0x206>
    1908:	0b c1       	rjmp	.+534    	; 0x1b20 <MainAlg+0x41c>
				CurrentSet++;
    190a:	80 91 ca 08 	lds	r24, 0x08CA
    190e:	90 91 cb 08 	lds	r25, 0x08CB
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	90 93 cb 08 	sts	0x08CB, r25
    1918:	80 93 ca 08 	sts	0x08CA, r24
    191c:	01 c1       	rjmp	.+514    	; 0x1b20 <MainAlg+0x41c>
		break;
		
		//------------ ----------------------------------------------------------
		//------------ Ждем готовности модема -------------------------------
		case cswWaitReady:
			TMainAlg = GetTime();
    191e:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    1922:	90 93 8c 08 	sts	0x088C, r25
    1926:	80 93 8b 08 	sts	0x088B, r24
			swMainAlg = csw010;
    192a:	8c e1       	ldi	r24, 0x1C	; 28
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	90 93 d0 07 	sts	0x07D0, r25
    1932:	80 93 cf 07 	sts	0x07CF, r24
			swIndik = cswWaitReady;
    1936:	88 e0       	ldi	r24, 0x08	; 8
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	4e c0       	rjmp	.+156    	; 0x19d8 <MainAlg+0x2d4>
		break;
		case csw010:
			if ((GetTime() - TMainAlg) >= Ticks(60000)) {
    193c:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    1940:	20 91 8b 08 	lds	r18, 0x088B
    1944:	30 91 8c 08 	lds	r19, 0x088C
    1948:	8c 01       	movw	r16, r24
    194a:	02 1b       	sub	r16, r18
    194c:	13 0b       	sbc	r17, r19
    194e:	60 e6       	ldi	r22, 0x60	; 96
    1950:	7a ee       	ldi	r23, 0xEA	; 234
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
    195a:	08 17       	cp	r16, r24
    195c:	19 07       	cpc	r17, r25
    195e:	38 f0       	brcs	.+14     	; 0x196e <MainAlg+0x26a>
				swMainAlg = cswERRORWaitReady;
    1960:	89 e0       	ldi	r24, 0x09	; 9
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	90 93 d0 07 	sts	0x07D0, r25
    1968:	80 93 cf 07 	sts	0x07CF, r24
    196c:	35 c0       	rjmp	.+106    	; 0x19d8 <MainAlg+0x2d4>
				swIndik = cswERRORWaitReady;
				break;
			}
			if (flIsReaded != 0) {
    196e:	80 91 64 09 	lds	r24, 0x0964
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <MainAlg+0x274>
    1976:	d4 c0       	rjmp	.+424    	; 0x1b20 <MainAlg+0x41c>
				//if (strstr(FromModemBuf, "Call Ready")) {
				if (flCallReady) {
    1978:	80 91 d2 07 	lds	r24, 0x07D2
    197c:	88 23       	and	r24, r24
    197e:	09 f4       	brne	.+2      	; 0x1982 <MainAlg+0x27e>
    1980:	cf c0       	rjmp	.+414    	; 0x1b20 <MainAlg+0x41c>
					swMainAlg = cswOKWaitReady;
    1982:	8a e0       	ldi	r24, 0x0A	; 10
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	66 c0       	rjmp	.+204    	; 0x1a54 <MainAlg+0x350>
					break;
				}
			}
		break;
		case cswERRORWaitReady:
			TMainAlg = GetTime();
    1988:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    198c:	90 93 8c 08 	sts	0x088C, r25
    1990:	80 93 8b 08 	sts	0x088B, r24
			BadCount++;
    1994:	80 91 d1 07 	lds	r24, 0x07D1
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	80 93 d1 07 	sts	0x07D1, r24
			if (BadCount >= 3) RetVal = 100;
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	14 f0       	brlt	.+4      	; 0x19a6 <MainAlg+0x2a2>
    19a2:	14 e6       	ldi	r17, 0x64	; 100
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <MainAlg+0x2a4>
    19a6:	10 e0       	ldi	r17, 0x00	; 0
			swMainAlg = csw010;
    19a8:	8c e1       	ldi	r24, 0x1C	; 28
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	90 93 d0 07 	sts	0x07D0, r25
    19b0:	80 93 cf 07 	sts	0x07CF, r24
    19b4:	b6 c0       	rjmp	.+364    	; 0x1b22 <MainAlg+0x41e>
		break;
		case cswOKWaitReady:
			swMainAlg = cswReadSettings;
    19b6:	8b e0       	ldi	r24, 0x0B	; 11
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	4c c0       	rjmp	.+152    	; 0x1a54 <MainAlg+0x350>
		//------------ ----------------------------------------------------------
		
		//------------ ----------------------------------------------------------
		//------------ Читаем номера и настройки из телефонной книги ------------
		case cswReadSettings:
			swReadSettings = cswStart;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	90 93 ba 07 	sts	0x07BA, r25
    19c4:	80 93 b9 07 	sts	0x07B9, r24
			swMainAlg = csw020;
    19c8:	8d e1       	ldi	r24, 0x1D	; 29
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	90 93 d0 07 	sts	0x07D0, r25
    19d0:	80 93 cf 07 	sts	0x07CF, r24
			swIndik = cswReadSettings;
    19d4:	8b e0       	ldi	r24, 0x0B	; 11
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	90 93 c1 07 	sts	0x07C1, r25
    19dc:	80 93 c0 07 	sts	0x07C0, r24
    19e0:	9f c0       	rjmp	.+318    	; 0x1b20 <MainAlg+0x41c>
		break;
		case csw020:
			tmpRet = ReadSettings();
    19e2:	0e 94 2a 09 	call	0x1254	; 0x1254 <ReadSettings>
    19e6:	20 91 b9 07 	lds	r18, 0x07B9
    19ea:	30 91 ba 07 	lds	r19, 0x07BA
			if ((tmpRet!=0) && (swReadSettings==cswNOK)) { // ошибка сработки
    19ee:	88 23       	and	r24, r24
    19f0:	59 f0       	breq	.+22     	; 0x1a08 <MainAlg+0x304>
    19f2:	2b 32       	cpi	r18, 0x2B	; 43
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f0       	breq	.+2      	; 0x19fa <MainAlg+0x2f6>
    19f8:	93 c0       	rjmp	.+294    	; 0x1b20 <MainAlg+0x41c>
				swReadSettings=cswIdle;
    19fa:	10 92 ba 07 	sts	0x07BA, r1
    19fe:	10 92 b9 07 	sts	0x07B9, r1
				swMainAlg = cswWriteSettings;
    1a02:	8c e0       	ldi	r24, 0x0C	; 12
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	26 c0       	rjmp	.+76     	; 0x1a54 <MainAlg+0x350>
			}
			if ((tmpRet==0) && (swReadSettings==cswOK)) { // отработала нормально
    1a08:	2a 32       	cpi	r18, 0x2A	; 42
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <MainAlg+0x30c>
    1a0e:	88 c0       	rjmp	.+272    	; 0x1b20 <MainAlg+0x41c>
				swReadSettings=cswIdle;
    1a10:	10 92 ba 07 	sts	0x07BA, r1
    1a14:	10 92 b9 07 	sts	0x07B9, r1
    1a18:	69 c0       	rjmp	.+210    	; 0x1aec <MainAlg+0x3e8>
		//------------ ----------------------------------------------------------

		//------------ ----------------------------------------------------------
		//------------ Записываем номера и настройки
		case cswWriteSettings:
			swWriteSettings = cswStart;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	90 93 b8 07 	sts	0x07B8, r25
    1a22:	80 93 b7 07 	sts	0x07B7, r24
			swMainAlg = csw040;
    1a26:	80 e2       	ldi	r24, 0x20	; 32
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <MainAlg+0x350>
		break;
		case csw040:
			tmpRet = WriteSettings();
    1a2c:	0e 94 87 0a 	call	0x150e	; 0x150e <WriteSettings>
    1a30:	20 91 b7 07 	lds	r18, 0x07B7
    1a34:	30 91 b8 07 	lds	r19, 0x07B8
			if ((tmpRet!=0) && (swWriteSettings==cswNOK)) { // ошибка сработки
    1a38:	88 23       	and	r24, r24
    1a3a:	89 f0       	breq	.+34     	; 0x1a5e <MainAlg+0x35a>
    1a3c:	2b 32       	cpi	r18, 0x2B	; 43
    1a3e:	31 05       	cpc	r19, r1
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <MainAlg+0x340>
    1a42:	6e c0       	rjmp	.+220    	; 0x1b20 <MainAlg+0x41c>
				ModemOnOff();
    1a44:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <ModemOnOff>
				swWriteSettings=cswIdle;
    1a48:	10 92 b8 07 	sts	0x07B8, r1
    1a4c:	10 92 b7 07 	sts	0x07B7, r1
				swMainAlg = cswERRORWriteSettings;
    1a50:	8d e0       	ldi	r24, 0x0D	; 13
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	90 93 d0 07 	sts	0x07D0, r25
    1a58:	80 93 cf 07 	sts	0x07CF, r24
    1a5c:	61 c0       	rjmp	.+194    	; 0x1b20 <MainAlg+0x41c>
			}
			if ((tmpRet==0) && (swWriteSettings==cswOK)) { // отработала нормально
    1a5e:	2a 32       	cpi	r18, 0x2A	; 42
    1a60:	31 05       	cpc	r19, r1
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <MainAlg+0x362>
    1a64:	5d c0       	rjmp	.+186    	; 0x1b20 <MainAlg+0x41c>
				ModemOnOff();
    1a66:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <ModemOnOff>
				swWriteSettings=cswIdle;
    1a6a:	10 92 b8 07 	sts	0x07B8, r1
    1a6e:	10 92 b7 07 	sts	0x07B7, r1
				swMainAlg = cswENDWriteSettings;
    1a72:	8e e0       	ldi	r24, 0x0E	; 14
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	ee cf       	rjmp	.-36     	; 0x1a54 <MainAlg+0x350>
		//------------ ----------------------------------------------------------
		
		//------------ ----------------------------------------------------------
		//------------ Проверяем счет -------------------------------------------
		case cswStartBilling:
			swTryBilling = cswStart;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	90 93 bd 07 	sts	0x07BD, r25
    1a80:	80 93 bc 07 	sts	0x07BC, r24
			swMainAlg = cswBilling;
    1a84:	88 e1       	ldi	r24, 0x18	; 24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	e5 cf       	rjmp	.-54     	; 0x1a54 <MainAlg+0x350>
		break;
		case cswBilling:
			TryBilling();
    1a8a:	0e 94 d6 06 	call	0xdac	; 0xdac <TryBilling>
			switch (swTryBilling) {
    1a8e:	80 91 bc 07 	lds	r24, 0x07BC
    1a92:	90 91 bd 07 	lds	r25, 0x07BD
    1a96:	8a 31       	cpi	r24, 0x1A	; 26
    1a98:	91 05       	cpc	r25, r1
    1a9a:	71 f0       	breq	.+28     	; 0x1ab8 <MainAlg+0x3b4>
    1a9c:	8a 32       	cpi	r24, 0x2A	; 42
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	b1 f0       	breq	.+44     	; 0x1ace <MainAlg+0x3ca>
    1aa2:	49 97       	sbiw	r24, 0x19	; 25
    1aa4:	e9 f5       	brne	.+122    	; 0x1b20 <MainAlg+0x41c>
				case cswCantConnectBill:
					if (IsDebug()) { //!#ifdef M_DEBUG
    1aa6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
    1aaa:	88 23       	and	r24, r24
    1aac:	d9 f0       	breq	.+54     	; 0x1ae4 <MainAlg+0x3e0>
						PutPC("cswCantConnectBill\r\n");
    1aae:	87 e0       	ldi	r24, 0x07	; 7
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
    1ab6:	16 c0       	rjmp	.+44     	; 0x1ae4 <MainAlg+0x3e0>
					} //#endif
					swTryBilling = cswIdle;
					swMainAlg = cswStartWork;
				break;
				case cswLittleMoney:
					if (IsDebug()) { //!#ifdef M_DEBUG
    1ab8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
    1abc:	88 23       	and	r24, r24
    1abe:	21 f0       	breq	.+8      	; 0x1ac8 <MainAlg+0x3c4>
						PutPC("cswLittleMoney\r\n");
    1ac0:	8c e1       	ldi	r24, 0x1C	; 28
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
    1ac4:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
					} //#endif
					flMoreThenMax = 0;
    1ac8:	10 92 94 05 	sts	0x0594, r1
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <MainAlg+0x3e0>
					swTryBilling = cswIdle;
					swMainAlg = cswStartWork;
					//!!!!!отослать СМС мало денег и подождать его выполнения
				break;
				case cswOK:
					if (IsDebug()) { //!#ifdef M_DEBUG
    1ace:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
    1ad2:	88 23       	and	r24, r24
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <MainAlg+0x3da>
						PutPC("cswOK\r\n");
    1ad6:	8d e2       	ldi	r24, 0x2D	; 45
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
					} //#endif
					flMoreThenMax = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	80 93 94 05 	sts	0x0594, r24
					swTryBilling = cswIdle;
    1ae4:	10 92 bd 07 	sts	0x07BD, r1
    1ae8:	10 92 bc 07 	sts	0x07BC, r1
					swMainAlg = cswStartWork;
    1aec:	8f e0       	ldi	r24, 0x0F	; 15
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	b1 cf       	rjmp	.-158    	; 0x1a54 <MainAlg+0x350>
		//------------ ----------------------------------------------------------
		
		//------------ ----------------------------------------------------------
		//------------ Все данные есть - можем спокойненько работать ------------
		case cswStartWork:
			swWork = cswWork;
    1af2:	80 e1       	ldi	r24, 0x10	; 16
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	90 93 c9 07 	sts	0x07C9, r25
    1afa:	80 93 c8 07 	sts	0x07C8, r24
			swMainAlg = cswWork;
    1afe:	90 93 d0 07 	sts	0x07D0, r25
    1b02:	80 93 cf 07 	sts	0x07CF, r24
			swIndik = cswStartWork;
    1b06:	8f e0       	ldi	r24, 0x0F	; 15
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	90 93 c1 07 	sts	0x07C1, r25
    1b0e:	80 93 c0 07 	sts	0x07C0, r24
			swAlgTermSirena = cswIdle;
    1b12:	10 92 d8 07 	sts	0x07D8, r1
    1b16:	10 92 d7 07 	sts	0x07D7, r1
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <MainAlg+0x41c>
		break;
		case cswWork:
			Work();
    1b1c:	0e 94 aa 04 	call	0x954	; 0x954 <Work>
    1b20:	10 e0       	ldi	r17, 0x00	; 0
		break;
		//------------ END Все данные есть - можем спокойненько работать --------
		//------------ ----------------------------------------------------------
	}
	
	Indik();
    1b22:	0e 94 8c 02 	call	0x518	; 0x518 <Indik>
	
	return RetVal;
}
    1b26:	81 2f       	mov	r24, r17
    1b28:	cc 59       	subi	r28, 0x9C	; 156
    1b2a:	df 4f       	sbci	r29, 0xFF	; 255
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	08 95       	ret

00001b48 <main>:


//------------------------------------------------------------------------------------


int main (void) {
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
	//MDelay(1000);

	//sei();

	TermInit();
	swMainAlg = cswStart;
    1b4e:	c1 e0       	ldi	r28, 0x01	; 1
    1b50:	d0 e0       	ldi	r29, 0x00	; 0
		if (tmp_flIsReaded) {
			cli();
			strncpy(FromModemBuf, PromFromModemBuf, MAX_BUF-1);
			tmp_flIsReaded = 0;
			sei();
			flIsReaded = 1;
    1b52:	11 e0       	ldi	r17, 0x01	; 1

int main (void) {

LStart:

	cli();
    1b54:	f8 94       	cli
	initTimer();
    1b56:	0e 94 c0 00 	call	0x180	; 0x180 <initTimer>
	//disable_interrupt();
	//SREG = SREG & 0b01111111;


flIsReaded=0; 
    1b5a:	10 92 64 09 	sts	0x0964, r1
tmpFromModemBufLen = 0;
    1b5e:	10 92 c4 0b 	sts	0x0BC4, r1
    1b62:	10 92 c3 0b 	sts	0x0BC3, r1
FromModemBufLen = 0;
    1b66:	10 92 f4 0c 	sts	0x0CF4, r1
    1b6a:	10 92 f3 0c 	sts	0x0CF3, r1


	// инициализация входов/выходов
	InitInsOuts();
    1b6e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <InitInsOuts>
	MDelay(1000);
    1b72:	88 ee       	ldi	r24, 0xE8	; 232
    1b74:	93 e0       	ldi	r25, 0x03	; 3
    1b76:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <MDelay>
	
	SetIndBits(0b00000010);OutInd(); //!!!
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
    1b80:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <OutInd>

	// инициализация СОМ портов
	USART1_Init(BAUD(57600));	// внешний порт
    1b84:	87 e0       	ldi	r24, 0x07	; 7
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <USART1_Init>
	USART0_Int_Init(BAUD(9600));	// модем
    1b8c:	8f e2       	ldi	r24, 0x2F	; 47
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <USART0_Int_Init>
	MDelay(3000);
    1b94:	88 eb       	ldi	r24, 0xB8	; 184
    1b96:	9b e0       	ldi	r25, 0x0B	; 11
    1b98:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <MDelay>
	SetIndBits(0b00000001);OutInd(); //!!!
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
    1ba2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <OutInd>

	// включение модема
	ModemOnOff();
    1ba6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <ModemOnOff>
	MDelay(1000);
    1baa:	88 ee       	ldi	r24, 0xE8	; 232
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <MDelay>
	
	sei();
    1bb2:	78 94       	sei
	
	SetIndBits(0b00000010);OutInd(); //!!!
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <SetIndBits>
    1bba:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <OutInd>
	
	if (IsDebug()) { //!#ifdef M_DEBUG
    1bbe:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
    1bc2:	88 23       	and	r24, r24
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <main+0x86>
		PutPC("\r\nSTART\r\n");
    1bc6:	89 e3       	ldi	r24, 0x39	; 57
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
	} //!#endif
	
	PutModem("AT\r\n");
    1bce:	83 e4       	ldi	r24, 0x43	; 67
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <PutModem>

	//MDelay(1000);

	//sei();

	TermInit();
    1bd6:	0e 94 4b 14 	call	0x2896	; 0x2896 <TermInit>
	swMainAlg = cswStart;
    1bda:	d0 93 d0 07 	sts	0x07D0, r29
    1bde:	c0 93 cf 07 	sts	0x07CF, r28
	
	while (1) {

		DIn();
    1be2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIn>

		if (IsDebug()) { //!#ifdef M_DEBUG
    1be6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
    1bea:	88 23       	and	r24, r24
    1bec:	81 f0       	breq	.+32     	; 0x1c0e <main+0xc6>
			if (USART1_Receive(&ResCharP)) {
    1bee:	86 ec       	ldi	r24, 0xC6	; 198
    1bf0:	98 e0       	ldi	r25, 0x08	; 8
    1bf2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <USART1_Receive>
    1bf6:	88 23       	and	r24, r24
    1bf8:	51 f0       	breq	.+20     	; 0x1c0e <main+0xc6>
				char Ret = ProcessKey(ResCharP);
    1bfa:	80 91 c6 08 	lds	r24, 0x08C6
    1bfe:	0e 94 1a 12 	call	0x2434	; 0x2434 <ProcessKey>
				//if (Ret == 0x27) break; // выход
				if (Ret != 1) USART0_Transmit(ResCharP);
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	21 f0       	breq	.+8      	; 0x1c0e <main+0xc6>
    1c06:	80 91 c6 08 	lds	r24, 0x08C6
    1c0a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <USART0_Transmit>
			}
		} //!#endif
		
		//ReadStringModem();
		//
		if (tmp_flIsReaded) {
    1c0e:	80 91 f5 0c 	lds	r24, 0x0CF5
    1c12:	88 23       	and	r24, r24
    1c14:	d1 f0       	breq	.+52     	; 0x1c4a <main+0x102>
			cli();
    1c16:	f8 94       	cli
			strncpy(FromModemBuf, PromFromModemBuf, MAX_BUF-1);
    1c18:	8b e5       	ldi	r24, 0x5B	; 91
    1c1a:	9c e0       	ldi	r25, 0x0C	; 12
    1c1c:	65 ec       	ldi	r22, 0xC5	; 197
    1c1e:	7b e0       	ldi	r23, 0x0B	; 11
    1c20:	45 e9       	ldi	r20, 0x95	; 149
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
			tmp_flIsReaded = 0;
    1c28:	10 92 f5 0c 	sts	0x0CF5, r1
			sei();
    1c2c:	78 94       	sei
			flIsReaded = 1;
    1c2e:	10 93 64 09 	sts	0x0964, r17
			
			if (IsDebug()) { //!#ifdef M_DEBUG
    1c32:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <IsDebug>
    1c36:	88 23       	and	r24, r24
    1c38:	41 f0       	breq	.+16     	; 0x1c4a <main+0x102>
				PutPC(FromModemBuf);
    1c3a:	8b e5       	ldi	r24, 0x5B	; 91
    1c3c:	9c e0       	ldi	r25, 0x0C	; 12
    1c3e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
				PutPC("\r\n");
    1c42:	88 e4       	ldi	r24, 0x48	; 72
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
		*/
//		PutPCCharsN(tmpS, 1);
//		PutPC("<\r\n");
		
		// --------- отработка алгоритмов
		char retMain = MainAlg();
    1c4a:	0e 94 82 0b 	call	0x1704	; 0x1704 <MainAlg>
		if (retMain == 100) goto LStart;
    1c4e:	84 36       	cpi	r24, 0x64	; 100
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <main+0x10c>
    1c52:	80 cf       	rjmp	.-256    	; 0x1b54 <main+0xc>

		if (flIsReaded != 0) {
    1c54:	80 91 64 09 	lds	r24, 0x0964
    1c58:	88 23       	and	r24, r24
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <main+0x118>
			flIsReaded = 0;
    1c5c:	10 92 64 09 	sts	0x0964, r1
		}
		// --------- END отработка алгоритмов

		DOut();
    1c60:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <DOut>
		OutInd();
    1c64:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <OutInd>
    1c68:	bc cf       	rjmp	.-136    	; 0x1be2 <main+0x9a>

00001c6a <USART0_Init>:
//------------------------------------------------------------------------------------


void USART0_Init(unsigned int baud) {
	// Установка скорости связи 
	UBRR0H = (unsigned char)(baud>>8);
    1c6a:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = (unsigned char)baud;
    1c6e:	89 b9       	out	0x09, r24	; 9
	// Разрешение работы передатчика и приемника 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1c70:	88 e1       	ldi	r24, 0x18	; 24
    1c72:	8a b9       	out	0x0a, r24	; 10
	// Установка формата посылки: 8 бит данных, 1 стоп-бита 
	//UCSR0C = (3<<UCSZ0);
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1c74:	86 e0       	ldi	r24, 0x06	; 6
    1c76:	80 93 95 00 	sts	0x0095, r24
	//UCSR0B=0xd8;
	//UCSR0C=0x86;
}
    1c7a:	08 95       	ret

00001c7c <USART0_Int_Init>:
//------------------------------------------------------------------------------------

void USART0_Int_Init(unsigned int baud) {
	// Установка скорости связи 
	UBRR0H = (unsigned char)(baud>>8);
    1c7c:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = (unsigned char)baud;
    1c80:	89 b9       	out	0x09, r24	; 9
	// Разрешение работы передатчика и приемника 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1c82:	88 e1       	ldi	r24, 0x18	; 24
    1c84:	8a b9       	out	0x0a, r24	; 10
	// Установка формата посылки: 8 бит данных, 1 стоп-бита 
	//UCSR0C = (3<<UCSZ0);
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1c86:	86 e0       	ldi	r24, 0x06	; 6
    1c88:	80 93 95 00 	sts	0x0095, r24
	//Однако прерывание не будет вызываться, если микроконтроллеру этого не указать. 
	//В нашем случае для этого используется бит RXCIE в регистре UCSRB
	UCSR0B |= (1 << RXCIE0);
    1c8c:	57 9a       	sbi	0x0a, 7	; 10
}
    1c8e:	08 95       	ret

00001c90 <USART1_Init>:
//------------------------------------------------------------------------------------


void USART1_Init(unsigned int baud) {
	// Установка скорости связи 
	UBRR1H = (unsigned char)(baud>>8);
    1c90:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)baud;
    1c94:	80 93 99 00 	sts	0x0099, r24
	// Разрешение работы передатчика и приемника 
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    1c98:	88 e1       	ldi	r24, 0x18	; 24
    1c9a:	80 93 9a 00 	sts	0x009A, r24
	// Установка формата посылки: 8 бит данных, 1 стоп-бита 
	//UCSR1C = (3<<UCSZ0);
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
    1c9e:	86 e0       	ldi	r24, 0x06	; 6
    1ca0:	80 93 9d 00 	sts	0x009D, r24
	//UCSR1B=0xd8;
	//UCSR1C=0x86;
}
    1ca4:	08 95       	ret

00001ca6 <USART0_Transmit>:


// Передать байт в модем
void USART0_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика
	while ( !( UCSR0A & (1<<UDRE0)) );
    1ca6:	5d 9b       	sbis	0x0b, 5	; 11
    1ca8:	fe cf       	rjmp	.-4      	; 0x1ca6 <USART0_Transmit>
	//Помещение данных в буфер, отправка данных 
	UDR0 = data;
    1caa:	8c b9       	out	0x0c, r24	; 12
}
    1cac:	08 95       	ret

00001cae <USART1_Transmit>:
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
    1cae:	98 2f       	mov	r25, r24
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    1cb0:	80 91 9b 00 	lds	r24, 0x009B
    1cb4:	85 ff       	sbrs	r24, 5
    1cb6:	fc cf       	rjmp	.-8      	; 0x1cb0 <USART1_Transmit+0x2>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    1cb8:	90 93 9c 00 	sts	0x009C, r25
}
    1cbc:	08 95       	ret

00001cbe <PutModemChar>:


// Передать байт в модем
void USART0_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика
	while ( !( UCSR0A & (1<<UDRE0)) );
    1cbe:	5d 9b       	sbis	0x0b, 5	; 11
    1cc0:	fe cf       	rjmp	.-4      	; 0x1cbe <PutModemChar>
	//Помещение данных в буфер, отправка данных 
	UDR0 = data;
    1cc2:	8c b9       	out	0x0c, r24	; 12
//------------------------------------------------------------------------------------

// Вывод символа в модем
void PutModemChar(char ValChar) {
	USART0_Transmit(ValChar);
}
    1cc4:	08 95       	ret

00001cc6 <PutPCChar>:
//------------------------------------------------------------------------------------
// Вывод символа в PC
void PutPCChar(char ValChar) {
    1cc6:	98 2f       	mov	r25, r24
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    1cc8:	80 91 9b 00 	lds	r24, 0x009B
    1ccc:	85 ff       	sbrs	r24, 5
    1cce:	fc cf       	rjmp	.-8      	; 0x1cc8 <PutPCChar+0x2>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    1cd0:	90 93 9c 00 	sts	0x009C, r25
}
//------------------------------------------------------------------------------------
// Вывод символа в PC
void PutPCChar(char ValChar) {
	USART1_Transmit(ValChar);
}
    1cd4:	08 95       	ret

00001cd6 <PutPC>:
		str++;
	}
}
//------------------------------------------------------------------------------------
// Вывод строки в PC
void PutPC(char *str) {
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	07 c0       	rjmp	.+14     	; 0x1ce8 <PutPC+0x12>
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    1cda:	80 91 9b 00 	lds	r24, 0x009B
    1cde:	85 ff       	sbrs	r24, 5
    1ce0:	fc cf       	rjmp	.-8      	; 0x1cda <PutPC+0x4>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    1ce2:	90 93 9c 00 	sts	0x009C, r25
//------------------------------------------------------------------------------------
// Вывод строки в PC
void PutPC(char *str) {
	while (*str) {
		USART1_Transmit(*str);
		str++;
    1ce6:	31 96       	adiw	r30, 0x01	; 1
	}
}
//------------------------------------------------------------------------------------
// Вывод строки в PC
void PutPC(char *str) {
	while (*str) {
    1ce8:	90 81       	ld	r25, Z
    1cea:	99 23       	and	r25, r25
    1cec:	b1 f7       	brne	.-20     	; 0x1cda <PutPC+0x4>
		USART1_Transmit(*str);
		str++;
	}
}
    1cee:	08 95       	ret

00001cf0 <PutModem>:
	USART1_Transmit(ValChar);
}
//------------------------------------------------------------------------------------

// Вывод строки в модем
void PutModem(char *str) {
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	ec 01       	movw	r28, r24
	PutPC("To Modem->");
    1cf6:	87 e3       	ldi	r24, 0x37	; 55
    1cf8:	96 e0       	ldi	r25, 0x06	; 6
    1cfa:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
	PutPC(str);
    1cfe:	ce 01       	movw	r24, r28
    1d00:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <PutModem+0x1e>


// Передать байт в модем
void USART0_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика
	while ( !( UCSR0A & (1<<UDRE0)) );
    1d06:	5d 9b       	sbis	0x0b, 5	; 11
    1d08:	fe cf       	rjmp	.-4      	; 0x1d06 <PutModem+0x16>
	//Помещение данных в буфер, отправка данных 
	UDR0 = data;
    1d0a:	8c b9       	out	0x0c, r24	; 12
void PutModem(char *str) {
	PutPC("To Modem->");
	PutPC(str);
	while (*str) {
		USART0_Transmit(*str);
		str++;
    1d0c:	21 96       	adiw	r28, 0x01	; 1

// Вывод строки в модем
void PutModem(char *str) {
	PutPC("To Modem->");
	PutPC(str);
	while (*str) {
    1d0e:	88 81       	ld	r24, Y
    1d10:	88 23       	and	r24, r24
    1d12:	c9 f7       	brne	.-14     	; 0x1d06 <PutModem+0x16>
		USART0_Transmit(*str);
		str++;
	}
}
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <USART0_Receive>:
}
//------------------------------------------------------------------------------------

// Получить байт с модема без ожидания 
//unsigned char USART0_Receive(unsigned char *data) {
char USART0_Receive(char *data) {
    1d1a:	fc 01       	movw	r30, r24
	//Ожидание окончания приема данных 
	if ( !(UCSR0A & (1<<RXC0)) ) { // нет данных в буфере чтения
    1d1c:	5f 99       	sbic	0x0b, 7	; 11
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <USART0_Receive+0xa>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	08 95       	ret
		return 0;
	}else{
		//Загрузка принятых данных из буфера 
		*data = UDR0;
    1d24:	8c b1       	in	r24, 0x0c	; 12
    1d26:	80 83       	st	Z, r24
    1d28:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	//return 0;
}
    1d2a:	08 95       	ret

00001d2c <USART1_Receive>:
//------------------------------------------------------------------------------------

// Получить байт с PC без ожидания 
//unsigned char USART1_Receive(unsigned char *data) {
char USART1_Receive(char *data) {
    1d2c:	fc 01       	movw	r30, r24
	//Ожидание окончания приема данных 
	if ( !(UCSR1A & (1<<RXC1)) ) { // нет данных в буфере чтения
    1d2e:	80 91 9b 00 	lds	r24, 0x009B
    1d32:	87 fd       	sbrc	r24, 7
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <USART1_Receive+0xe>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	08 95       	ret
		return 0;
	}else{
		//Загрузка принятых данных из буфера 
		*data = UDR1;
    1d3a:	80 91 9c 00 	lds	r24, 0x009C
    1d3e:	80 83       	st	Z, r24
    1d40:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	//return 0;
}
    1d42:	08 95       	ret

00001d44 <Wait>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
    1d44:	1f 93       	push	r17
    1d46:	a0 91 fa 0c 	lds	r26, 0x0CFA
    1d4a:	b0 91 fb 0c 	lds	r27, 0x0CFB
    1d4e:	20 91 fc 0c 	lds	r18, 0x0CFC
    1d52:	30 91 fd 0c 	lds	r19, 0x0CFD
    1d56:	40 91 f8 0c 	lds	r20, 0x0CF8
    1d5a:	50 91 f9 0c 	lds	r21, 0x0CF9
    1d5e:	e0 e0       	ldi	r30, 0x00	; 0
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	1a c0       	rjmp	.+52     	; 0x1d98 <Wait+0x54>
	for(i=0;i<n;i++){
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <Wait+0x32>
		for(j=0;j<100;j++){
			for(k=0;k<65000;k++){
				l = k; l = l / 2;
    1d6e:	d9 01       	movw	r26, r18
    1d70:	b6 95       	lsr	r27
    1d72:	a7 95       	ror	r26
    1d74:	9b 01       	movw	r18, r22
    1d76:	b9 01       	movw	r22, r18
    1d78:	6f 5f       	subi	r22, 0xFF	; 255
    1d7a:	7f 4f       	sbci	r23, 0xFF	; 255

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
	for(i=0;i<n;i++){
		for(j=0;j<100;j++){
			for(k=0;k<65000;k++){
    1d7c:	1d ef       	ldi	r17, 0xFD	; 253
    1d7e:	69 3e       	cpi	r22, 0xE9	; 233
    1d80:	71 07       	cpc	r23, r17
    1d82:	a9 f7       	brne	.-22     	; 0x1d6e <Wait+0x2a>
    1d84:	4f 5f       	subi	r20, 0xFF	; 255
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
//------------------------------------------------------------------------------------

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
	for(i=0;i<n;i++){
		for(j=0;j<100;j++){
    1d88:	44 36       	cpi	r20, 0x64	; 100
    1d8a:	51 05       	cpc	r21, r1
    1d8c:	69 f7       	brne	.-38     	; 0x1d68 <Wait+0x24>
    1d8e:	31 96       	adiw	r30, 0x01	; 1
    1d90:	44 e6       	ldi	r20, 0x64	; 100
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	28 ee       	ldi	r18, 0xE8	; 232
    1d96:	3d ef       	ldi	r19, 0xFD	; 253
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
	for(i=0;i<n;i++){
    1d98:	e8 17       	cp	r30, r24
    1d9a:	f9 07       	cpc	r31, r25
    1d9c:	18 f3       	brcs	.-58     	; 0x1d64 <Wait+0x20>
    1d9e:	b0 93 fb 0c 	sts	0x0CFB, r27
    1da2:	a0 93 fa 0c 	sts	0x0CFA, r26
    1da6:	30 93 fd 0c 	sts	0x0CFD, r19
    1daa:	20 93 fc 0c 	sts	0x0CFC, r18
    1dae:	50 93 f9 0c 	sts	0x0CF9, r21
    1db2:	40 93 f8 0c 	sts	0x0CF8, r20
    1db6:	f0 93 ff 0c 	sts	0x0CFF, r31
    1dba:	e0 93 fe 0c 	sts	0x0CFE, r30
			for(k=0;k<65000;k++){
				l = k; l = l / 2;
			}
		}
	}
}
    1dbe:	1f 91       	pop	r17
    1dc0:	08 95       	ret

00001dc2 <MDelay>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

int CountTimes;
void MDelay(int ms) {
    1dc2:	af 92       	push	r10
    1dc4:	bf 92       	push	r11
    1dc6:	cf 92       	push	r12
    1dc8:	df 92       	push	r13
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
//	CountTimes = ms / 500;
//	for (i=0; i<CountTimes; i++) {
		//_delay_ms(10000);
		_delay_ms(ms);
    1dd2:	aa 27       	eor	r26, r26
    1dd4:	97 fd       	sbrc	r25, 7
    1dd6:	a0 95       	com	r26
    1dd8:	ba 2f       	mov	r27, r26
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__floatsisf>
    1de2:	5b 01       	movw	r10, r22
    1de4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	26 e6       	ldi	r18, 0x66	; 102
    1de8:	36 e6       	ldi	r19, 0x66	; 102
    1dea:	46 ee       	ldi	r20, 0xE6	; 230
    1dec:	54 e4       	ldi	r21, 0x44	; 68
    1dee:	0e 94 ed 18 	call	0x31da	; 0x31da <__mulsf3>
    1df2:	7b 01       	movw	r14, r22
    1df4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 47 1a 	call	0x348e	; 0x348e <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	1c f4       	brge	.+6      	; 0x1e0c <MDelay+0x4a>
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	24 c0       	rjmp	.+72     	; 0x1e54 <MDelay+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	b7 01       	movw	r22, r14
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	3f ef       	ldi	r19, 0xFF	; 255
    1e14:	4f e7       	ldi	r20, 0x7F	; 127
    1e16:	57 e4       	ldi	r21, 0x47	; 71
    1e18:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__gtsf2>
    1e1c:	18 16       	cp	r1, r24
    1e1e:	b4 f4       	brge	.+44     	; 0x1e4c <MDelay+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e20:	c6 01       	movw	r24, r12
    1e22:	b5 01       	movw	r22, r10
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 ed 18 	call	0x31da	; 0x31da <__mulsf3>
    1e30:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e34:	88 eb       	ldi	r24, 0xB8	; 184
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <MDelay+0x82>
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	31 97       	sbiw	r30, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <MDelay+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	61 50       	subi	r22, 0x01	; 1
    1e42:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	61 15       	cp	r22, r1
    1e46:	71 05       	cpc	r23, r1
    1e48:	c1 f7       	brne	.-16     	; 0x1e3a <MDelay+0x78>
    1e4a:	07 c0       	rjmp	.+14     	; 0x1e5a <MDelay+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	c8 01       	movw	r24, r16
    1e4e:	b7 01       	movw	r22, r14
    1e50:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__fixunssfsi>
    1e54:	cb 01       	movw	r24, r22
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <MDelay+0x94>
//	}
}
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	08 95       	ret

00001e6c <InitInsOuts>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

void InitInsOuts(void) {
	//DDRG = 0xFF; // весь порт на вывод
	DDRG = 0b00011110; // младший бит на ввод  // для работы отладочного режима
    1e6c:	8e e1       	ldi	r24, 0x1E	; 30
    1e6e:	80 93 64 00 	sts	0x0064, r24
	DDRD = 0xFF; // весь порт на вывод
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x00; // весь порт на ввод
    1e76:	12 b8       	out	0x02, r1	; 2
	DDRF = 0x00; // весь порт на ввод
    1e78:	10 92 61 00 	sts	0x0061, r1
	PORTG = 0b00000010;  // для работы отладочного режима 2-й бит всегда 1
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	80 93 65 00 	sts	0x0065, r24
	PORTD = 0xF0;
    1e82:	80 ef       	ldi	r24, 0xF0	; 240
    1e84:	82 bb       	out	0x12, r24	; 18
	PORTE = 0x00;
    1e86:	13 b8       	out	0x03, r1	; 3
}
    1e88:	08 95       	ret

00001e8a <ModemOnOff>:
// Выключение модема
void ModemOnOff(void) {
//	PORTD = PORTD & 0b11111110;
//	MDelay(500);
	//PORTD = PORTD | 0x01;
	DOuts = DOuts | 0x01;
    1e8a:	80 91 4b 02 	lds	r24, 0x024B
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	80 93 4b 02 	sts	0x024B, r24
void DOut(void) {
	//PORTD = (PORTD&0b00001111) | (DOuts<<4);
	//PORTD = ((PORTD&0x0F) | (DOuts<<4));
	//PORTD = (PIND&0x0F) | ((~(DOuts<<4)) & 0b11110000);
	//PORTD = (PORTD&0x0F) | (DOuts&0xF0);
	PORTD = DOuts;
    1e94:	82 bb       	out	0x12, r24	; 18
//	PORTD = PORTD & 0b11111110;
//	MDelay(500);
	//PORTD = PORTD | 0x01;
	DOuts = DOuts | 0x01;
	DOut();
	MDelay(1500);
    1e96:	8c ed       	ldi	r24, 0xDC	; 220
    1e98:	95 e0       	ldi	r25, 0x05	; 5
    1e9a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <MDelay>
	//PORTD = PORTD & (~0x01);
	DOuts = DOuts & (~0x01);
    1e9e:	80 91 4b 02 	lds	r24, 0x024B
    1ea2:	8e 7f       	andi	r24, 0xFE	; 254
    1ea4:	80 93 4b 02 	sts	0x024B, r24
void DOut(void) {
	//PORTD = (PORTD&0b00001111) | (DOuts<<4);
	//PORTD = ((PORTD&0x0F) | (DOuts<<4));
	//PORTD = (PIND&0x0F) | ((~(DOuts<<4)) & 0b11110000);
	//PORTD = (PORTD&0x0F) | (DOuts&0xF0);
	PORTD = DOuts;
    1ea8:	82 bb       	out	0x12, r24	; 18
	DOuts = DOuts & (~0x01);
	DOut();
//	MDelay(1000);
//	PORTD = PORTD | 0x01;
//	PORTD = PORTD & 0b11111110;
}
    1eaa:	08 95       	ret

00001eac <DIn>:

//------------------------------------------------------------------------------------

void DIn(void) {
	//DIns = ~((PORTE>>4)&0b00001111);
	DIns = (~PINE)&0b11110000;
    1eac:	81 b1       	in	r24, 0x01	; 1
	DIns = DIns^Settings.DInInversion;
    1eae:	80 95       	com	r24
    1eb0:	80 7f       	andi	r24, 0xF0	; 240
    1eb2:	90 91 c8 08 	lds	r25, 0x08C8
    1eb6:	89 27       	eor	r24, r25
    1eb8:	80 93 f2 0c 	sts	0x0CF2, r24
}
    1ebc:	08 95       	ret

00001ebe <DOut>:
void DOut(void) {
	//PORTD = (PORTD&0b00001111) | (DOuts<<4);
	//PORTD = ((PORTD&0x0F) | (DOuts<<4));
	//PORTD = (PIND&0x0F) | ((~(DOuts<<4)) & 0b11110000);
	//PORTD = (PORTD&0x0F) | (DOuts&0xF0);
	PORTD = DOuts;
    1ebe:	80 91 4b 02 	lds	r24, 0x024B
    1ec2:	82 bb       	out	0x12, r24	; 18
}
    1ec4:	08 95       	ret

00001ec6 <OutInd>:
//------------------------------------------------------------------------------------

// реально вывод значений в физический порт
void OutInd(void) {
	//PORTG = ~(IndSate<<3);
	PORTG = ~((IndSate<<3)|1);
    1ec6:	80 91 f1 0c 	lds	r24, 0x0CF1
    1eca:	88 0f       	add	r24, r24
    1ecc:	88 0f       	add	r24, r24
    1ece:	88 0f       	add	r24, r24
    1ed0:	81 60       	ori	r24, 0x01	; 1
    1ed2:	80 95       	com	r24
    1ed4:	80 93 65 00 	sts	0x0065, r24
	//PORTG = PORTG | 0b00000010; // для работы отладочного режима 2-й бит всегда 1
	//PORTG&(~((0b00000011&IndSate)<<3));
}
    1ed8:	08 95       	ret

00001eda <OnIndBit>:
//!!!! ТРЕБУЕТСЯ ПОМНИТЬ, ЧТО ИНДИКАТОРЫ ПОДЖИГАЮТСЯ НИЗКИМ УРОВНЕМ НА ДИСКРЕТНОМ ВЫХОДЕ !!!!
// производит установку соответствующих битов в 1.
// OnBitState принимает значение от 0b00 до 0b11 - в двоичной системе
// если какой-то разряд OnBitState == 0, то установка соответствующего бита не производится
void OnIndBit(unsigned char OnBitState) {
	IndSate = IndSate|(OnBitState);
    1eda:	90 91 f1 0c 	lds	r25, 0x0CF1
    1ede:	98 2b       	or	r25, r24
    1ee0:	90 93 f1 0c 	sts	0x0CF1, r25
}
    1ee4:	08 95       	ret

00001ee6 <OffIndBit>:
// производит сброс соответствующих битов в 0.
// OnBitState принимает значение от 0b00 до 0b11 - в двоичной системе
// если какой-то разряд OnBitState == 0, то сброс соответствующего бита не производится
void OffIndBit(unsigned char OffBitState) {
	IndSate = IndSate&(~(OffBitState));
    1ee6:	80 95       	com	r24
    1ee8:	90 91 f1 0c 	lds	r25, 0x0CF1
    1eec:	98 23       	and	r25, r24
    1eee:	90 93 f1 0c 	sts	0x0CF1, r25
}
    1ef2:	08 95       	ret

00001ef4 <SetIndBits>:
void SetIndBits(unsigned char NewState) {
	IndSate = NewState;
    1ef4:	80 93 f1 0c 	sts	0x0CF1, r24
}
    1ef8:	08 95       	ret

00001efa <IsDebug>:
	//if (tmpDIns&0b00010000) return 1; // если включен дискретный вход
	return 1;
	char tmpDIns = PING&0x01;
	if (tmpDIns) return 1; // если включен дискретный вход
	else  return 0;
}
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	08 95       	ret

00001efe <MarkDelay>:
	}
	return RetValWaitAnswer;
}
//------------------------------------------------------------------------------------

void MarkDelay(TTime *pDoCommandTimer, int *pswAlgDoCommand, int ValSwOK) {
    1efe:	cf 92       	push	r12
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	8c 01       	movw	r16, r24
    1f0c:	6b 01       	movw	r12, r22
    1f0e:	7a 01       	movw	r14, r20
	*pDoCommandTimer = GetTime();
    1f10:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    1f14:	f8 01       	movw	r30, r16
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
	*pswAlgDoCommand = ValSwOK;
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	f1 82       	std	Z+1, r15	; 0x01
    1f1e:	e0 82       	st	Z, r14
}
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	ef 90       	pop	r14
    1f28:	df 90       	pop	r13
    1f2a:	cf 90       	pop	r12
    1f2c:	08 95       	ret

00001f2e <DoCommand>:
	if (strstr(Str, "OK") == NULL) return 0; // нет такой буквы в этом слове :)
	return 1; // нашли вхождение!
}
//------------------------------------------------------------------------------------

char DoCommand(TTime *pDoCommandTimer, char *DoCommandCmd, int *pswAlgDoCommand, int ValSwOK) {
    1f2e:	cf 92       	push	r12
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	6c 01       	movw	r12, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	7a 01       	movw	r14, r20
    1f40:	89 01       	movw	r16, r18
	PutModem(DoCommandCmd);
    1f42:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <PutModem>
	*pDoCommandTimer = GetTime();
    1f46:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    1f4a:	f6 01       	movw	r30, r12
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
	*pswAlgDoCommand = ValSwOK;
    1f50:	f7 01       	movw	r30, r14
    1f52:	11 83       	std	Z+1, r17	; 0x01
    1f54:	00 83       	st	Z, r16
	return 1;
}
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	df 90       	pop	r13
    1f62:	cf 90       	pop	r12
    1f64:	08 95       	ret

00001f66 <WaitDelayAndGoTo>:
void MarkDelay(TTime *pDoCommandTimer, int *pswAlgDoCommand, int ValSwOK) {
	*pDoCommandTimer = GetTime();
	*pswAlgDoCommand = ValSwOK;
}

void WaitDelayAndGoTo(TTime DoCommandTimer, TTime TimeOut, int *pswAlgDoCommand, int ValSwOK) {
    1f66:	8f 92       	push	r8
    1f68:	9f 92       	push	r9
    1f6a:	af 92       	push	r10
    1f6c:	bf 92       	push	r11
    1f6e:	cf 92       	push	r12
    1f70:	df 92       	push	r13
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	8c 01       	movw	r16, r24
    1f80:	6b 01       	movw	r12, r22
    1f82:	4a 01       	movw	r8, r20
    1f84:	e9 01       	movw	r28, r18
	if ((GetTime() - DoCommandTimer) >= Ticks(TimeOut)) {
    1f86:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    1f8a:	5c 01       	movw	r10, r24
    1f8c:	ee 24       	eor	r14, r14
    1f8e:	ff 24       	eor	r15, r15
    1f90:	c7 01       	movw	r24, r14
    1f92:	b6 01       	movw	r22, r12
    1f94:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
    1f98:	a0 1a       	sub	r10, r16
    1f9a:	b1 0a       	sbc	r11, r17
    1f9c:	a8 16       	cp	r10, r24
    1f9e:	b9 06       	cpc	r11, r25
    1fa0:	18 f0       	brcs	.+6      	; 0x1fa8 <WaitDelayAndGoTo+0x42>
		*pswAlgDoCommand = ValSwOK;
    1fa2:	f4 01       	movw	r30, r8
    1fa4:	d1 83       	std	Z+1, r29	; 0x01
    1fa6:	c0 83       	st	Z, r28
	}
}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	ef 90       	pop	r14
    1fb4:	df 90       	pop	r13
    1fb6:	cf 90       	pop	r12
    1fb8:	bf 90       	pop	r11
    1fba:	af 90       	pop	r10
    1fbc:	9f 90       	pop	r9
    1fbe:	8f 90       	pop	r8
    1fc0:	08 95       	ret

00001fc2 <WaitAnswer>:
	PutModem(DoCommandCmd);
	*pDoCommandTimer = GetTime();
	*pswAlgDoCommand = ValSwOK;
	return 1;
}
char WaitAnswer(TTime DoCommandTimer, char *Answer, TTime TimeOut, int *pswAlgDoCommand, int ValSwOK, int ValSwNoOK) {
    1fc2:	4f 92       	push	r4
    1fc4:	5f 92       	push	r5
    1fc6:	6f 92       	push	r6
    1fc8:	7f 92       	push	r7
    1fca:	8f 92       	push	r8
    1fcc:	9f 92       	push	r9
    1fce:	af 92       	push	r10
    1fd0:	bf 92       	push	r11
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	6c 01       	movw	r12, r24
    1fe4:	3b 01       	movw	r6, r22
    1fe6:	4a 01       	movw	r8, r20
    1fe8:	e9 01       	movw	r28, r18
    1fea:	28 01       	movw	r4, r16
	char RetValWaitAnswer = 0; // еще работает
	if ((GetTime() - DoCommandTimer) >= Ticks(TimeOut)) {
    1fec:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    1ff0:	8c 01       	movw	r16, r24
    1ff2:	aa 24       	eor	r10, r10
    1ff4:	bb 24       	eor	r11, r11
    1ff6:	c5 01       	movw	r24, r10
    1ff8:	b4 01       	movw	r22, r8
    1ffa:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
    1ffe:	0c 19       	sub	r16, r12
    2000:	1d 09       	sbc	r17, r13
    2002:	08 17       	cp	r16, r24
    2004:	19 07       	cpc	r17, r25
    2006:	20 f0       	brcs	.+8      	; 0x2010 <WaitAnswer+0x4e>
		RetValWaitAnswer = 4; // время прошло, а ответа от модема нет!
		*pswAlgDoCommand = ValSwNoOK;
    2008:	f9 82       	std	Y+1, r15	; 0x01
    200a:	e8 82       	st	Y, r14
    200c:	84 e0       	ldi	r24, 0x04	; 4
    200e:	10 c0       	rjmp	.+32     	; 0x2030 <WaitAnswer+0x6e>
	} else
	if (flIsReaded != 0) {
    2010:	80 91 64 09 	lds	r24, 0x0964
    2014:	88 23       	and	r24, r24
    2016:	59 f0       	breq	.+22     	; 0x202e <WaitAnswer+0x6c>
		if (strstr(FromModemBuf, Answer)) {
    2018:	8b e5       	ldi	r24, 0x5B	; 91
    201a:	9c e0       	ldi	r25, 0x0C	; 12
    201c:	b3 01       	movw	r22, r6
    201e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <strstr>
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	21 f0       	breq	.+8      	; 0x202e <WaitAnswer+0x6c>
			RetValWaitAnswer = 1; // все хорошо
			*pswAlgDoCommand = ValSwOK;
    2026:	59 82       	std	Y+1, r5	; 0x01
    2028:	48 82       	st	Y, r4
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <WaitAnswer+0x6e>
    202e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return RetValWaitAnswer;
}
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	ff 90       	pop	r15
    203a:	ef 90       	pop	r14
    203c:	df 90       	pop	r13
    203e:	cf 90       	pop	r12
    2040:	bf 90       	pop	r11
    2042:	af 90       	pop	r10
    2044:	9f 90       	pop	r9
    2046:	8f 90       	pop	r8
    2048:	7f 90       	pop	r7
    204a:	6f 90       	pop	r6
    204c:	5f 90       	pop	r5
    204e:	4f 90       	pop	r4
    2050:	08 95       	ret

00002052 <IsNewOK>:
	return 1; // нашли вхождение!
}

char IsNewOK(char *Str) {
	//if (strlen(Str) < 2) return 0; // не может быть строка, содержащая СМС
	if (strstr(Str, "OK") == NULL) return 0; // нет такой буквы в этом слове :)
    2052:	62 e4       	ldi	r22, 0x42	; 66
    2054:	76 e0       	ldi	r23, 0x06	; 6
    2056:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <strstr>
    205a:	9c 01       	movw	r18, r24
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	23 2b       	or	r18, r19
    2060:	09 f0       	breq	.+2      	; 0x2064 <IsNewOK+0x12>
    2062:	81 e0       	ldi	r24, 0x01	; 1
	return 1; // нашли вхождение!
}
    2064:	08 95       	ret

00002066 <IsNewSMS>:

// Определение является ли строка Str сигналом о том, что пришло новое сообщение.
// +CMTI:"SM",
char IsNewSMS(char *Str) {
	//if (strlen(Str) < 12) return 0; // не может быть строка, содержащая СМС
	if (strstr(Str, "+CMTI:\"SM\"") == NULL) return 0; // нет такой буквы в этом слове :)
    2066:	65 e4       	ldi	r22, 0x45	; 69
    2068:	76 e0       	ldi	r23, 0x06	; 6
    206a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <strstr>
    206e:	9c 01       	movw	r18, r24
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	23 2b       	or	r18, r19
    2074:	09 f0       	breq	.+2      	; 0x2078 <IsNewSMS+0x12>
    2076:	81 e0       	ldi	r24, 0x01	; 1
	return 1; // нашли вхождение!
}
    2078:	08 95       	ret

0000207a <ReadStringModem>:

// Получить байт с модема без ожидания 
//unsigned char USART0_Receive(unsigned char *data) {
char USART0_Receive(char *data) {
	//Ожидание окончания приема данных 
	if ( !(UCSR0A & (1<<RXC0)) ) { // нет данных в буфере чтения
    207a:	5f 99       	sbic	0x0b, 7	; 11
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <ReadStringModem+0x8>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	08 95       	ret
		return 0;
	}else{
		//Загрузка принятых данных из буфера 
		*data = UDR0;
    2082:	9c b1       	in	r25, 0x0c	; 12
    2084:	90 93 c7 08 	sts	0x08C7, r25
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    2088:	80 91 9b 00 	lds	r24, 0x009B
    208c:	85 ff       	sbrs	r24, 5
    208e:	fc cf       	rjmp	.-8      	; 0x2088 <ReadStringModem+0xe>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2090:	90 93 9c 00 	sts	0x009C, r25
char ReadStringModem(void) {
	char RetValReadStringModem = 1; // ни один символ не прочитан
	if (USART0_Receive(&ResCharM)) { // получили символ из порта от модема
		USART1_Transmit(ResCharM); //!!!!! тут только для отладки !!!!!
		//USART1_Transmit("2"); //!skjdhaskdh
		if (tmpFromModemBufLen >= (MAX_BUF-5)) {
    2094:	40 91 c3 0b 	lds	r20, 0x0BC3
    2098:	50 91 c4 0b 	lds	r21, 0x0BC4
    209c:	41 39       	cpi	r20, 0x91	; 145
    209e:	51 05       	cpc	r21, r1
    20a0:	6c f0       	brlt	.+26     	; 0x20bc <ReadStringModem+0x42>
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    20a2:	80 91 9b 00 	lds	r24, 0x009B
    20a6:	85 ff       	sbrs	r24, 5
    20a8:	fc cf       	rjmp	.-8      	; 0x20a2 <ReadStringModem+0x28>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    20aa:	89 e3       	ldi	r24, 0x39	; 57
    20ac:	80 93 9c 00 	sts	0x009C, r24
		USART1_Transmit(ResCharM); //!!!!! тут только для отладки !!!!!
		//USART1_Transmit("2"); //!skjdhaskdh
		if (tmpFromModemBufLen >= (MAX_BUF-5)) {
			RetValReadStringModem = 10; // переполнение буфера, а строка до сих пор не прочитана
			USART1_Transmit('9'); //!skjdhaskdh
			tmpFromModemBufLen = 0; // так себе заглушка
    20b0:	10 92 c4 0b 	sts	0x0BC4, r1
    20b4:	10 92 c3 0b 	sts	0x0BC3, r1
    20b8:	8a e0       	ldi	r24, 0x0A	; 10
    20ba:	08 95       	ret
		}
		else {
			RetValReadStringModem = 2;
			tmpFromModemBuf[tmpFromModemBufLen] = ResCharM;
    20bc:	fa 01       	movw	r30, r20
    20be:	eb 59       	subi	r30, 0x9B	; 155
    20c0:	f6 4f       	sbci	r31, 0xF6	; 246
    20c2:	90 83       	st	Z, r25
			if (tmpFromModemBufLen >= 1) {
    20c4:	14 16       	cp	r1, r20
    20c6:	15 06       	cpc	r1, r21
    20c8:	1c f5       	brge	.+70     	; 0x2110 <ReadStringModem+0x96>
				if ((tmpFromModemBuf[tmpFromModemBufLen-1]==0x0D) && (tmpFromModemBuf[tmpFromModemBufLen]==0x0A)) {
    20ca:	9a 01       	movw	r18, r20
    20cc:	21 50       	subi	r18, 0x01	; 1
    20ce:	30 40       	sbci	r19, 0x00	; 0
    20d0:	f9 01       	movw	r30, r18
    20d2:	eb 59       	subi	r30, 0x9B	; 155
    20d4:	f6 4f       	sbci	r31, 0xF6	; 246
    20d6:	80 81       	ld	r24, Z
    20d8:	8d 30       	cpi	r24, 0x0D	; 13
    20da:	d1 f4       	brne	.+52     	; 0x2110 <ReadStringModem+0x96>
    20dc:	9a 30       	cpi	r25, 0x0A	; 10
    20de:	c1 f4       	brne	.+48     	; 0x2110 <ReadStringModem+0x96>
					
					tmpFromModemBufLen -= 1; // переопределили длину строки
    20e0:	30 93 c4 0b 	sts	0x0BC4, r19
    20e4:	20 93 c3 0b 	sts	0x0BC3, r18
					tmpFromModemBuf[tmpFromModemBufLen] = 0; // нам в строке не нужны "црлф" - насильно закончили строку
    20e8:	10 82       	st	Z, r1
					//USART1_Transmit('5'); //!skjdhaskdh
					FromModemBufLen = tmpFromModemBufLen;
    20ea:	30 93 f4 0c 	sts	0x0CF4, r19
    20ee:	20 93 f3 0c 	sts	0x0CF3, r18
					strncpy(FromModemBuf, tmpFromModemBuf, FromModemBufLen+1);
    20f2:	8b e5       	ldi	r24, 0x5B	; 91
    20f4:	9c e0       	ldi	r25, 0x0C	; 12
    20f6:	65 e6       	ldi	r22, 0x65	; 101
    20f8:	79 e0       	ldi	r23, 0x09	; 9
    20fa:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
					tmpFromModemBufLen = 0;
    20fe:	10 92 c4 0b 	sts	0x0BC4, r1
    2102:	10 92 c3 0b 	sts	0x0BC3, r1
					flIsReaded = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	80 93 64 09 	sts	0x0964, r24
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	08 95       	ret
					RetValReadStringModem = 0; // наконец-то прочли строку до конца! 
					return RetValReadStringModem;
				}
			}
			tmpFromModemBufLen++;
    2110:	4f 5f       	subi	r20, 0xFF	; 255
    2112:	5f 4f       	sbci	r21, 0xFF	; 255
    2114:	50 93 c4 0b 	sts	0x0BC4, r21
    2118:	40 93 c3 0b 	sts	0x0BC3, r20
    211c:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return RetValReadStringModem;
}
    211e:	08 95       	ret

00002120 <__vector_18>:



//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
ISR(USART0_RX_vect) {
    2120:	1f 92       	push	r1
    2122:	0f 92       	push	r0
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	0f 92       	push	r0
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	11 24       	eor	r1, r1
    212e:	2f 93       	push	r18
    2130:	3f 93       	push	r19
    2132:	4f 93       	push	r20
    2134:	5f 93       	push	r21
    2136:	6f 93       	push	r22
    2138:	7f 93       	push	r23
    213a:	8f 93       	push	r24
    213c:	9f 93       	push	r25
    213e:	af 93       	push	r26
    2140:	bf 93       	push	r27
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	// Получаем данные
	char IntResCharM = UDR0;
    2146:	2c b1       	in	r18, 0x0c	; 12
	// Тут мы их обрабатываем
	tmpFromModemBuf[tmpFromModemBufLen++] = IntResCharM; // прочитали символ
    2148:	80 91 c3 0b 	lds	r24, 0x0BC3
    214c:	90 91 c4 0b 	lds	r25, 0x0BC4
    2150:	fc 01       	movw	r30, r24
    2152:	eb 59       	subi	r30, 0x9B	; 155
    2154:	f6 4f       	sbci	r31, 0xF6	; 246
    2156:	20 83       	st	Z, r18
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	90 93 c4 0b 	sts	0x0BC4, r25
    215e:	80 93 c3 0b 	sts	0x0BC3, r24
	// строку считаем готовой если: или 0х0А, или закончился буфер чтения
	if ((tmpFromModemBufLen >= (MAX_BUF-5)) || (tmpFromModemBuf[tmpFromModemBufLen-1]==0x0A)) {
    2162:	81 39       	cpi	r24, 0x91	; 145
    2164:	91 05       	cpc	r25, r1
    2166:	2c f4       	brge	.+10     	; 0x2172 <__vector_18+0x52>
    2168:	2a 30       	cpi	r18, 0x0A	; 10
    216a:	e9 f4       	brne	.+58     	; 0x21a6 <__vector_18+0x86>
		if (tmpFromModemBufLen > 3) { // незачем нам пустые строчки
    216c:	84 30       	cpi	r24, 0x04	; 4
    216e:	91 05       	cpc	r25, r1
    2170:	b4 f0       	brlt	.+44     	; 0x219e <__vector_18+0x7e>
			//tmpFromModemBufLen -= 1; // переопределили длину строки
			tmpFromModemBuf[tmpFromModemBufLen-2] = 0; // нам в строке не нужны "црлф" - насильно закончили строку
    2172:	fc 01       	movw	r30, r24
    2174:	ed 59       	subi	r30, 0x9D	; 157
    2176:	f6 4f       	sbci	r31, 0xF6	; 246
    2178:	10 82       	st	Z, r1
			if (tmpFromModemBuf[tmpFromModemBufLen-3] == 0x0D) tmpFromModemBuf[tmpFromModemBufLen-3] = 0; // нам в строке не нужны "црлф" - насильно закончили строку
    217a:	fc 01       	movw	r30, r24
    217c:	ee 59       	subi	r30, 0x9E	; 158
    217e:	f6 4f       	sbci	r31, 0xF6	; 246
    2180:	80 81       	ld	r24, Z
    2182:	8d 30       	cpi	r24, 0x0D	; 13
    2184:	09 f4       	brne	.+2      	; 0x2188 <__vector_18+0x68>
    2186:	10 82       	st	Z, r1
			strncpy(PromFromModemBuf, tmpFromModemBuf, MAX_BUF-1);
    2188:	85 ec       	ldi	r24, 0xC5	; 197
    218a:	9b e0       	ldi	r25, 0x0B	; 11
    218c:	65 e6       	ldi	r22, 0x65	; 101
    218e:	79 e0       	ldi	r23, 0x09	; 9
    2190:	45 e9       	ldi	r20, 0x95	; 149
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
			tmp_flIsReaded = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 f5 0c 	sts	0x0CF5, r24
		}
		tmpFromModemBufLen = 0;
    219e:	10 92 c4 0b 	sts	0x0BC4, r1
    21a2:	10 92 c3 0b 	sts	0x0BC3, r1
	}
}
    21a6:	ff 91       	pop	r31
    21a8:	ef 91       	pop	r30
    21aa:	bf 91       	pop	r27
    21ac:	af 91       	pop	r26
    21ae:	9f 91       	pop	r25
    21b0:	8f 91       	pop	r24
    21b2:	7f 91       	pop	r23
    21b4:	6f 91       	pop	r22
    21b6:	5f 91       	pop	r21
    21b8:	4f 91       	pop	r20
    21ba:	3f 91       	pop	r19
    21bc:	2f 91       	pop	r18
    21be:	0f 90       	pop	r0
    21c0:	0b be       	out	0x3b, r0	; 59
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	0f 90       	pop	r0
    21c8:	1f 90       	pop	r1
    21ca:	18 95       	reti

000021cc <PutNumsAndSets>:
	IndSate = NewState;
}
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
void PutNumsAndSets(void) {
    21cc:	8f 92       	push	r8
    21ce:	9f 92       	push	r9
    21d0:	af 92       	push	r10
    21d2:	bf 92       	push	r11
    21d4:	cf 92       	push	r12
    21d6:	df 92       	push	r13
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	c0 5a       	subi	r28, 0xA0	; 160
    21ea:	d0 40       	sbci	r29, 0x00	; 0
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
	char tmpCh[MAX_BUF];
	char tmpStr[10];

		strncpy(tmpCh, "Setts: ", MAX_BUF-1);
    21f6:	8e 01       	movw	r16, r28
    21f8:	05 5f       	subi	r16, 0xF5	; 245
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	c8 01       	movw	r24, r16
    21fe:	60 e5       	ldi	r22, 0x50	; 80
    2200:	76 e0       	ldi	r23, 0x06	; 6
    2202:	45 e9       	ldi	r20, 0x95	; 149
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
		itoa(Settings.AlarmTime_s, tmpStr, 10);
    220a:	80 91 c9 08 	lds	r24, 0x08C9
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	7e 01       	movw	r14, r28
    2212:	08 94       	sec
    2214:	e1 1c       	adc	r14, r1
    2216:	f1 1c       	adc	r15, r1
    2218:	b7 01       	movw	r22, r14
    221a:	4a e0       	ldi	r20, 0x0A	; 10
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    2222:	c8 01       	movw	r24, r16
    2224:	b7 01       	movw	r22, r14
    2226:	45 e9       	ldi	r20, 0x95	; 149
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    222e:	c8 01       	movw	r24, r16
    2230:	68 e5       	ldi	r22, 0x58	; 88
    2232:	76 e0       	ldi	r23, 0x06	; 6
    2234:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		itoa(Settings.DInInversion, tmpStr, 10);
    2238:	80 91 c8 08 	lds	r24, 0x08C8
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	b7 01       	movw	r22, r14
    2240:	4a e0       	ldi	r20, 0x0A	; 10
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    2248:	c8 01       	movw	r24, r16
    224a:	b7 01       	movw	r22, r14
    224c:	45 e9       	ldi	r20, 0x95	; 149
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    2254:	c8 01       	movw	r24, r16
    2256:	6b e5       	ldi	r22, 0x5B	; 91
    2258:	76 e0       	ldi	r23, 0x06	; 6
    225a:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		PutPC(tmpCh);
    225e:	c8 01       	movw	r24, r16
    2260:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
    2264:	52 e0       	ldi	r21, 0x02	; 2
    2266:	c5 2e       	mov	r12, r21
    2268:	5b e0       	ldi	r21, 0x0B	; 11
    226a:	d5 2e       	mov	r13, r21
    226c:	46 e0       	ldi	r20, 0x06	; 6
    226e:	a4 2e       	mov	r10, r20
    2270:	b1 2c       	mov	r11, r1

	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		strncpy(tmpCh, PhoneNumber[CellNumber-cSettings].Number, MAX_BUF-1);
    2272:	36 e2       	ldi	r19, 0x26	; 38
    2274:	83 2e       	mov	r8, r19
    2276:	91 2c       	mov	r9, r1
    2278:	a8 9c       	mul	r10, r8
    227a:	b0 01       	movw	r22, r0
    227c:	a9 9c       	mul	r10, r9
    227e:	70 0d       	add	r23, r0
    2280:	b8 9c       	mul	r11, r8
    2282:	70 0d       	add	r23, r0
    2284:	11 24       	eor	r1, r1
    2286:	65 50       	subi	r22, 0x05	; 5
    2288:	76 4f       	sbci	r23, 0xF6	; 246
    228a:	c8 01       	movw	r24, r16
    228c:	45 e9       	ldi	r20, 0x95	; 149
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    2294:	c8 01       	movw	r24, r16
    2296:	68 e5       	ldi	r22, 0x58	; 88
    2298:	76 e0       	ldi	r23, 0x06	; 6
    229a:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		itoa(PhoneNumber[CellNumber-cSettings].IsActive, tmpStr, 10);
    229e:	f6 01       	movw	r30, r12
    22a0:	80 81       	ld	r24, Z
    22a2:	99 27       	eor	r25, r25
    22a4:	87 fd       	sbrc	r24, 7
    22a6:	90 95       	com	r25
    22a8:	b7 01       	movw	r22, r14
    22aa:	4a e0       	ldi	r20, 0x0A	; 10
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    22b2:	c8 01       	movw	r24, r16
    22b4:	b7 01       	movw	r22, r14
    22b6:	45 e9       	ldi	r20, 0x95	; 149
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    22be:	c8 01       	movw	r24, r16
    22c0:	68 e5       	ldi	r22, 0x58	; 88
    22c2:	76 e0       	ldi	r23, 0x06	; 6
    22c4:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		itoa(PhoneNumber[CellNumber-cSettings].Privilege, tmpStr, 10);
    22c8:	f6 01       	movw	r30, r12
    22ca:	81 81       	ldd	r24, Z+1	; 0x01
    22cc:	99 27       	eor	r25, r25
    22ce:	87 fd       	sbrc	r24, 7
    22d0:	90 95       	com	r25
    22d2:	b7 01       	movw	r22, r14
    22d4:	4a e0       	ldi	r20, 0x0A	; 10
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    22dc:	c8 01       	movw	r24, r16
    22de:	b7 01       	movw	r22, r14
    22e0:	45 e9       	ldi	r20, 0x95	; 149
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    22e8:	c8 01       	movw	r24, r16
    22ea:	68 e5       	ldi	r22, 0x58	; 88
    22ec:	76 e0       	ldi	r23, 0x06	; 6
    22ee:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		itoa(PhoneNumber[CellNumber-cSettings].Zones, tmpStr, 10);
    22f2:	f6 01       	movw	r30, r12
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	99 27       	eor	r25, r25
    22f8:	87 fd       	sbrc	r24, 7
    22fa:	90 95       	com	r25
    22fc:	b7 01       	movw	r22, r14
    22fe:	4a e0       	ldi	r20, 0x0A	; 10
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    2306:	c8 01       	movw	r24, r16
    2308:	b7 01       	movw	r22, r14
    230a:	45 e9       	ldi	r20, 0x95	; 149
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    2312:	c8 01       	movw	r24, r16
    2314:	68 e5       	ldi	r22, 0x58	; 88
    2316:	76 e0       	ldi	r23, 0x06	; 6
    2318:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    231c:	c8 01       	movw	r24, r16
    231e:	6b e5       	ldi	r22, 0x5B	; 91
    2320:	76 e0       	ldi	r23, 0x06	; 6
    2322:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		PutPC(tmpCh);
    2326:	c8 01       	movw	r24, r16
    2328:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
    232c:	08 94       	sec
    232e:	a1 1c       	adc	r10, r1
    2330:	b1 1c       	adc	r11, r1
    2332:	86 e2       	ldi	r24, 0x26	; 38
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	c8 0e       	add	r12, r24
    2338:	d9 1e       	adc	r13, r25
		itoa(Settings.DInInversion, tmpStr, 10);
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
		PutPC(tmpCh);

	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
    233a:	9c e0       	ldi	r25, 0x0C	; 12
    233c:	a9 16       	cp	r10, r25
    233e:	b1 04       	cpc	r11, r1
    2340:	09 f0       	breq	.+2      	; 0x2344 <PutNumsAndSets+0x178>
    2342:	9a cf       	rjmp	.-204    	; 0x2278 <PutNumsAndSets+0xac>
		strncat(tmpCh, ", ",  MAX_BUF-1);
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
		PutPC(tmpCh);
	}

		strncpy(tmpCh, "MinMaxT1: ", MAX_BUF-1);
    2344:	c8 01       	movw	r24, r16
    2346:	6e e5       	ldi	r22, 0x5E	; 94
    2348:	76 e0       	ldi	r23, 0x06	; 6
    234a:	45 e9       	ldi	r20, 0x95	; 149
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
		itoa(Terms[0].MINLim, tmpStr, 10);
    2352:	80 91 b1 0d 	lds	r24, 0x0DB1
    2356:	90 91 b2 0d 	lds	r25, 0x0DB2
    235a:	b7 01       	movw	r22, r14
    235c:	4a e0       	ldi	r20, 0x0A	; 10
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    2364:	c8 01       	movw	r24, r16
    2366:	b7 01       	movw	r22, r14
    2368:	45 e9       	ldi	r20, 0x95	; 149
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    2370:	c8 01       	movw	r24, r16
    2372:	68 e5       	ldi	r22, 0x58	; 88
    2374:	76 e0       	ldi	r23, 0x06	; 6
    2376:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		itoa(Terms[0].MAXLim, tmpStr, 10);
    237a:	80 91 b3 0d 	lds	r24, 0x0DB3
    237e:	90 91 b4 0d 	lds	r25, 0x0DB4
    2382:	b7 01       	movw	r22, r14
    2384:	4a e0       	ldi	r20, 0x0A	; 10
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    238c:	c8 01       	movw	r24, r16
    238e:	b7 01       	movw	r22, r14
    2390:	45 e9       	ldi	r20, 0x95	; 149
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    2398:	c8 01       	movw	r24, r16
    239a:	6b e5       	ldi	r22, 0x5B	; 91
    239c:	76 e0       	ldi	r23, 0x06	; 6
    239e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		PutPC(tmpCh);
    23a2:	c8 01       	movw	r24, r16
    23a4:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
		strncpy(tmpCh, "MinMaxT2: ", MAX_BUF-1);
    23a8:	c8 01       	movw	r24, r16
    23aa:	69 e6       	ldi	r22, 0x69	; 105
    23ac:	76 e0       	ldi	r23, 0x06	; 6
    23ae:	45 e9       	ldi	r20, 0x95	; 149
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <strncpy>
		itoa(Terms[1].MINLim, tmpStr, 10);
    23b6:	80 91 f1 0d 	lds	r24, 0x0DF1
    23ba:	90 91 f2 0d 	lds	r25, 0x0DF2
    23be:	b7 01       	movw	r22, r14
    23c0:	4a e0       	ldi	r20, 0x0A	; 10
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    23c8:	c8 01       	movw	r24, r16
    23ca:	b7 01       	movw	r22, r14
    23cc:	45 e9       	ldi	r20, 0x95	; 149
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    23d4:	c8 01       	movw	r24, r16
    23d6:	68 e5       	ldi	r22, 0x58	; 88
    23d8:	76 e0       	ldi	r23, 0x06	; 6
    23da:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		itoa(Terms[1].MAXLim, tmpStr, 10);
    23de:	80 91 f3 0d 	lds	r24, 0x0DF3
    23e2:	90 91 f4 0d 	lds	r25, 0x0DF4
    23e6:	b7 01       	movw	r22, r14
    23e8:	4a e0       	ldi	r20, 0x0A	; 10
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    23f0:	c8 01       	movw	r24, r16
    23f2:	b7 01       	movw	r22, r14
    23f4:	45 e9       	ldi	r20, 0x95	; 149
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strncat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    23fc:	c8 01       	movw	r24, r16
    23fe:	6b e5       	ldi	r22, 0x5B	; 91
    2400:	76 e0       	ldi	r23, 0x06	; 6
    2402:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		PutPC(tmpCh);
    2406:	c8 01       	movw	r24, r16
    2408:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>

}
    240c:	c0 56       	subi	r28, 0x60	; 96
    240e:	df 4f       	sbci	r29, 0xFF	; 255
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	bf 90       	pop	r11
    242c:	af 90       	pop	r10
    242e:	9f 90       	pop	r9
    2430:	8f 90       	pop	r8
    2432:	08 95       	ret

00002434 <ProcessKey>:

//------------------------------------------------------------------------------------
//unsigned char RetVal = 0;
char ProcessKey(char Key) {
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	0f 92       	push	r0
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	volatile char RetProcessKey = 0;
    243e:	19 82       	std	Y+1, r1	; 0x01
	switch (Key) {
    2440:	86 33       	cpi	r24, 0x36	; 54
    2442:	91 f0       	breq	.+36     	; 0x2468 <ProcessKey+0x34>
    2444:	87 33       	cpi	r24, 0x37	; 55
    2446:	44 f4       	brge	.+16     	; 0x2458 <ProcessKey+0x24>
    2448:	8d 32       	cpi	r24, 0x2D	; 45
    244a:	59 f0       	breq	.+22     	; 0x2462 <ProcessKey+0x2e>
    244c:	81 33       	cpi	r24, 0x31	; 49
    244e:	f9 f1       	breq	.+126    	; 0x24ce <ProcessKey+0x9a>
    2450:	8a 32       	cpi	r24, 0x2A	; 42
    2452:	09 f0       	breq	.+2      	; 0x2456 <ProcessKey+0x22>
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <ProcessKey+0xa0>
    2456:	18 c0       	rjmp	.+48     	; 0x2488 <ProcessKey+0x54>
    2458:	87 33       	cpi	r24, 0x37	; 55
    245a:	61 f0       	breq	.+24     	; 0x2474 <ProcessKey+0x40>
    245c:	80 36       	cpi	r24, 0x60	; 96
    245e:	d1 f5       	brne	.+116    	; 0x24d4 <ProcessKey+0xa0>
    2460:	31 c0       	rjmp	.+98     	; 0x24c4 <ProcessKey+0x90>
		case '-': 
			PutNumsAndSets();
    2462:	0e 94 e6 10 	call	0x21cc	; 0x21cc <PutNumsAndSets>
    2466:	36 c0       	rjmp	.+108    	; 0x24d4 <ProcessKey+0xa0>
					PutPC("\n\r");
*/
		break;
		
		case '6':
			otlTerm--;
    2468:	80 91 a8 06 	lds	r24, 0x06A8
    246c:	90 91 a9 06 	lds	r25, 0x06A9
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	05 c0       	rjmp	.+10     	; 0x247e <ProcessKey+0x4a>
		break;
		case '7':
			otlTerm++;
    2474:	80 91 a8 06 	lds	r24, 0x06A8
    2478:	90 91 a9 06 	lds	r25, 0x06A9
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	90 93 a9 06 	sts	0x06A9, r25
    2482:	80 93 a8 06 	sts	0x06A8, r24
    2486:	26 c0       	rjmp	.+76     	; 0x24d4 <ProcessKey+0xa0>
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
    2488:	90 91 af 0d 	lds	r25, 0x0DAF
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    248c:	80 91 9b 00 	lds	r24, 0x009B
    2490:	85 ff       	sbrs	r24, 5
    2492:	fc cf       	rjmp	.-8      	; 0x248c <ProcessKey+0x58>
		case '7':
			otlTerm++;
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
    2494:	90 5d       	subi	r25, 0xD0	; 208
// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2496:	90 93 9c 00 	sts	0x009C, r25
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    249a:	80 91 9b 00 	lds	r24, 0x009B
    249e:	85 ff       	sbrs	r24, 5
    24a0:	fc cf       	rjmp	.-8      	; 0x249a <ProcessKey+0x66>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    24a2:	80 e2       	ldi	r24, 0x20	; 32
    24a4:	80 93 9c 00 	sts	0x009C, r24
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
			PutPCChar(0x20);
			PutPCChar(Terms[1].swTermAlg+0x30);
    24a8:	90 91 ef 0d 	lds	r25, 0x0DEF
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    24ac:	80 91 9b 00 	lds	r24, 0x009B
    24b0:	85 ff       	sbrs	r24, 5
    24b2:	fc cf       	rjmp	.-8      	; 0x24ac <ProcessKey+0x78>
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
			PutPCChar(0x20);
			PutPCChar(Terms[1].swTermAlg+0x30);
    24b4:	90 5d       	subi	r25, 0xD0	; 208
// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    24b6:	90 93 9c 00 	sts	0x009C, r25
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
			PutPCChar(0x20);
			PutPCChar(Terms[1].swTermAlg+0x30);
			PutPC("\n\r");
    24ba:	8b e5       	ldi	r24, 0x5B	; 91
    24bc:	96 e0       	ldi	r25, 0x06	; 6
    24be:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <PutPC>
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <ProcessKey+0xa0>
		case '5': PutModem("at+ipr=115200"); RetProcessKey = 1;
		break;
		case '9': //ModemOn(); RetProcessKey = 1;
		break;
		*/
		case '`': ModemOnOff(); RetProcessKey = 1;
    24c4:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <ModemOnOff>
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <ProcessKey+0xa0>
		break;
		case '1': 
			flIsReaded = 2;
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	80 93 64 09 	sts	0x0964, r24
		break;
	}
	return RetProcessKey;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <PutPCCharsN>:
		str++;
	}
}
//------------------------------------------------------------------------------------

void PutPCCharsN(char *str, int Count) {
    24de:	8f 92       	push	r8
    24e0:	9f 92       	push	r9
    24e2:	af 92       	push	r10
    24e4:	bf 92       	push	r11
    24e6:	cf 92       	push	r12
    24e8:	df 92       	push	r13
    24ea:	ef 92       	push	r14
    24ec:	ff 92       	push	r15
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <PutPCCharsN+0x1a>
    24f8:	0f 92       	push	r0
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	6b 01       	movw	r12, r22
    2500:	7c 01       	movw	r14, r24
    2502:	00 e0       	ldi	r16, 0x00	; 0
    2504:	10 e0       	ldi	r17, 0x00	; 0
	char tmpCH1[3];
	for (int i_PutPCCharsN=0; i_PutPCCharsN<Count; ++i_PutPCCharsN) {
		sprintf(tmpCH1, "%02X", str[i_PutPCCharsN]);
    2506:	4e 01       	movw	r8, r28
    2508:	08 94       	sec
    250a:	81 1c       	adc	r8, r1
    250c:	91 1c       	adc	r9, r1
    250e:	64 e7       	ldi	r22, 0x74	; 116
    2510:	a6 2e       	mov	r10, r22
    2512:	66 e0       	ldi	r22, 0x06	; 6
    2514:	b6 2e       	mov	r11, r22
    2516:	34 c0       	rjmp	.+104    	; 0x2580 <PutPCCharsN+0xa2>
    2518:	00 d0       	rcall	.+0      	; 0x251a <PutPCCharsN+0x3c>
    251a:	00 d0       	rcall	.+0      	; 0x251c <PutPCCharsN+0x3e>
    251c:	00 d0       	rcall	.+0      	; 0x251e <PutPCCharsN+0x40>
    251e:	ed b7       	in	r30, 0x3d	; 61
    2520:	fe b7       	in	r31, 0x3e	; 62
    2522:	31 96       	adiw	r30, 0x01	; 1
    2524:	ad b7       	in	r26, 0x3d	; 61
    2526:	be b7       	in	r27, 0x3e	; 62
    2528:	12 96       	adiw	r26, 0x02	; 2
    252a:	9c 92       	st	X, r9
    252c:	8e 92       	st	-X, r8
    252e:	11 97       	sbiw	r26, 0x01	; 1
    2530:	b3 82       	std	Z+3, r11	; 0x03
    2532:	a2 82       	std	Z+2, r10	; 0x02
    2534:	d7 01       	movw	r26, r14
    2536:	8c 91       	ld	r24, X
    2538:	99 27       	eor	r25, r25
    253a:	87 fd       	sbrc	r24, 7
    253c:	90 95       	com	r25
    253e:	95 83       	std	Z+5, r25	; 0x05
    2540:	84 83       	std	Z+4, r24	; 0x04
    2542:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <sprintf>
		USART1_Transmit(tmpCH1[0]);
    2546:	99 81       	ldd	r25, Y+1	; 0x01
    2548:	2d b7       	in	r18, 0x3d	; 61
    254a:	3e b7       	in	r19, 0x3e	; 62
    254c:	2a 5f       	subi	r18, 0xFA	; 250
    254e:	3f 4f       	sbci	r19, 0xFF	; 255
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	3e bf       	out	0x3e, r19	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	2d bf       	out	0x3d, r18	; 61
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    255a:	80 91 9b 00 	lds	r24, 0x009B
    255e:	85 ff       	sbrs	r24, 5
    2560:	fc cf       	rjmp	.-8      	; 0x255a <PutPCCharsN+0x7c>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2562:	90 93 9c 00 	sts	0x009C, r25
void PutPCCharsN(char *str, int Count) {
	char tmpCH1[3];
	for (int i_PutPCCharsN=0; i_PutPCCharsN<Count; ++i_PutPCCharsN) {
		sprintf(tmpCH1, "%02X", str[i_PutPCCharsN]);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    2568:	80 91 9b 00 	lds	r24, 0x009B
    256c:	85 ff       	sbrs	r24, 5
    256e:	fc cf       	rjmp	.-8      	; 0x2568 <PutPCCharsN+0x8a>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2570:	90 93 9c 00 	sts	0x009C, r25
}
//------------------------------------------------------------------------------------

void PutPCCharsN(char *str, int Count) {
	char tmpCH1[3];
	for (int i_PutPCCharsN=0; i_PutPCCharsN<Count; ++i_PutPCCharsN) {
    2574:	0f 5f       	subi	r16, 0xFF	; 255
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	e8 0e       	add	r14, r24
    257e:	f9 1e       	adc	r15, r25
    2580:	0c 15       	cp	r16, r12
    2582:	1d 05       	cpc	r17, r13
    2584:	4c f2       	brlt	.-110    	; 0x2518 <PutPCCharsN+0x3a>
		sprintf(tmpCH1, "%02X", str[i_PutPCCharsN]);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
		str++;
	}
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	9f 90       	pop	r9
    25a2:	8f 90       	pop	r8
    25a4:	08 95       	ret

000025a6 <PutPCChars>:
		USART1_Transmit(*str);
		str++;
	}
}

void PutPCChars(char *str) {
    25a6:	cf 92       	push	r12
    25a8:	df 92       	push	r13
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	0f 93       	push	r16
    25b0:	1f 93       	push	r17
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <PutPCChars+0x12>
    25b8:	0f 92       	push	r0
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	8c 01       	movw	r16, r24
	char tmpCH1[3];
	while (*str) {
		sprintf(tmpCH1, "%02X", *str);
    25c0:	6e 01       	movw	r12, r28
    25c2:	08 94       	sec
    25c4:	c1 1c       	adc	r12, r1
    25c6:	d1 1c       	adc	r13, r1
    25c8:	74 e7       	ldi	r23, 0x74	; 116
    25ca:	e7 2e       	mov	r14, r23
    25cc:	76 e0       	ldi	r23, 0x06	; 6
    25ce:	f7 2e       	mov	r15, r23
    25d0:	2d c0       	rjmp	.+90     	; 0x262c <PutPCChars+0x86>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <PutPCChars+0x2e>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <PutPCChars+0x30>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <PutPCChars+0x32>
    25d8:	ed b7       	in	r30, 0x3d	; 61
    25da:	fe b7       	in	r31, 0x3e	; 62
    25dc:	31 96       	adiw	r30, 0x01	; 1
    25de:	ad b7       	in	r26, 0x3d	; 61
    25e0:	be b7       	in	r27, 0x3e	; 62
    25e2:	12 96       	adiw	r26, 0x02	; 2
    25e4:	dc 92       	st	X, r13
    25e6:	ce 92       	st	-X, r12
    25e8:	11 97       	sbiw	r26, 0x01	; 1
    25ea:	f3 82       	std	Z+3, r15	; 0x03
    25ec:	e2 82       	std	Z+2, r14	; 0x02
    25ee:	99 27       	eor	r25, r25
    25f0:	87 fd       	sbrc	r24, 7
    25f2:	90 95       	com	r25
    25f4:	95 83       	std	Z+5, r25	; 0x05
    25f6:	84 83       	std	Z+4, r24	; 0x04
    25f8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <sprintf>
		USART1_Transmit(tmpCH1[0]);
    25fc:	99 81       	ldd	r25, Y+1	; 0x01
    25fe:	ed b7       	in	r30, 0x3d	; 61
    2600:	fe b7       	in	r31, 0x3e	; 62
    2602:	36 96       	adiw	r30, 0x06	; 6
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	fe bf       	out	0x3e, r31	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	ed bf       	out	0x3d, r30	; 61
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    260e:	80 91 9b 00 	lds	r24, 0x009B
    2612:	85 ff       	sbrs	r24, 5
    2614:	fc cf       	rjmp	.-8      	; 0x260e <PutPCChars+0x68>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2616:	90 93 9c 00 	sts	0x009C, r25
void PutPCChars(char *str) {
	char tmpCH1[3];
	while (*str) {
		sprintf(tmpCH1, "%02X", *str);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    261c:	80 91 9b 00 	lds	r24, 0x009B
    2620:	85 ff       	sbrs	r24, 5
    2622:	fc cf       	rjmp	.-8      	; 0x261c <PutPCChars+0x76>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2624:	90 93 9c 00 	sts	0x009C, r25
	char tmpCH1[3];
	while (*str) {
		sprintf(tmpCH1, "%02X", *str);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
		str++;
    2628:	0f 5f       	subi	r16, 0xFF	; 255
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void PutPCChars(char *str) {
	char tmpCH1[3];
	while (*str) {
    262c:	d8 01       	movw	r26, r16
    262e:	8c 91       	ld	r24, X
    2630:	88 23       	and	r24, r24
    2632:	79 f6       	brne	.-98     	; 0x25d2 <PutPCChars+0x2c>
		sprintf(tmpCH1, "%02X", *str);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
		str++;
	}
}
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	ff 90       	pop	r15
    2644:	ef 90       	pop	r14
    2646:	df 90       	pop	r13
    2648:	cf 90       	pop	r12
    264a:	08 95       	ret

0000264c <therm_reset>:

//------------------------------------------------------------------------------------

uint8_t therm_reset(char TermNum) {
	uint8_t Ret;
	if (TermNum==0) {
    264c:	88 23       	and	r24, r24
    264e:	71 f5       	brne	.+92     	; 0x26ac <therm_reset+0x60>
		//Pull line low and wait for 480uS
		THERM_LOW0();
    2650:	80 91 62 00 	lds	r24, 0x0062
    2654:	8e 7f       	andi	r24, 0xFE	; 254
    2656:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE0();
    265a:	80 91 61 00 	lds	r24, 0x0061
    265e:	81 60       	ori	r24, 0x01	; 1
    2660:	80 93 61 00 	sts	0x0061, r24
    2664:	8a eb       	ldi	r24, 0xBA	; 186
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	01 c0       	rjmp	.+2      	; 0x266c <therm_reset+0x20>

//extern inline __attribute__((gnu_inline)) void therm_delay(uint16_t delay);
//extern inline __attribute__((always_inline)) void therm_delay(uint16_t delay);

inline __attribute__((always_inline)) void therm_delay(uint16_t delay) {
	while (delay--) asm volatile("nop");
    266a:	00 00       	nop
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	2f ef       	ldi	r18, 0xFF	; 255
    2670:	8f 3f       	cpi	r24, 0xFF	; 255
    2672:	92 07       	cpc	r25, r18
    2674:	d1 f7       	brne	.-12     	; 0x266a <therm_reset+0x1e>
		therm_delay(us(480));
		//Release line and wait for 60uS
		THERM_INPUT_MODE0();
    2676:	80 91 61 00 	lds	r24, 0x0061
    267a:	8e 7f       	andi	r24, 0xFE	; 254
    267c:	80 93 61 00 	sts	0x0061, r24
    2680:	87 e3       	ldi	r24, 0x37	; 55
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <therm_reset+0x3c>
    2686:	00 00       	nop
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	2f ef       	ldi	r18, 0xFF	; 255
    268c:	8f 3f       	cpi	r24, 0xFF	; 255
    268e:	92 07       	cpc	r25, r18
    2690:	d1 f7       	brne	.-12     	; 0x2686 <therm_reset+0x3a>
		therm_delay(us(60));
		//Store line value and wait until the completion of 480uS period
		Ret=(THERM_PIN & (1<<THERM_DQ0));
    2692:	80 b1       	in	r24, 0x00	; 0
    2694:	23 e8       	ldi	r18, 0x83	; 131
    2696:	31 e0       	ldi	r19, 0x01	; 1
    2698:	01 c0       	rjmp	.+2      	; 0x269c <therm_reset+0x50>
    269a:	00 00       	nop
    269c:	21 50       	subi	r18, 0x01	; 1
    269e:	30 40       	sbci	r19, 0x00	; 0
    26a0:	9f ef       	ldi	r25, 0xFF	; 255
    26a2:	2f 3f       	cpi	r18, 0xFF	; 255
    26a4:	39 07       	cpc	r19, r25
    26a6:	c9 f7       	brne	.-14     	; 0x269a <therm_reset+0x4e>
    26a8:	81 70       	andi	r24, 0x01	; 1
    26aa:	08 95       	ret
		therm_delay(us(420));
	}
	else {
		//Pull line low and wait for 480uS
		THERM_LOW1();
    26ac:	80 91 62 00 	lds	r24, 0x0062
    26b0:	8d 7f       	andi	r24, 0xFD	; 253
    26b2:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE1();
    26b6:	80 91 61 00 	lds	r24, 0x0061
    26ba:	82 60       	ori	r24, 0x02	; 2
    26bc:	80 93 61 00 	sts	0x0061, r24
    26c0:	8a eb       	ldi	r24, 0xBA	; 186
    26c2:	91 e0       	ldi	r25, 0x01	; 1
    26c4:	01 c0       	rjmp	.+2      	; 0x26c8 <therm_reset+0x7c>
    26c6:	00 00       	nop
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	2f ef       	ldi	r18, 0xFF	; 255
    26cc:	8f 3f       	cpi	r24, 0xFF	; 255
    26ce:	92 07       	cpc	r25, r18
    26d0:	d1 f7       	brne	.-12     	; 0x26c6 <therm_reset+0x7a>
		therm_delay(us(480));
		//Release line and wait for 60uS
		THERM_INPUT_MODE1();
    26d2:	80 91 61 00 	lds	r24, 0x0061
    26d6:	8d 7f       	andi	r24, 0xFD	; 253
    26d8:	80 93 61 00 	sts	0x0061, r24
    26dc:	87 e3       	ldi	r24, 0x37	; 55
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <therm_reset+0x98>
    26e2:	00 00       	nop
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	2f ef       	ldi	r18, 0xFF	; 255
    26e8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ea:	92 07       	cpc	r25, r18
    26ec:	d1 f7       	brne	.-12     	; 0x26e2 <therm_reset+0x96>
		therm_delay(us(60));
		//Store line value and wait until the completion of 480uS period
		Ret=(THERM_PIN & (1<<THERM_DQ1));
    26ee:	80 b1       	in	r24, 0x00	; 0
    26f0:	23 e8       	ldi	r18, 0x83	; 131
    26f2:	31 e0       	ldi	r19, 0x01	; 1
    26f4:	01 c0       	rjmp	.+2      	; 0x26f8 <therm_reset+0xac>
    26f6:	00 00       	nop
    26f8:	21 50       	subi	r18, 0x01	; 1
    26fa:	30 40       	sbci	r19, 0x00	; 0
    26fc:	9f ef       	ldi	r25, 0xFF	; 255
    26fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2700:	39 07       	cpc	r19, r25
    2702:	c9 f7       	brne	.-14     	; 0x26f6 <therm_reset+0xaa>
    2704:	82 70       	andi	r24, 0x02	; 2
		therm_delay(us(420));
	}
	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return Ret;
}
    2706:	08 95       	ret

00002708 <therm_write_bit>:
//------------------------------------------------------------------------------------

void therm_write_bit(uint8_t bit, char TermNum) {
    2708:	98 2f       	mov	r25, r24
	if (TermNum==0) {
    270a:	66 23       	and	r22, r22
    270c:	f1 f4       	brne	.+60     	; 0x274a <therm_write_bit+0x42>
		//Pull line low for 1uS
		THERM_LOW0();
    270e:	80 91 62 00 	lds	r24, 0x0062
    2712:	8e 7f       	andi	r24, 0xFE	; 254
    2714:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE0();
    2718:	80 91 61 00 	lds	r24, 0x0061
    271c:	81 60       	ori	r24, 0x01	; 1
    271e:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//If we want to write 1, release the line (if not will keep low)
		if(bit) THERM_INPUT_MODE0();
    2722:	99 23       	and	r25, r25
    2724:	29 f0       	breq	.+10     	; 0x2730 <therm_write_bit+0x28>
    2726:	80 91 61 00 	lds	r24, 0x0061
    272a:	8e 7f       	andi	r24, 0xFE	; 254
    272c:	80 93 61 00 	sts	0x0061, r24
    2730:	87 e3       	ldi	r24, 0x37	; 55
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <therm_write_bit+0x30>
    2736:	00 00       	nop
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	2f ef       	ldi	r18, 0xFF	; 255
    273c:	8f 3f       	cpi	r24, 0xFF	; 255
    273e:	92 07       	cpc	r25, r18
    2740:	d1 f7       	brne	.-12     	; 0x2736 <therm_write_bit+0x2e>
		//Wait for 60uS and release the line
		therm_delay(us(60));
		THERM_INPUT_MODE0();
    2742:	80 91 61 00 	lds	r24, 0x0061
    2746:	8e 7f       	andi	r24, 0xFE	; 254
    2748:	1d c0       	rjmp	.+58     	; 0x2784 <therm_write_bit+0x7c>
	}
	else {
		//Pull line low for 1uS
		THERM_LOW1();
    274a:	80 91 62 00 	lds	r24, 0x0062
    274e:	8d 7f       	andi	r24, 0xFD	; 253
    2750:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE1();
    2754:	80 91 61 00 	lds	r24, 0x0061
    2758:	82 60       	ori	r24, 0x02	; 2
    275a:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//If we want to write 1, release the line (if not will keep low)
		if(bit) THERM_INPUT_MODE1();
    275e:	99 23       	and	r25, r25
    2760:	29 f0       	breq	.+10     	; 0x276c <therm_write_bit+0x64>
    2762:	80 91 61 00 	lds	r24, 0x0061
    2766:	8d 7f       	andi	r24, 0xFD	; 253
    2768:	80 93 61 00 	sts	0x0061, r24
    276c:	87 e3       	ldi	r24, 0x37	; 55
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <therm_write_bit+0x6c>
    2772:	00 00       	nop
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	2f ef       	ldi	r18, 0xFF	; 255
    2778:	8f 3f       	cpi	r24, 0xFF	; 255
    277a:	92 07       	cpc	r25, r18
    277c:	d1 f7       	brne	.-12     	; 0x2772 <therm_write_bit+0x6a>
		//Wait for 60uS and release the line
		therm_delay(us(60));
		THERM_INPUT_MODE1();
    277e:	80 91 61 00 	lds	r24, 0x0061
    2782:	8d 7f       	andi	r24, 0xFD	; 253
    2784:	80 93 61 00 	sts	0x0061, r24
    2788:	08 95       	ret

0000278a <therm_read_bit>:
}
//------------------------------------------------------------------------------------

uint8_t therm_read_bit(char TermNum) {
	uint8_t bit=0;
	if (TermNum==0) {
    278a:	88 23       	and	r24, r24
    278c:	29 f5       	brne	.+74     	; 0x27d8 <therm_read_bit+0x4e>
		//Pull line low for 1uS
		THERM_LOW0();
    278e:	80 91 62 00 	lds	r24, 0x0062
    2792:	8e 7f       	andi	r24, 0xFE	; 254
    2794:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE0();
    2798:	80 91 61 00 	lds	r24, 0x0061
    279c:	81 60       	ori	r24, 0x01	; 1
    279e:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//Release line and wait for 14uS
		THERM_INPUT_MODE0();
    27a2:	80 91 61 00 	lds	r24, 0x0061
    27a6:	8e 7f       	andi	r24, 0xFE	; 254
    27a8:	80 93 61 00 	sts	0x0061, r24
    27ac:	8c e0       	ldi	r24, 0x0C	; 12
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <therm_read_bit+0x2a>
    27b2:	00 00       	nop
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	2f ef       	ldi	r18, 0xFF	; 255
    27b8:	8f 3f       	cpi	r24, 0xFF	; 255
    27ba:	92 07       	cpc	r25, r18
    27bc:	d1 f7       	brne	.-12     	; 0x27b2 <therm_read_bit+0x28>
		therm_delay(us(14));
		//Read line value
		if(THERM_PIN&(1<<THERM_DQ0)) bit=1;
    27be:	80 b1       	in	r24, 0x00	; 0
    27c0:	29 e2       	ldi	r18, 0x29	; 41
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <therm_read_bit+0x3e>
    27c6:	00 00       	nop
    27c8:	21 50       	subi	r18, 0x01	; 1
    27ca:	30 40       	sbci	r19, 0x00	; 0
    27cc:	9f ef       	ldi	r25, 0xFF	; 255
    27ce:	2f 3f       	cpi	r18, 0xFF	; 255
    27d0:	39 07       	cpc	r19, r25
    27d2:	c9 f7       	brne	.-14     	; 0x27c6 <therm_read_bit+0x3c>
    27d4:	81 70       	andi	r24, 0x01	; 1
    27d6:	08 95       	ret
		//Wait for 45uS to end and return read value
		therm_delay(us(45));
	}
	else {
		//Pull line low for 1uS
		THERM_LOW1();
    27d8:	80 91 62 00 	lds	r24, 0x0062
    27dc:	8d 7f       	andi	r24, 0xFD	; 253
    27de:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE1();
    27e2:	80 91 61 00 	lds	r24, 0x0061
    27e6:	82 60       	ori	r24, 0x02	; 2
    27e8:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//Release line and wait for 14uS
		THERM_INPUT_MODE1();
    27ec:	80 91 61 00 	lds	r24, 0x0061
    27f0:	8d 7f       	andi	r24, 0xFD	; 253
    27f2:	80 93 61 00 	sts	0x0061, r24
    27f6:	8c e0       	ldi	r24, 0x0C	; 12
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <therm_read_bit+0x74>
    27fc:	00 00       	nop
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	2f ef       	ldi	r18, 0xFF	; 255
    2802:	8f 3f       	cpi	r24, 0xFF	; 255
    2804:	92 07       	cpc	r25, r18
    2806:	d1 f7       	brne	.-12     	; 0x27fc <therm_read_bit+0x72>
		therm_delay(us(14));
		//Read line value
		if(THERM_PIN&(1<<THERM_DQ1)) bit=1;
    2808:	80 b1       	in	r24, 0x00	; 0
    280a:	29 e2       	ldi	r18, 0x29	; 41
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <therm_read_bit+0x88>
    2810:	00 00       	nop
    2812:	21 50       	subi	r18, 0x01	; 1
    2814:	30 40       	sbci	r19, 0x00	; 0
    2816:	9f ef       	ldi	r25, 0xFF	; 255
    2818:	2f 3f       	cpi	r18, 0xFF	; 255
    281a:	39 07       	cpc	r19, r25
    281c:	c9 f7       	brne	.-14     	; 0x2810 <therm_read_bit+0x86>
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	96 95       	lsr	r25
    2822:	87 95       	ror	r24
    2824:	81 70       	andi	r24, 0x01	; 1
		//Wait for 45uS to end and return read value
		therm_delay(us(45));
	}
	return bit;
}
    2826:	08 95       	ret

00002828 <therm_read_byte>:
//------------------------------------------------------------------------------------

uint8_t therm_read_byte(char TermNum) {
    2828:	ff 92       	push	r15
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	f8 2e       	mov	r15, r24
    2830:	08 e0       	ldi	r16, 0x08	; 8
    2832:	10 e0       	ldi	r17, 0x00	; 0
    2834:	0a c0       	rjmp	.+20     	; 0x284a <therm_read_byte+0x22>
	uint8_t i=8, n=0;
	while(i--){
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit(TermNum)<<7);
    2836:	8f 2d       	mov	r24, r15
    2838:	0e 94 c5 13 	call	0x278a	; 0x278a <therm_read_bit>
    283c:	91 2f       	mov	r25, r17
    283e:	96 95       	lsr	r25
    2840:	18 2f       	mov	r17, r24
    2842:	17 95       	ror	r17
    2844:	11 27       	eor	r17, r17
    2846:	17 95       	ror	r17
    2848:	19 2b       	or	r17, r25
}
//------------------------------------------------------------------------------------

uint8_t therm_read_byte(char TermNum) {
	uint8_t i=8, n=0;
	while(i--){
    284a:	01 50       	subi	r16, 0x01	; 1
    284c:	a0 f7       	brcc	.-24     	; 0x2836 <therm_read_byte+0xe>
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit(TermNum)<<7);
	}
	return n;
}
    284e:	81 2f       	mov	r24, r17
    2850:	1f 91       	pop	r17
    2852:	0f 91       	pop	r16
    2854:	ff 90       	pop	r15
    2856:	08 95       	ret

00002858 <therm_write_byte>:
//------------------------------------------------------------------------------------

void therm_write_byte(uint8_t byte, char TermNum) {
    2858:	ff 92       	push	r15
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    285e:	08 2f       	mov	r16, r24
    2860:	f6 2e       	mov	r15, r22
    2862:	18 e0       	ldi	r17, 0x08	; 8
    2864:	06 c0       	rjmp	.+12     	; 0x2872 <therm_write_byte+0x1a>
	uint8_t i=8;
	while(i--){
		//Write actual bit and shift one position right to make
		//the next bit ready
		therm_write_bit(byte&1, TermNum);
    2866:	80 2f       	mov	r24, r16
    2868:	81 70       	andi	r24, 0x01	; 1
    286a:	6f 2d       	mov	r22, r15
    286c:	0e 94 84 13 	call	0x2708	; 0x2708 <therm_write_bit>
		byte>>=1;
    2870:	06 95       	lsr	r16
}
//------------------------------------------------------------------------------------

void therm_write_byte(uint8_t byte, char TermNum) {
	uint8_t i=8;
	while(i--){
    2872:	11 50       	subi	r17, 0x01	; 1
    2874:	c0 f7       	brcc	.-16     	; 0x2866 <therm_write_byte+0xe>
		//Write actual bit and shift one position right to make
		//the next bit ready
		therm_write_bit(byte&1, TermNum);
		byte>>=1;
	}
}
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	ff 90       	pop	r15
    287c:	08 95       	ret

0000287e <TermSirenaOn>:
*/
//------------------------------------------------------------------------------------

// включить сирену термометра
void TermSirenaOn(void) {
	DOuts = DOuts & 0b10111111; 
    287e:	80 91 4b 02 	lds	r24, 0x024B
    2882:	8f 7b       	andi	r24, 0xBF	; 191
    2884:	80 93 4b 02 	sts	0x024B, r24
}
    2888:	08 95       	ret

0000288a <TermSirenaOff>:
//------------------------------------------------------------------------------------

// выключить сирену термометра
void TermSirenaOff(void) {
	DOuts = DOuts | 0b01000000; 
    288a:	80 91 4b 02 	lds	r24, 0x024B
    288e:	80 64       	ori	r24, 0x40	; 64
    2890:	80 93 4b 02 	sts	0x024B, r24
}
    2894:	08 95       	ret

00002896 <TermInit>:
		break;
	}
}
//------------------------------------------------------------------------------------

void TermInit (void) {
    2896:	ef ea       	ldi	r30, 0xAF	; 175
    2898:	fd e0       	ldi	r31, 0x0D	; 13
    289a:	df 01       	movw	r26, r30
    289c:	9b 96       	adiw	r26, 0x2b	; 43
		Terms[i].flOtkaz = 0;
		Terms[i].OtkazCount = 0;
		Terms[i].OldOtkazCount = 0;
		Terms[i].CRCOtkazCount = 0;
		Terms[i].OldCRCOtkazCount = 0;
		Terms[i].MINLim = 23;
    289e:	27 e1       	ldi	r18, 0x17	; 23
    28a0:	30 e0       	ldi	r19, 0x00	; 0
		Terms[i].MAXLim = 25;
    28a2:	89 e1       	ldi	r24, 0x19	; 25
    28a4:	90 e0       	ldi	r25, 0x00	; 0
		Terms[i].trigMINLim = 0;
		Terms[i].trigMAXLim = 0;
		Terms[i].trigOtkaz = 0;
		Terms[i].trigCRCOtkaz = 0;
		Terms[i].flEnable = 1;
    28a6:	41 e0       	ldi	r20, 0x01	; 1
}
//------------------------------------------------------------------------------------

void TermInit (void) {
	for (int i=0; i<THERM_COUNT; ++i) {
		Terms[i].swTermAlg = cswIdle;
    28a8:	11 82       	std	Z+1, r1	; 0x01
    28aa:	10 82       	st	Z, r1
		Terms[i].flIsMINLim = 0;
    28ac:	17 82       	std	Z+7, r1	; 0x07
		Terms[i].flIsMAXLim = 0;
    28ae:	10 86       	std	Z+8, r1	; 0x08
		Terms[i].flOldIsMINLim = 0;
    28b0:	11 86       	std	Z+9, r1	; 0x09
		Terms[i].flOldIsMAXLim = 0;
    28b2:	12 86       	std	Z+10, r1	; 0x0a
		Terms[i].flOtkaz = 0;
    28b4:	1c 92       	st	X, r1
		Terms[i].OtkazCount = 0;
    28b6:	12 96       	adiw	r26, 0x02	; 2
    28b8:	1c 92       	st	X, r1
    28ba:	12 97       	sbiw	r26, 0x02	; 2
		Terms[i].OldOtkazCount = 0;
    28bc:	13 96       	adiw	r26, 0x03	; 3
    28be:	1c 92       	st	X, r1
    28c0:	13 97       	sbiw	r26, 0x03	; 3
		Terms[i].CRCOtkazCount = 0;
    28c2:	14 96       	adiw	r26, 0x04	; 4
    28c4:	1c 92       	st	X, r1
    28c6:	14 97       	sbiw	r26, 0x04	; 4
		Terms[i].OldCRCOtkazCount = 0;
    28c8:	15 96       	adiw	r26, 0x05	; 5
    28ca:	1c 92       	st	X, r1
    28cc:	15 97       	sbiw	r26, 0x05	; 5
		Terms[i].MINLim = 23;
    28ce:	33 83       	std	Z+3, r19	; 0x03
    28d0:	22 83       	std	Z+2, r18	; 0x02
		Terms[i].MAXLim = 25;
    28d2:	95 83       	std	Z+5, r25	; 0x05
    28d4:	84 83       	std	Z+4, r24	; 0x04
		Terms[i].trigMINLim = 0;
    28d6:	13 86       	std	Z+11, r1	; 0x0b
		Terms[i].trigMAXLim = 0;
    28d8:	14 86       	std	Z+12, r1	; 0x0c
		Terms[i].trigOtkaz = 0;
    28da:	11 96       	adiw	r26, 0x01	; 1
    28dc:	1c 92       	st	X, r1
    28de:	11 97       	sbiw	r26, 0x01	; 1
		Terms[i].trigCRCOtkaz = 0;
    28e0:	17 96       	adiw	r26, 0x07	; 7
    28e2:	1c 92       	st	X, r1
    28e4:	17 97       	sbiw	r26, 0x07	; 7
		Terms[i].flEnable = 1;
    28e6:	46 83       	std	Z+6, r20	; 0x06
    28e8:	e0 5c       	subi	r30, 0xC0	; 192
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	a0 5c       	subi	r26, 0xC0	; 192
    28ee:	bf 4f       	sbci	r27, 0xFF	; 255
	}
}
//------------------------------------------------------------------------------------

void TermInit (void) {
	for (int i=0; i<THERM_COUNT; ++i) {
    28f0:	5e e0       	ldi	r21, 0x0E	; 14
    28f2:	ef 32       	cpi	r30, 0x2F	; 47
    28f4:	f5 07       	cpc	r31, r21
    28f6:	c1 f6       	brne	.-80     	; 0x28a8 <TermInit+0x12>
		Terms[i].trigMAXLim = 0;
		Terms[i].trigOtkaz = 0;
		Terms[i].trigCRCOtkaz = 0;
		Terms[i].flEnable = 1;
	}
}
    28f8:	08 95       	ret

000028fa <crc8>:
//------------------------------------------------------------------------------------
#define CRC8INIT	0x00
#define CRC8POLY	0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t crc8( uint8_t *data_in, uint16_t number_of_bytes_to_read ) {
    28fa:	dc 01       	movw	r26, r24
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	50 e0       	ldi	r21, 0x00	; 0
	for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
		data = data_in[loop_count];
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ data) & 0x01;
			if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
    2902:	98 e1       	ldi	r25, 0x18	; 24
    2904:	15 c0       	rjmp	.+42     	; 0x2930 <crc8+0x36>
	uint8_t  data;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
	for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
		data = data_in[loop_count];
    2906:	fd 01       	movw	r30, r26
    2908:	e4 0f       	add	r30, r20
    290a:	f5 1f       	adc	r31, r21
    290c:	e0 81       	ld	r30, Z
    290e:	38 e0       	ldi	r19, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ data) & 0x01;
    2910:	8e 2f       	mov	r24, r30
    2912:	82 27       	eor	r24, r18
			if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
    2914:	f8 2f       	mov	r31, r24
    2916:	f1 70       	andi	r31, 0x01	; 1
    2918:	80 fd       	sbrc	r24, 0
    291a:	29 27       	eor	r18, r25
			crc = (crc >> 1) & 0x7F;
    291c:	26 95       	lsr	r18
			if ( feedback_bit == 0x01 ) crc = crc | 0x80;
    291e:	f1 30       	cpi	r31, 0x01	; 1
    2920:	09 f4       	brne	.+2      	; 0x2924 <crc8+0x2a>
    2922:	20 68       	ori	r18, 0x80	; 128
			data = data >> 1;
			bit_counter--;
    2924:	31 50       	subi	r19, 0x01	; 1
		} while (bit_counter > 0);
    2926:	11 f0       	breq	.+4      	; 0x292c <crc8+0x32>
		do {
			feedback_bit = (crc ^ data) & 0x01;
			if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
			crc = (crc >> 1) & 0x7F;
			if ( feedback_bit == 0x01 ) crc = crc | 0x80;
			data = data >> 1;
    2928:	e6 95       	lsr	r30
    292a:	f2 cf       	rjmp	.-28     	; 0x2910 <crc8+0x16>
	uint8_t  bit_counter;
	uint8_t  data;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
	for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
    292c:	4f 5f       	subi	r20, 0xFF	; 255
    292e:	5f 4f       	sbci	r21, 0xFF	; 255
    2930:	46 17       	cp	r20, r22
    2932:	57 07       	cpc	r21, r23
    2934:	41 f7       	brne	.-48     	; 0x2906 <crc8+0xc>
			data = data >> 1;
			bit_counter--;
		} while (bit_counter > 0);
	}
	return crc;
}
    2936:	82 2f       	mov	r24, r18
    2938:	08 95       	ret

0000293a <MakeTerm>:
	return RetVal;
}
//------------------------------------------------------------------------------------


void MakeTerm(char *ResStr) {
    293a:	6f 92       	push	r6
    293c:	7f 92       	push	r7
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	ca 5a       	subi	r28, 0xAA	; 170
    295c:	d0 40       	sbci	r29, 0x00	; 0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	4c 01       	movw	r8, r24
	char tmpStr2[160];
	char tmpStr3[10];
	//memset(tmpStr2, 0, 160);
	tmpStr2[0] = 0;
    296a:	1b 86       	std	Y+11, r1	; 0x0b
    296c:	55 eb       	ldi	r21, 0xB5	; 181
    296e:	e5 2e       	mov	r14, r21
    2970:	5d e0       	ldi	r21, 0x0D	; 13
    2972:	f5 2e       	mov	r15, r21
    2974:	45 e2       	ldi	r20, 0x25	; 37
    2976:	a4 2e       	mov	r10, r20
    2978:	b1 2c       	mov	r11, r1
    297a:	ae 0c       	add	r10, r14
    297c:	bf 1c       	adc	r11, r15
    297e:	cc 24       	eor	r12, r12
    2980:	dd 24       	eor	r13, r13
	for (int i=0; i<THERM_COUNT; ++i) {
		if (!Terms[i].flEnable) continue;
		strcat(tmpStr2, "t");
    2982:	8e 01       	movw	r16, r28
    2984:	05 5f       	subi	r16, 0xF5	; 245
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
		itoa(i+1, tmpStr3, 10);
    2988:	3e 01       	movw	r6, r28
    298a:	08 94       	sec
    298c:	61 1c       	adc	r6, r1
    298e:	71 1c       	adc	r7, r1
	char tmpStr2[160];
	char tmpStr3[10];
	//memset(tmpStr2, 0, 160);
	tmpStr2[0] = 0;
	for (int i=0; i<THERM_COUNT; ++i) {
		if (!Terms[i].flEnable) continue;
    2990:	f7 01       	movw	r30, r14
    2992:	80 81       	ld	r24, Z
    2994:	88 23       	and	r24, r24
    2996:	09 f4       	brne	.+2      	; 0x299a <MakeTerm+0x60>
    2998:	4c c0       	rjmp	.+152    	; 0x2a32 <MakeTerm+0xf8>
		strcat(tmpStr2, "t");
    299a:	c8 01       	movw	r24, r16
    299c:	69 e7       	ldi	r22, 0x79	; 121
    299e:	76 e0       	ldi	r23, 0x06	; 6
    29a0:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		itoa(i+1, tmpStr3, 10);
    29a4:	c6 01       	movw	r24, r12
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	b3 01       	movw	r22, r6
    29aa:	4a e0       	ldi	r20, 0x0A	; 10
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <itoa>
		strcat(tmpStr2, tmpStr3);
    29b2:	c8 01       	movw	r24, r16
    29b4:	b3 01       	movw	r22, r6
    29b6:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		strcat(tmpStr2, "=");
    29ba:	c8 01       	movw	r24, r16
    29bc:	6b e7       	ldi	r22, 0x7B	; 123
    29be:	76 e0       	ldi	r23, 0x06	; 6
    29c0:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		if (Terms[i].flOtkaz == 1) strcat(tmpStr2, "ErrNON");
    29c4:	f5 01       	movw	r30, r10
    29c6:	80 81       	ld	r24, Z
    29c8:	81 30       	cpi	r24, 0x01	; 1
    29ca:	21 f4       	brne	.+8      	; 0x29d4 <MakeTerm+0x9a>
    29cc:	c8 01       	movw	r24, r16
    29ce:	6d e7       	ldi	r22, 0x7D	; 125
    29d0:	76 e0       	ldi	r23, 0x06	; 6
    29d2:	11 c0       	rjmp	.+34     	; 0x29f6 <MakeTerm+0xbc>
		else if (Terms[i].flCRCOtkaz == 1) strcat(tmpStr2, "ErrCRC");
    29d4:	f5 01       	movw	r30, r10
    29d6:	86 81       	ldd	r24, Z+6	; 0x06
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	21 f4       	brne	.+8      	; 0x29e4 <MakeTerm+0xaa>
    29dc:	c8 01       	movw	r24, r16
    29de:	64 e8       	ldi	r22, 0x84	; 132
    29e0:	76 e0       	ldi	r23, 0x06	; 6
    29e2:	09 c0       	rjmp	.+18     	; 0x29f6 <MakeTerm+0xbc>
		else strcat(tmpStr2, Terms[i].StrTherm);
    29e4:	b6 01       	movw	r22, r12
    29e6:	36 e0       	ldi	r19, 0x06	; 6
    29e8:	66 0f       	add	r22, r22
    29ea:	77 1f       	adc	r23, r23
    29ec:	3a 95       	dec	r19
    29ee:	e1 f7       	brne	.-8      	; 0x29e8 <MakeTerm+0xae>
    29f0:	64 54       	subi	r22, 0x44	; 68
    29f2:	72 4f       	sbci	r23, 0xF2	; 242
    29f4:	c8 01       	movw	r24, r16
    29f6:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		strcat(tmpStr2, "; "); 
    29fa:	c8 01       	movw	r24, r16
    29fc:	6b e8       	ldi	r22, 0x8B	; 139
    29fe:	76 e0       	ldi	r23, 0x06	; 6
    2a00:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		
		if (Terms[i].flIsMINLim==1) strcat(tmpStr2, "MIN!!!; ");
    2a04:	f7 01       	movw	r30, r14
    2a06:	81 81       	ldd	r24, Z+1	; 0x01
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	29 f4       	brne	.+10     	; 0x2a16 <MakeTerm+0xdc>
    2a0c:	c8 01       	movw	r24, r16
    2a0e:	6e e8       	ldi	r22, 0x8E	; 142
    2a10:	76 e0       	ldi	r23, 0x06	; 6
    2a12:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		if (Terms[i].flIsMAXLim==1) strcat(tmpStr2, "MAX!!!; ");
    2a16:	f7 01       	movw	r30, r14
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	29 f4       	brne	.+10     	; 0x2a28 <MakeTerm+0xee>
    2a1e:	c8 01       	movw	r24, r16
    2a20:	67 e9       	ldi	r22, 0x97	; 151
    2a22:	76 e0       	ldi	r23, 0x06	; 6
    2a24:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
		
		strcat(tmpStr2, "#");
    2a28:	c8 01       	movw	r24, r16
    2a2a:	60 ea       	ldi	r22, 0xA0	; 160
    2a2c:	76 e0       	ldi	r23, 0x06	; 6
    2a2e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <strcat>
void MakeTerm(char *ResStr) {
	char tmpStr2[160];
	char tmpStr3[10];
	//memset(tmpStr2, 0, 160);
	tmpStr2[0] = 0;
	for (int i=0; i<THERM_COUNT; ++i) {
    2a32:	08 94       	sec
    2a34:	c1 1c       	adc	r12, r1
    2a36:	d1 1c       	adc	r13, r1
    2a38:	80 e4       	ldi	r24, 0x40	; 64
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	e8 0e       	add	r14, r24
    2a3e:	f9 1e       	adc	r15, r25
    2a40:	a8 0e       	add	r10, r24
    2a42:	b9 1e       	adc	r11, r25
    2a44:	92 e0       	ldi	r25, 0x02	; 2
    2a46:	c9 16       	cp	r12, r25
    2a48:	d1 04       	cpc	r13, r1
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <MakeTerm+0x114>
    2a4c:	a1 cf       	rjmp	.-190    	; 0x2990 <MakeTerm+0x56>
		if (Terms[i].flIsMINLim==1) strcat(tmpStr2, "MIN!!!; ");
		if (Terms[i].flIsMAXLim==1) strcat(tmpStr2, "MAX!!!; ");
		
		strcat(tmpStr2, "#");
	}
	strcpy(ResStr, tmpStr2);
    2a4e:	c4 01       	movw	r24, r8
    2a50:	be 01       	movw	r22, r28
    2a52:	65 5f       	subi	r22, 0xF5	; 245
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
}
    2a5a:	c6 55       	subi	r28, 0x56	; 86
    2a5c:	df 4f       	sbci	r29, 0xFF	; 255
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	df 90       	pop	r13
    2a76:	cf 90       	pop	r12
    2a78:	bf 90       	pop	r11
    2a7a:	af 90       	pop	r10
    2a7c:	9f 90       	pop	r9
    2a7e:	8f 90       	pop	r8
    2a80:	7f 90       	pop	r7
    2a82:	6f 90       	pop	r6
    2a84:	08 95       	ret

00002a86 <AlgTermSirena>:
}
//------------------------------------------------------------------------------------

TTime TAlgSirena;
int swAlgTermSirena = cswIdle;
void AlgTermSirena(void) {
    2a86:	0f 93       	push	r16
    2a88:	1f 93       	push	r17
	switch (swAlgTermSirena) {
    2a8a:	80 91 d7 07 	lds	r24, 0x07D7
    2a8e:	90 91 d8 07 	lds	r25, 0x07D8
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	91 05       	cpc	r25, r1
    2a96:	19 f0       	breq	.+6      	; 0x2a9e <AlgTermSirena+0x18>
    2a98:	4c 97       	sbiw	r24, 0x1c	; 28
    2a9a:	71 f5       	brne	.+92     	; 0x2af8 <AlgTermSirena+0x72>
    2a9c:	12 c0       	rjmp	.+36     	; 0x2ac2 <AlgTermSirena+0x3c>
		case cswIdle:
		break;

		case cswStart:
			TAlgSirena = GetTime();
    2a9e:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    2aa2:	90 93 23 0e 	sts	0x0E23, r25
    2aa6:	80 93 22 0e 	sts	0x0E22, r24
*/
//------------------------------------------------------------------------------------

// включить сирену термометра
void TermSirenaOn(void) {
	DOuts = DOuts & 0b10111111; 
    2aaa:	80 91 4b 02 	lds	r24, 0x024B
    2aae:	8f 7b       	andi	r24, 0xBF	; 191
    2ab0:	80 93 4b 02 	sts	0x024B, r24
		break;

		case cswStart:
			TAlgSirena = GetTime();
			TermSirenaOn();
			swAlgTermSirena = csw010;
    2ab4:	8c e1       	ldi	r24, 0x1C	; 28
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	90 93 d8 07 	sts	0x07D8, r25
    2abc:	80 93 d7 07 	sts	0x07D7, r24
    2ac0:	1b c0       	rjmp	.+54     	; 0x2af8 <AlgTermSirena+0x72>
		break;

		case csw010:
			if ((GetTime() - TAlgSirena) >= Ticks(15000)) { // 15 sec
    2ac2:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    2ac6:	20 91 22 0e 	lds	r18, 0x0E22
    2aca:	30 91 23 0e 	lds	r19, 0x0E23
    2ace:	8c 01       	movw	r16, r24
    2ad0:	02 1b       	sub	r16, r18
    2ad2:	13 0b       	sbc	r17, r19
    2ad4:	68 e9       	ldi	r22, 0x98	; 152
    2ad6:	7a e3       	ldi	r23, 0x3A	; 58
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
    2ae0:	08 17       	cp	r16, r24
    2ae2:	19 07       	cpc	r17, r25
    2ae4:	48 f0       	brcs	.+18     	; 0x2af8 <AlgTermSirena+0x72>
}
//------------------------------------------------------------------------------------

// выключить сирену термометра
void TermSirenaOff(void) {
	DOuts = DOuts | 0b01000000; 
    2ae6:	80 91 4b 02 	lds	r24, 0x024B
    2aea:	80 64       	ori	r24, 0x40	; 64
    2aec:	80 93 4b 02 	sts	0x024B, r24
		break;

		case csw010:
			if ((GetTime() - TAlgSirena) >= Ticks(15000)) { // 15 sec
				TermSirenaOff();
				swAlgTermSirena = cswIdle; //
    2af0:	10 92 d8 07 	sts	0x07D8, r1
    2af4:	10 92 d7 07 	sts	0x07D7, r1
			}
		break;
	}
}
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	08 95       	ret

00002afe <TermAlg>:
//TTime TTermAlg;
//int swTermAlg = cswIdle;
int otlTerm = 23;
int Byte_index;
char tmpStr2[160];
char TermAlg(int TermNum) {
    2afe:	cf 92       	push	r12
    2b00:	df 92       	push	r13
    2b02:	ef 92       	push	r14
    2b04:	ff 92       	push	r15
    2b06:	0f 93       	push	r16
    2b08:	1f 93       	push	r17
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	7c 01       	movw	r14, r24
	
	char RetVal = 0;
	uint8_t ResCRC;
	
	switch (Terms[TermNum].swTermAlg) {
    2b10:	6c 01       	movw	r12, r24
    2b12:	76 e0       	ldi	r23, 0x06	; 6
    2b14:	cc 0c       	add	r12, r12
    2b16:	dd 1c       	adc	r13, r13
    2b18:	7a 95       	dec	r23
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <TermAlg+0x16>
    2b1c:	e6 01       	movw	r28, r12
    2b1e:	ce 55       	subi	r28, 0x5E	; 94
    2b20:	d2 4f       	sbci	r29, 0xF2	; 242
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b26:	8d 31       	cpi	r24, 0x1D	; 29
    2b28:	91 05       	cpc	r25, r1
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <TermAlg+0x30>
    2b2c:	68 c0       	rjmp	.+208    	; 0x2bfe <TermAlg+0x100>
    2b2e:	8e 31       	cpi	r24, 0x1E	; 30
    2b30:	91 05       	cpc	r25, r1
    2b32:	3c f4       	brge	.+14     	; 0x2b42 <TermAlg+0x44>
    2b34:	81 30       	cpi	r24, 0x01	; 1
    2b36:	91 05       	cpc	r25, r1
    2b38:	81 f0       	breq	.+32     	; 0x2b5a <TermAlg+0x5c>
    2b3a:	4c 97       	sbiw	r24, 0x1c	; 28
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <TermAlg+0x42>
    2b3e:	6d c1       	rjmp	.+730    	; 0x2e1a <TermAlg+0x31c>
    2b40:	1e c0       	rjmp	.+60     	; 0x2b7e <TermAlg+0x80>
    2b42:	8f 31       	cpi	r24, 0x1F	; 31
    2b44:	91 05       	cpc	r25, r1
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <TermAlg+0x4c>
    2b48:	d7 c0       	rjmp	.+430    	; 0x2cf8 <TermAlg+0x1fa>
    2b4a:	8f 31       	cpi	r24, 0x1F	; 31
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	0c f4       	brge	.+2      	; 0x2b52 <TermAlg+0x54>
    2b50:	96 c0       	rjmp	.+300    	; 0x2c7e <TermAlg+0x180>
    2b52:	80 97       	sbiw	r24, 0x20	; 32
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <TermAlg+0x5a>
    2b56:	61 c1       	rjmp	.+706    	; 0x2e1a <TermAlg+0x31c>
    2b58:	4e c1       	rjmp	.+668    	; 0x2df6 <TermAlg+0x2f8>
		case cswIdle:
		break;
		
		case cswStart:
			//Reset, skip ROM and start temperature conversion
			therm_reset(TermNum);
    2b5a:	8e 2d       	mov	r24, r14
    2b5c:	0e 94 26 13 	call	0x264c	; 0x264c <therm_reset>
			therm_write_byte(THERM_CMD_SKIPROM, TermNum);
    2b60:	8c ec       	ldi	r24, 0xCC	; 204
    2b62:	6e 2d       	mov	r22, r14
    2b64:	0e 94 2c 14 	call	0x2858	; 0x2858 <therm_write_byte>
			therm_write_byte(THERM_CMD_CONVERTTEMP, TermNum);
    2b68:	84 e4       	ldi	r24, 0x44	; 68
    2b6a:	6e 2d       	mov	r22, r14
    2b6c:	0e 94 2c 14 	call	0x2858	; 0x2858 <therm_write_byte>
			Terms[TermNum].TTermAlg = GetTime();
    2b70:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    2b74:	9c 87       	std	Y+12, r25	; 0x0c
    2b76:	8b 87       	std	Y+11, r24	; 0x0b
			Terms[TermNum].swTermAlg = csw010;
    2b78:	8c e1       	ldi	r24, 0x1C	; 28
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	94 c0       	rjmp	.+296    	; 0x2ca6 <TermAlg+0x1a8>
		break;
		
		case csw010:
			if (therm_read_bit(TermNum)) {
    2b7e:	8e 2d       	mov	r24, r14
    2b80:	0e 94 c5 13 	call	0x278a	; 0x278a <therm_read_bit>
    2b84:	88 23       	and	r24, r24
    2b86:	31 f0       	breq	.+12     	; 0x2b94 <TermAlg+0x96>
				Terms[TermNum].OldOtkazCount = 0;
    2b88:	1b ae       	std	Y+59, r1	; 0x3b
				Terms[TermNum].OtkazCount = 0;
    2b8a:	1a ae       	std	Y+58, r1	; 0x3a
				Terms[TermNum].flOtkaz = 0;
    2b8c:	18 ae       	std	Y+56, r1	; 0x38
				Terms[TermNum].swTermAlg = csw020;
    2b8e:	8d e1       	ldi	r24, 0x1D	; 29
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	89 c0       	rjmp	.+274    	; 0x2ca6 <TermAlg+0x1a8>
			} 
			else {
				if ((GetTime() - Terms[TermNum].TTermAlg) > Ticks(100)) { // в течении 100 мс
    2b94:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    2b98:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b9c:	8c 01       	movw	r16, r24
    2b9e:	02 1b       	sub	r16, r18
    2ba0:	13 0b       	sbc	r17, r19
    2ba2:	64 e6       	ldi	r22, 0x64	; 100
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
    2bae:	80 17       	cp	r24, r16
    2bb0:	91 07       	cpc	r25, r17
    2bb2:	08 f0       	brcs	.+2      	; 0x2bb6 <TermAlg+0xb8>
    2bb4:	32 c1       	rjmp	.+612    	; 0x2e1a <TermAlg+0x31c>
					RetVal = 1; // не появился ответ на линии
					Terms[TermNum].swTermAlg = cswIdle;
    2bb6:	1e 86       	std	Y+14, r1	; 0x0e
    2bb8:	1d 86       	std	Y+13, r1	; 0x0d
					if (Terms[TermNum].OtkazCount >= MAX_OTKAZ_COUNT) {
    2bba:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bbc:	94 31       	cpi	r25, 0x14	; 20
    2bbe:	d4 f0       	brlt	.+52     	; 0x2bf4 <TermAlg+0xf6>
						if (Terms[TermNum].OtkazCount != Terms[TermNum].OldOtkazCount) {
    2bc0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bc2:	98 17       	cp	r25, r24
    2bc4:	61 f0       	breq	.+24     	; 0x2bde <TermAlg+0xe0>
							Terms[TermNum].flOtkaz = 1;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	88 af       	std	Y+56, r24	; 0x38
							Terms[TermNum].trigOtkaz = 1;
    2bca:	89 af       	std	Y+57, r24	; 0x39
							Terms[TermNum].flIsMINLim = 0; // не может быть минимального лимита при отказе датчика
    2bcc:	1c 8a       	std	Y+20, r1	; 0x14
							Terms[TermNum].flIsMAXLim = 0; // не может быть максимального лимита при отказе датчика
    2bce:	1d 8a       	std	Y+21, r1	; 0x15
							strcpy(Terms[TermNum].StrTherm, "?");
    2bd0:	c6 01       	movw	r24, r12
    2bd2:	84 54       	subi	r24, 0x44	; 68
    2bd4:	92 4f       	sbci	r25, 0xF2	; 242
    2bd6:	62 ea       	ldi	r22, 0xA2	; 162
    2bd8:	76 e0       	ldi	r23, 0x06	; 6
    2bda:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
						}
						Terms[TermNum].OldOtkazCount = Terms[TermNum].OtkazCount;
    2bde:	f7 01       	movw	r30, r14
    2be0:	66 e0       	ldi	r22, 0x06	; 6
    2be2:	ee 0f       	add	r30, r30
    2be4:	ff 1f       	adc	r31, r31
    2be6:	6a 95       	dec	r22
    2be8:	e1 f7       	brne	.-8      	; 0x2be2 <TermAlg+0xe4>
    2bea:	ee 55       	subi	r30, 0x5E	; 94
    2bec:	f2 4f       	sbci	r31, 0xF2	; 242
    2bee:	82 ad       	ldd	r24, Z+58	; 0x3a
    2bf0:	83 af       	std	Z+59, r24	; 0x3b
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <TermAlg+0xfc>
					}
					else {
						Terms[TermNum].OldOtkazCount = Terms[TermNum].OtkazCount;
    2bf4:	9b af       	std	Y+59, r25	; 0x3b
						Terms[TermNum].OtkazCount++;
    2bf6:	9f 5f       	subi	r25, 0xFF	; 255
    2bf8:	9a af       	std	Y+58, r25	; 0x3a
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	0f c1       	rjmp	.+542    	; 0x2e1c <TermAlg+0x31e>
				}
			}
		break;
		
		case csw020:
			therm_reset(TermNum);
    2bfe:	de 2c       	mov	r13, r14
    2c00:	8e 2d       	mov	r24, r14
    2c02:	0e 94 26 13 	call	0x264c	; 0x264c <therm_reset>
			therm_write_byte(THERM_CMD_SKIPROM, TermNum);
    2c06:	8c ec       	ldi	r24, 0xCC	; 204
    2c08:	6e 2d       	mov	r22, r14
    2c0a:	0e 94 2c 14 	call	0x2858	; 0x2858 <therm_write_byte>
			therm_write_byte(THERM_CMD_RSCRATCHPAD, TermNum);
    2c0e:	8e eb       	ldi	r24, 0xBE	; 190
    2c10:	6e 2d       	mov	r22, r14
    2c12:	0e 94 2c 14 	call	0x2858	; 0x2858 <therm_write_byte>
			//Read Scratchpad (only 2 first bytes)
			Terms[TermNum].Temper.InByte[0] = therm_read_byte(TermNum); // младший байт
    2c16:	8e 2d       	mov	r24, r14
    2c18:	0e 94 14 14 	call	0x2828	; 0x2828 <therm_read_byte>
    2c1c:	88 83       	st	Y, r24
			Terms[TermNum].Temper.InByte[1] = therm_read_byte(TermNum); // старший байт
    2c1e:	8e 2d       	mov	r24, r14
    2c20:	0e 94 14 14 	call	0x2828	; 0x2828 <therm_read_byte>
    2c24:	89 83       	std	Y+1, r24	; 0x01
			Terms[TermNum].Packet[0] = Terms[TermNum].Temper.InByte[0];
    2c26:	f7 01       	movw	r30, r14
    2c28:	56 e0       	ldi	r21, 0x06	; 6
    2c2a:	ee 0f       	add	r30, r30
    2c2c:	ff 1f       	adc	r31, r31
    2c2e:	5a 95       	dec	r21
    2c30:	e1 f7       	brne	.-8      	; 0x2c2a <TermAlg+0x12c>
    2c32:	ec 55       	subi	r30, 0x5C	; 92
    2c34:	f2 4f       	sbci	r31, 0xF2	; 242
    2c36:	98 81       	ld	r25, Y
    2c38:	90 83       	st	Z, r25
			Terms[TermNum].Packet[1] = Terms[TermNum].Temper.InByte[1];
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
    2c3c:	87 01       	movw	r16, r14
    2c3e:	46 e0       	ldi	r20, 0x06	; 6
    2c40:	00 0f       	add	r16, r16
    2c42:	11 1f       	adc	r17, r17
    2c44:	4a 95       	dec	r20
    2c46:	e1 f7       	brne	.-8      	; 0x2c40 <TermAlg+0x142>
    2c48:	0a 55       	subi	r16, 0x5A	; 90
    2c4a:	12 4f       	sbci	r17, 0xF2	; 242
    2c4c:	c2 e0       	ldi	r28, 0x02	; 2
    2c4e:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i=2; i<=8; ++i) Terms[TermNum].Packet[i] = therm_read_byte(TermNum);
    2c50:	8d 2d       	mov	r24, r13
    2c52:	0e 94 14 14 	call	0x2828	; 0x2828 <therm_read_byte>
    2c56:	d8 01       	movw	r26, r16
    2c58:	8d 93       	st	X+, r24
    2c5a:	8d 01       	movw	r16, r26
    2c5c:	21 96       	adiw	r28, 0x01	; 1
    2c5e:	c9 30       	cpi	r28, 0x09	; 9
    2c60:	d1 05       	cpc	r29, r1
    2c62:	b1 f7       	brne	.-20     	; 0x2c50 <TermAlg+0x152>
			Terms[TermNum].swTermAlg = csw025;
    2c64:	36 e0       	ldi	r19, 0x06	; 6
    2c66:	ee 0c       	add	r14, r14
    2c68:	ff 1c       	adc	r15, r15
    2c6a:	3a 95       	dec	r19
    2c6c:	e1 f7       	brne	.-8      	; 0x2c66 <TermAlg+0x168>
    2c6e:	e2 ea       	ldi	r30, 0xA2	; 162
    2c70:	fd e0       	ldi	r31, 0x0D	; 13
    2c72:	ee 0e       	add	r14, r30
    2c74:	ff 1e       	adc	r15, r31
    2c76:	8e e1       	ldi	r24, 0x1E	; 30
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	d7 01       	movw	r26, r14
    2c7c:	b7 c0       	rjmp	.+366    	; 0x2dec <TermAlg+0x2ee>
			
		break;

		case csw025:
			ResCRC = crc8(Terms[TermNum].Packet, 8);
    2c7e:	c7 01       	movw	r24, r14
    2c80:	26 e0       	ldi	r18, 0x06	; 6
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	2a 95       	dec	r18
    2c88:	e1 f7       	brne	.-8      	; 0x2c82 <TermAlg+0x184>
    2c8a:	8c 55       	subi	r24, 0x5C	; 92
    2c8c:	92 4f       	sbci	r25, 0xF2	; 242
    2c8e:	68 e0       	ldi	r22, 0x08	; 8
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	0e 94 7d 14 	call	0x28fa	; 0x28fa <crc8>
			if (ResCRC == Terms[TermNum].Packet[8]) { // crc совпала
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	89 17       	cp	r24, r25
    2c9a:	41 f4       	brne	.+16     	; 0x2cac <TermAlg+0x1ae>
				Terms[TermNum].OldCRCOtkazCount = 0;
    2c9c:	1d ae       	std	Y+61, r1	; 0x3d
				Terms[TermNum].CRCOtkazCount = 0;
    2c9e:	1c ae       	std	Y+60, r1	; 0x3c
				Terms[TermNum].flCRCOtkaz = 0;
    2ca0:	1e ae       	std	Y+62, r1	; 0x3e
				Terms[TermNum].swTermAlg = csw030;
    2ca2:	8f e1       	ldi	r24, 0x1F	; 31
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9e 87       	std	Y+14, r25	; 0x0e
    2ca8:	8d 87       	std	Y+13, r24	; 0x0d
    2caa:	b7 c0       	rjmp	.+366    	; 0x2e1a <TermAlg+0x31c>
			}
			else { // crc не совпала
				strcpy(Terms[TermNum].StrTherm, "?");
    2cac:	c6 01       	movw	r24, r12
    2cae:	84 54       	subi	r24, 0x44	; 68
    2cb0:	92 4f       	sbci	r25, 0xF2	; 242
    2cb2:	62 ea       	ldi	r22, 0xA2	; 162
    2cb4:	76 e0       	ldi	r23, 0x06	; 6
    2cb6:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <strcpy>
				RetVal = 2; // не совпала CRC
				Terms[TermNum].swTermAlg = cswIdle;
    2cba:	1e 86       	std	Y+14, r1	; 0x0e
    2cbc:	1d 86       	std	Y+13, r1	; 0x0d
				if (Terms[TermNum].CRCOtkazCount >= MAX_OTKAZ_COUNT) {
    2cbe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	fd 96       	adiw	r30, 0x3d	; 61
    2cc4:	94 31       	cpi	r25, 0x14	; 20
    2cc6:	9c f0       	brlt	.+38     	; 0x2cee <TermAlg+0x1f0>
					if (Terms[TermNum].CRCOtkazCount != Terms[TermNum].OldCRCOtkazCount) {
    2cc8:	80 81       	ld	r24, Z
    2cca:	98 17       	cp	r25, r24
    2ccc:	29 f0       	breq	.+10     	; 0x2cd8 <TermAlg+0x1da>
						Terms[TermNum].flCRCOtkaz = 1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	8e af       	std	Y+62, r24	; 0x3e
						Terms[TermNum].trigCRCOtkaz = 1;
    2cd2:	8f af       	std	Y+63, r24	; 0x3f
						Terms[TermNum].flIsMINLim = 0; // не может быть минимального лимита при отказе датчика
    2cd4:	1c 8a       	std	Y+20, r1	; 0x14
						Terms[TermNum].flIsMAXLim = 0; // не может быть максимального лимита при отказе датчика
    2cd6:	1d 8a       	std	Y+21, r1	; 0x15
					}
					Terms[TermNum].OldCRCOtkazCount = Terms[TermNum].CRCOtkazCount;
    2cd8:	f7 01       	movw	r30, r14
    2cda:	06 e0       	ldi	r16, 0x06	; 6
    2cdc:	ee 0f       	add	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	0a 95       	dec	r16
    2ce2:	e1 f7       	brne	.-8      	; 0x2cdc <TermAlg+0x1de>
    2ce4:	ee 55       	subi	r30, 0x5E	; 94
    2ce6:	f2 4f       	sbci	r31, 0xF2	; 242
    2ce8:	84 ad       	ldd	r24, Z+60	; 0x3c
    2cea:	85 af       	std	Z+61, r24	; 0x3d
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <TermAlg+0x1f6>
				}
				else {
					Terms[TermNum].OldCRCOtkazCount = Terms[TermNum].CRCOtkazCount;
    2cee:	90 83       	st	Z, r25
					Terms[TermNum].CRCOtkazCount++;
    2cf0:	9f 5f       	subi	r25, 0xFF	; 255
    2cf2:	9c af       	std	Y+60, r25	; 0x3c
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	92 c0       	rjmp	.+292    	; 0x2e1c <TermAlg+0x31e>
				}
			}
		break;

		case csw030:
			Terms[TermNum].Temper.Value = Terms[TermNum].Temper.Value >> 4;
    2cf8:	28 81       	ld	r18, Y
    2cfa:	39 81       	ldd	r19, Y+1	; 0x01
    2cfc:	14 e0       	ldi	r17, 0x04	; 4
    2cfe:	35 95       	asr	r19
    2d00:	27 95       	ror	r18
    2d02:	1a 95       	dec	r17
    2d04:	e1 f7       	brne	.-8      	; 0x2cfe <TermAlg+0x200>
    2d06:	39 83       	std	Y+1, r19	; 0x01
    2d08:	28 83       	st	Y, r18
			//Terms[TermNum].Temper.Value = otlTerm; //!!!!!
			Terms[TermNum].flOldIsMINLim = Terms[TermNum].flIsMINLim;
    2d0a:	8c 89       	ldd	r24, Y+20	; 0x14
    2d0c:	8e 8b       	std	Y+22, r24	; 0x16
			Terms[TermNum].flOldIsMAXLim = Terms[TermNum].flIsMAXLim;
    2d0e:	8d 89       	ldd	r24, Y+21	; 0x15
    2d10:	8f 8b       	std	Y+23, r24	; 0x17
			if (Terms[TermNum].Temper.Value < Terms[TermNum].MINLim) Terms[TermNum].flIsMINLim = 1;
    2d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d14:	98 89       	ldd	r25, Y+16	; 0x10
    2d16:	28 17       	cp	r18, r24
    2d18:	39 07       	cpc	r19, r25
    2d1a:	1c f4       	brge	.+6      	; 0x2d22 <TermAlg+0x224>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	8c 8b       	std	Y+20, r24	; 0x14
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <TermAlg+0x226>
			else Terms[TermNum].flIsMINLim = 0;
    2d22:	1c 8a       	std	Y+20, r1	; 0x14
			if (Terms[TermNum].Temper.Value > Terms[TermNum].MAXLim) Terms[TermNum].flIsMAXLim = 1;
    2d24:	f7 01       	movw	r30, r14
    2d26:	b6 e0       	ldi	r27, 0x06	; 6
    2d28:	ee 0f       	add	r30, r30
    2d2a:	ff 1f       	adc	r31, r31
    2d2c:	ba 95       	dec	r27
    2d2e:	e1 f7       	brne	.-8      	; 0x2d28 <TermAlg+0x22a>
    2d30:	ee 55       	subi	r30, 0x5E	; 94
    2d32:	f2 4f       	sbci	r31, 0xF2	; 242
    2d34:	20 81       	ld	r18, Z
    2d36:	31 81       	ldd	r19, Z+1	; 0x01
    2d38:	81 89       	ldd	r24, Z+17	; 0x11
    2d3a:	92 89       	ldd	r25, Z+18	; 0x12
    2d3c:	82 17       	cp	r24, r18
    2d3e:	93 07       	cpc	r25, r19
    2d40:	1c f4       	brge	.+6      	; 0x2d48 <TermAlg+0x24a>
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	85 8b       	std	Z+21, r24	; 0x15
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <TermAlg+0x24c>
			else Terms[TermNum].flIsMAXLim = 0;
    2d48:	15 8a       	std	Z+21, r1	; 0x15
			// если есть тригер по какой-либо границе - запускаем сирену
			if ((Terms[TermNum].flOldIsMINLim==0) && (Terms[TermNum].flIsMINLim==1)) Terms[TermNum].trigMINLim = 1;
    2d4a:	f7 01       	movw	r30, r14
    2d4c:	a6 e0       	ldi	r26, 0x06	; 6
    2d4e:	ee 0f       	add	r30, r30
    2d50:	ff 1f       	adc	r31, r31
    2d52:	aa 95       	dec	r26
    2d54:	e1 f7       	brne	.-8      	; 0x2d4e <TermAlg+0x250>
    2d56:	ee 55       	subi	r30, 0x5E	; 94
    2d58:	f2 4f       	sbci	r31, 0xF2	; 242
    2d5a:	86 89       	ldd	r24, Z+22	; 0x16
    2d5c:	88 23       	and	r24, r24
    2d5e:	21 f4       	brne	.+8      	; 0x2d68 <TermAlg+0x26a>
    2d60:	84 89       	ldd	r24, Z+20	; 0x14
    2d62:	81 30       	cpi	r24, 0x01	; 1
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <TermAlg+0x26a>
    2d66:	80 8f       	std	Z+24, r24	; 0x18
			if ((Terms[TermNum].flOldIsMAXLim==0) && (Terms[TermNum].flIsMAXLim==1)) Terms[TermNum].trigMAXLim = 1;
    2d68:	f7 01       	movw	r30, r14
    2d6a:	76 e0       	ldi	r23, 0x06	; 6
    2d6c:	ee 0f       	add	r30, r30
    2d6e:	ff 1f       	adc	r31, r31
    2d70:	7a 95       	dec	r23
    2d72:	e1 f7       	brne	.-8      	; 0x2d6c <TermAlg+0x26e>
    2d74:	ee 55       	subi	r30, 0x5E	; 94
    2d76:	f2 4f       	sbci	r31, 0xF2	; 242
    2d78:	87 89       	ldd	r24, Z+23	; 0x17
    2d7a:	88 23       	and	r24, r24
    2d7c:	21 f4       	brne	.+8      	; 0x2d86 <TermAlg+0x288>
    2d7e:	85 89       	ldd	r24, Z+21	; 0x15
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <TermAlg+0x288>
    2d84:	81 8f       	std	Z+25, r24	; 0x19
			
			sprintf(Terms[TermNum].StrTherm, "%dC", Terms[TermNum].Temper.Value);
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <TermAlg+0x28a>
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <TermAlg+0x28c>
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <TermAlg+0x28e>
    2d8c:	ed b7       	in	r30, 0x3d	; 61
    2d8e:	fe b7       	in	r31, 0x3e	; 62
    2d90:	31 96       	adiw	r30, 0x01	; 1
    2d92:	87 01       	movw	r16, r14
    2d94:	66 e0       	ldi	r22, 0x06	; 6
    2d96:	00 0f       	add	r16, r16
    2d98:	11 1f       	adc	r17, r17
    2d9a:	6a 95       	dec	r22
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <TermAlg+0x298>
    2d9e:	c8 01       	movw	r24, r16
    2da0:	84 54       	subi	r24, 0x44	; 68
    2da2:	92 4f       	sbci	r25, 0xF2	; 242
    2da4:	ad b7       	in	r26, 0x3d	; 61
    2da6:	be b7       	in	r27, 0x3e	; 62
    2da8:	12 96       	adiw	r26, 0x02	; 2
    2daa:	9c 93       	st	X, r25
    2dac:	8e 93       	st	-X, r24
    2dae:	11 97       	sbiw	r26, 0x01	; 1
    2db0:	84 ea       	ldi	r24, 0xA4	; 164
    2db2:	96 e0       	ldi	r25, 0x06	; 6
    2db4:	93 83       	std	Z+3, r25	; 0x03
    2db6:	82 83       	std	Z+2, r24	; 0x02
    2db8:	0e 55       	subi	r16, 0x5E	; 94
    2dba:	12 4f       	sbci	r17, 0xF2	; 242
    2dbc:	d8 01       	movw	r26, r16
    2dbe:	8d 91       	ld	r24, X+
    2dc0:	9c 91       	ld	r25, X
    2dc2:	95 83       	std	Z+5, r25	; 0x05
    2dc4:	84 83       	std	Z+4, r24	; 0x04
    2dc6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <sprintf>
			Terms[TermNum].TTermAlg = GetTime();
    2dca:	ed b7       	in	r30, 0x3d	; 61
    2dcc:	fe b7       	in	r31, 0x3e	; 62
    2dce:	36 96       	adiw	r30, 0x06	; 6
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	fe bf       	out	0x3e, r31	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	ed bf       	out	0x3d, r30	; 61
    2dda:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    2dde:	d8 01       	movw	r26, r16
    2de0:	1c 96       	adiw	r26, 0x0c	; 12
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
    2de6:	1b 97       	sbiw	r26, 0x0b	; 11
			Terms[TermNum].swTermAlg = csw040;
    2de8:	80 e2       	ldi	r24, 0x20	; 32
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	1e 96       	adiw	r26, 0x0e	; 14
    2dee:	9c 93       	st	X, r25
    2df0:	8e 93       	st	-X, r24
    2df2:	1d 97       	sbiw	r26, 0x0d	; 13
    2df4:	12 c0       	rjmp	.+36     	; 0x2e1a <TermAlg+0x31c>
		break;

		case csw040:
			if ((GetTime() - Terms[TermNum].TTermAlg) > Ticks(5000)) Terms[TermNum].swTermAlg = cswIdle; // 5 сек.
    2df6:	0e 94 87 00 	call	0x10e	; 0x10e <GetTime>
    2dfa:	2b 85       	ldd	r18, Y+11	; 0x0b
    2dfc:	3c 85       	ldd	r19, Y+12	; 0x0c
    2dfe:	8c 01       	movw	r16, r24
    2e00:	02 1b       	sub	r16, r18
    2e02:	13 0b       	sbc	r17, r19
    2e04:	68 e8       	ldi	r22, 0x88	; 136
    2e06:	73 e1       	ldi	r23, 0x13	; 19
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 90 00 	call	0x120	; 0x120 <Ticks>
    2e10:	80 17       	cp	r24, r16
    2e12:	91 07       	cpc	r25, r17
    2e14:	10 f4       	brcc	.+4      	; 0x2e1a <TermAlg+0x31c>
    2e16:	1e 86       	std	Y+14, r1	; 0x0e
    2e18:	1d 86       	std	Y+13, r1	; 0x0d
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return RetVal;
}
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	1f 91       	pop	r17
    2e22:	0f 91       	pop	r16
    2e24:	ff 90       	pop	r15
    2e26:	ef 90       	pop	r14
    2e28:	df 90       	pop	r13
    2e2a:	cf 90       	pop	r12
    2e2c:	08 95       	ret

00002e2e <__fixunssfsi>:
    2e2e:	ef 92       	push	r14
    2e30:	ff 92       	push	r15
    2e32:	0f 93       	push	r16
    2e34:	1f 93       	push	r17
    2e36:	7b 01       	movw	r14, r22
    2e38:	8c 01       	movw	r16, r24
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	5f e4       	ldi	r21, 0x4F	; 79
    2e42:	0e 94 17 1a 	call	0x342e	; 0x342e <__gesf2>
    2e46:	88 23       	and	r24, r24
    2e48:	8c f0       	brlt	.+34     	; 0x2e6c <__fixunssfsi+0x3e>
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	b7 01       	movw	r22, r14
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	5f e4       	ldi	r21, 0x4F	; 79
    2e56:	0e 94 8f 18 	call	0x311e	; 0x311e <__subsf3>
    2e5a:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__fixsfsi>
    2e5e:	9b 01       	movw	r18, r22
    2e60:	ac 01       	movw	r20, r24
    2e62:	20 50       	subi	r18, 0x00	; 0
    2e64:	30 40       	sbci	r19, 0x00	; 0
    2e66:	40 40       	sbci	r20, 0x00	; 0
    2e68:	50 48       	sbci	r21, 0x80	; 128
    2e6a:	06 c0       	rjmp	.+12     	; 0x2e78 <__fixunssfsi+0x4a>
    2e6c:	c8 01       	movw	r24, r16
    2e6e:	b7 01       	movw	r22, r14
    2e70:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__fixsfsi>
    2e74:	9b 01       	movw	r18, r22
    2e76:	ac 01       	movw	r20, r24
    2e78:	b9 01       	movw	r22, r18
    2e7a:	ca 01       	movw	r24, r20
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	ff 90       	pop	r15
    2e82:	ef 90       	pop	r14
    2e84:	08 95       	ret

00002e86 <_fpadd_parts>:
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e9 e4       	ldi	r30, 0x49	; 73
    2e8c:	f7 e1       	ldi	r31, 0x17	; 23
    2e8e:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__prologue_saves__>
    2e92:	dc 01       	movw	r26, r24
    2e94:	2b 01       	movw	r4, r22
    2e96:	fa 01       	movw	r30, r20
    2e98:	9c 91       	ld	r25, X
    2e9a:	92 30       	cpi	r25, 0x02	; 2
    2e9c:	08 f4       	brcc	.+2      	; 0x2ea0 <_fpadd_parts+0x1a>
    2e9e:	39 c1       	rjmp	.+626    	; 0x3112 <_fpadd_parts+0x28c>
    2ea0:	eb 01       	movw	r28, r22
    2ea2:	88 81       	ld	r24, Y
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	08 f4       	brcc	.+2      	; 0x2eaa <_fpadd_parts+0x24>
    2ea8:	33 c1       	rjmp	.+614    	; 0x3110 <_fpadd_parts+0x28a>
    2eaa:	94 30       	cpi	r25, 0x04	; 4
    2eac:	69 f4       	brne	.+26     	; 0x2ec8 <_fpadd_parts+0x42>
    2eae:	84 30       	cpi	r24, 0x04	; 4
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <_fpadd_parts+0x2e>
    2eb2:	2f c1       	rjmp	.+606    	; 0x3112 <_fpadd_parts+0x28c>
    2eb4:	11 96       	adiw	r26, 0x01	; 1
    2eb6:	9c 91       	ld	r25, X
    2eb8:	11 97       	sbiw	r26, 0x01	; 1
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	98 17       	cp	r25, r24
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <_fpadd_parts+0x3c>
    2ec0:	28 c1       	rjmp	.+592    	; 0x3112 <_fpadd_parts+0x28c>
    2ec2:	aa ea       	ldi	r26, 0xAA	; 170
    2ec4:	b6 e0       	ldi	r27, 0x06	; 6
    2ec6:	25 c1       	rjmp	.+586    	; 0x3112 <_fpadd_parts+0x28c>
    2ec8:	84 30       	cpi	r24, 0x04	; 4
    2eca:	09 f4       	brne	.+2      	; 0x2ece <_fpadd_parts+0x48>
    2ecc:	21 c1       	rjmp	.+578    	; 0x3110 <_fpadd_parts+0x28a>
    2ece:	82 30       	cpi	r24, 0x02	; 2
    2ed0:	a9 f4       	brne	.+42     	; 0x2efc <_fpadd_parts+0x76>
    2ed2:	92 30       	cpi	r25, 0x02	; 2
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <_fpadd_parts+0x52>
    2ed6:	1d c1       	rjmp	.+570    	; 0x3112 <_fpadd_parts+0x28c>
    2ed8:	9a 01       	movw	r18, r20
    2eda:	ad 01       	movw	r20, r26
    2edc:	88 e0       	ldi	r24, 0x08	; 8
    2ede:	ea 01       	movw	r28, r20
    2ee0:	09 90       	ld	r0, Y+
    2ee2:	ae 01       	movw	r20, r28
    2ee4:	e9 01       	movw	r28, r18
    2ee6:	09 92       	st	Y+, r0
    2ee8:	9e 01       	movw	r18, r28
    2eea:	81 50       	subi	r24, 0x01	; 1
    2eec:	c1 f7       	brne	.-16     	; 0x2ede <_fpadd_parts+0x58>
    2eee:	e2 01       	movw	r28, r4
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	11 96       	adiw	r26, 0x01	; 1
    2ef4:	9c 91       	ld	r25, X
    2ef6:	89 23       	and	r24, r25
    2ef8:	81 83       	std	Z+1, r24	; 0x01
    2efa:	08 c1       	rjmp	.+528    	; 0x310c <_fpadd_parts+0x286>
    2efc:	92 30       	cpi	r25, 0x02	; 2
    2efe:	09 f4       	brne	.+2      	; 0x2f02 <_fpadd_parts+0x7c>
    2f00:	07 c1       	rjmp	.+526    	; 0x3110 <_fpadd_parts+0x28a>
    2f02:	12 96       	adiw	r26, 0x02	; 2
    2f04:	2d 90       	ld	r2, X+
    2f06:	3c 90       	ld	r3, X
    2f08:	13 97       	sbiw	r26, 0x03	; 3
    2f0a:	eb 01       	movw	r28, r22
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f10:	14 96       	adiw	r26, 0x04	; 4
    2f12:	ad 90       	ld	r10, X+
    2f14:	bd 90       	ld	r11, X+
    2f16:	cd 90       	ld	r12, X+
    2f18:	dc 90       	ld	r13, X
    2f1a:	17 97       	sbiw	r26, 0x07	; 7
    2f1c:	ec 80       	ldd	r14, Y+4	; 0x04
    2f1e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f20:	0e 81       	ldd	r16, Y+6	; 0x06
    2f22:	1f 81       	ldd	r17, Y+7	; 0x07
    2f24:	91 01       	movw	r18, r2
    2f26:	28 1b       	sub	r18, r24
    2f28:	39 0b       	sbc	r19, r25
    2f2a:	b9 01       	movw	r22, r18
    2f2c:	37 ff       	sbrs	r19, 7
    2f2e:	04 c0       	rjmp	.+8      	; 0x2f38 <_fpadd_parts+0xb2>
    2f30:	66 27       	eor	r22, r22
    2f32:	77 27       	eor	r23, r23
    2f34:	62 1b       	sub	r22, r18
    2f36:	73 0b       	sbc	r23, r19
    2f38:	60 32       	cpi	r22, 0x20	; 32
    2f3a:	71 05       	cpc	r23, r1
    2f3c:	0c f0       	brlt	.+2      	; 0x2f40 <_fpadd_parts+0xba>
    2f3e:	61 c0       	rjmp	.+194    	; 0x3002 <_fpadd_parts+0x17c>
    2f40:	12 16       	cp	r1, r18
    2f42:	13 06       	cpc	r1, r19
    2f44:	6c f5       	brge	.+90     	; 0x2fa0 <_fpadd_parts+0x11a>
    2f46:	37 01       	movw	r6, r14
    2f48:	48 01       	movw	r8, r16
    2f4a:	06 2e       	mov	r0, r22
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <_fpadd_parts+0xd0>
    2f4e:	96 94       	lsr	r9
    2f50:	87 94       	ror	r8
    2f52:	77 94       	ror	r7
    2f54:	67 94       	ror	r6
    2f56:	0a 94       	dec	r0
    2f58:	d2 f7       	brpl	.-12     	; 0x2f4e <_fpadd_parts+0xc8>
    2f5a:	21 e0       	ldi	r18, 0x01	; 1
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	04 c0       	rjmp	.+8      	; 0x2f6c <_fpadd_parts+0xe6>
    2f64:	22 0f       	add	r18, r18
    2f66:	33 1f       	adc	r19, r19
    2f68:	44 1f       	adc	r20, r20
    2f6a:	55 1f       	adc	r21, r21
    2f6c:	6a 95       	dec	r22
    2f6e:	d2 f7       	brpl	.-12     	; 0x2f64 <_fpadd_parts+0xde>
    2f70:	21 50       	subi	r18, 0x01	; 1
    2f72:	30 40       	sbci	r19, 0x00	; 0
    2f74:	40 40       	sbci	r20, 0x00	; 0
    2f76:	50 40       	sbci	r21, 0x00	; 0
    2f78:	2e 21       	and	r18, r14
    2f7a:	3f 21       	and	r19, r15
    2f7c:	40 23       	and	r20, r16
    2f7e:	51 23       	and	r21, r17
    2f80:	21 15       	cp	r18, r1
    2f82:	31 05       	cpc	r19, r1
    2f84:	41 05       	cpc	r20, r1
    2f86:	51 05       	cpc	r21, r1
    2f88:	21 f0       	breq	.+8      	; 0x2f92 <_fpadd_parts+0x10c>
    2f8a:	21 e0       	ldi	r18, 0x01	; 1
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e0       	ldi	r20, 0x00	; 0
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	79 01       	movw	r14, r18
    2f94:	8a 01       	movw	r16, r20
    2f96:	e6 28       	or	r14, r6
    2f98:	f7 28       	or	r15, r7
    2f9a:	08 29       	or	r16, r8
    2f9c:	19 29       	or	r17, r9
    2f9e:	3c c0       	rjmp	.+120    	; 0x3018 <_fpadd_parts+0x192>
    2fa0:	23 2b       	or	r18, r19
    2fa2:	d1 f1       	breq	.+116    	; 0x3018 <_fpadd_parts+0x192>
    2fa4:	26 0e       	add	r2, r22
    2fa6:	37 1e       	adc	r3, r23
    2fa8:	35 01       	movw	r6, r10
    2faa:	46 01       	movw	r8, r12
    2fac:	06 2e       	mov	r0, r22
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <_fpadd_parts+0x132>
    2fb0:	96 94       	lsr	r9
    2fb2:	87 94       	ror	r8
    2fb4:	77 94       	ror	r7
    2fb6:	67 94       	ror	r6
    2fb8:	0a 94       	dec	r0
    2fba:	d2 f7       	brpl	.-12     	; 0x2fb0 <_fpadd_parts+0x12a>
    2fbc:	21 e0       	ldi	r18, 0x01	; 1
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	04 c0       	rjmp	.+8      	; 0x2fce <_fpadd_parts+0x148>
    2fc6:	22 0f       	add	r18, r18
    2fc8:	33 1f       	adc	r19, r19
    2fca:	44 1f       	adc	r20, r20
    2fcc:	55 1f       	adc	r21, r21
    2fce:	6a 95       	dec	r22
    2fd0:	d2 f7       	brpl	.-12     	; 0x2fc6 <_fpadd_parts+0x140>
    2fd2:	21 50       	subi	r18, 0x01	; 1
    2fd4:	30 40       	sbci	r19, 0x00	; 0
    2fd6:	40 40       	sbci	r20, 0x00	; 0
    2fd8:	50 40       	sbci	r21, 0x00	; 0
    2fda:	2a 21       	and	r18, r10
    2fdc:	3b 21       	and	r19, r11
    2fde:	4c 21       	and	r20, r12
    2fe0:	5d 21       	and	r21, r13
    2fe2:	21 15       	cp	r18, r1
    2fe4:	31 05       	cpc	r19, r1
    2fe6:	41 05       	cpc	r20, r1
    2fe8:	51 05       	cpc	r21, r1
    2fea:	21 f0       	breq	.+8      	; 0x2ff4 <_fpadd_parts+0x16e>
    2fec:	21 e0       	ldi	r18, 0x01	; 1
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	50 e0       	ldi	r21, 0x00	; 0
    2ff4:	59 01       	movw	r10, r18
    2ff6:	6a 01       	movw	r12, r20
    2ff8:	a6 28       	or	r10, r6
    2ffa:	b7 28       	or	r11, r7
    2ffc:	c8 28       	or	r12, r8
    2ffe:	d9 28       	or	r13, r9
    3000:	0b c0       	rjmp	.+22     	; 0x3018 <_fpadd_parts+0x192>
    3002:	82 15       	cp	r24, r2
    3004:	93 05       	cpc	r25, r3
    3006:	2c f0       	brlt	.+10     	; 0x3012 <_fpadd_parts+0x18c>
    3008:	1c 01       	movw	r2, r24
    300a:	aa 24       	eor	r10, r10
    300c:	bb 24       	eor	r11, r11
    300e:	65 01       	movw	r12, r10
    3010:	03 c0       	rjmp	.+6      	; 0x3018 <_fpadd_parts+0x192>
    3012:	ee 24       	eor	r14, r14
    3014:	ff 24       	eor	r15, r15
    3016:	87 01       	movw	r16, r14
    3018:	11 96       	adiw	r26, 0x01	; 1
    301a:	9c 91       	ld	r25, X
    301c:	d2 01       	movw	r26, r4
    301e:	11 96       	adiw	r26, 0x01	; 1
    3020:	8c 91       	ld	r24, X
    3022:	98 17       	cp	r25, r24
    3024:	09 f4       	brne	.+2      	; 0x3028 <_fpadd_parts+0x1a2>
    3026:	45 c0       	rjmp	.+138    	; 0x30b2 <_fpadd_parts+0x22c>
    3028:	99 23       	and	r25, r25
    302a:	39 f0       	breq	.+14     	; 0x303a <_fpadd_parts+0x1b4>
    302c:	a8 01       	movw	r20, r16
    302e:	97 01       	movw	r18, r14
    3030:	2a 19       	sub	r18, r10
    3032:	3b 09       	sbc	r19, r11
    3034:	4c 09       	sbc	r20, r12
    3036:	5d 09       	sbc	r21, r13
    3038:	06 c0       	rjmp	.+12     	; 0x3046 <_fpadd_parts+0x1c0>
    303a:	a6 01       	movw	r20, r12
    303c:	95 01       	movw	r18, r10
    303e:	2e 19       	sub	r18, r14
    3040:	3f 09       	sbc	r19, r15
    3042:	40 0b       	sbc	r20, r16
    3044:	51 0b       	sbc	r21, r17
    3046:	57 fd       	sbrc	r21, 7
    3048:	08 c0       	rjmp	.+16     	; 0x305a <_fpadd_parts+0x1d4>
    304a:	11 82       	std	Z+1, r1	; 0x01
    304c:	33 82       	std	Z+3, r3	; 0x03
    304e:	22 82       	std	Z+2, r2	; 0x02
    3050:	24 83       	std	Z+4, r18	; 0x04
    3052:	35 83       	std	Z+5, r19	; 0x05
    3054:	46 83       	std	Z+6, r20	; 0x06
    3056:	57 83       	std	Z+7, r21	; 0x07
    3058:	1d c0       	rjmp	.+58     	; 0x3094 <_fpadd_parts+0x20e>
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	81 83       	std	Z+1, r24	; 0x01
    305e:	33 82       	std	Z+3, r3	; 0x03
    3060:	22 82       	std	Z+2, r2	; 0x02
    3062:	88 27       	eor	r24, r24
    3064:	99 27       	eor	r25, r25
    3066:	dc 01       	movw	r26, r24
    3068:	82 1b       	sub	r24, r18
    306a:	93 0b       	sbc	r25, r19
    306c:	a4 0b       	sbc	r26, r20
    306e:	b5 0b       	sbc	r27, r21
    3070:	84 83       	std	Z+4, r24	; 0x04
    3072:	95 83       	std	Z+5, r25	; 0x05
    3074:	a6 83       	std	Z+6, r26	; 0x06
    3076:	b7 83       	std	Z+7, r27	; 0x07
    3078:	0d c0       	rjmp	.+26     	; 0x3094 <_fpadd_parts+0x20e>
    307a:	22 0f       	add	r18, r18
    307c:	33 1f       	adc	r19, r19
    307e:	44 1f       	adc	r20, r20
    3080:	55 1f       	adc	r21, r21
    3082:	24 83       	std	Z+4, r18	; 0x04
    3084:	35 83       	std	Z+5, r19	; 0x05
    3086:	46 83       	std	Z+6, r20	; 0x06
    3088:	57 83       	std	Z+7, r21	; 0x07
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	93 83       	std	Z+3, r25	; 0x03
    3092:	82 83       	std	Z+2, r24	; 0x02
    3094:	24 81       	ldd	r18, Z+4	; 0x04
    3096:	35 81       	ldd	r19, Z+5	; 0x05
    3098:	46 81       	ldd	r20, Z+6	; 0x06
    309a:	57 81       	ldd	r21, Z+7	; 0x07
    309c:	da 01       	movw	r26, r20
    309e:	c9 01       	movw	r24, r18
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	a1 09       	sbc	r26, r1
    30a4:	b1 09       	sbc	r27, r1
    30a6:	8f 5f       	subi	r24, 0xFF	; 255
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	af 4f       	sbci	r26, 0xFF	; 255
    30ac:	bf 43       	sbci	r27, 0x3F	; 63
    30ae:	28 f3       	brcs	.-54     	; 0x307a <_fpadd_parts+0x1f4>
    30b0:	0b c0       	rjmp	.+22     	; 0x30c8 <_fpadd_parts+0x242>
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	33 82       	std	Z+3, r3	; 0x03
    30b6:	22 82       	std	Z+2, r2	; 0x02
    30b8:	ea 0c       	add	r14, r10
    30ba:	fb 1c       	adc	r15, r11
    30bc:	0c 1d       	adc	r16, r12
    30be:	1d 1d       	adc	r17, r13
    30c0:	e4 82       	std	Z+4, r14	; 0x04
    30c2:	f5 82       	std	Z+5, r15	; 0x05
    30c4:	06 83       	std	Z+6, r16	; 0x06
    30c6:	17 83       	std	Z+7, r17	; 0x07
    30c8:	83 e0       	ldi	r24, 0x03	; 3
    30ca:	80 83       	st	Z, r24
    30cc:	24 81       	ldd	r18, Z+4	; 0x04
    30ce:	35 81       	ldd	r19, Z+5	; 0x05
    30d0:	46 81       	ldd	r20, Z+6	; 0x06
    30d2:	57 81       	ldd	r21, Z+7	; 0x07
    30d4:	57 ff       	sbrs	r21, 7
    30d6:	1a c0       	rjmp	.+52     	; 0x310c <_fpadd_parts+0x286>
    30d8:	c9 01       	movw	r24, r18
    30da:	aa 27       	eor	r26, r26
    30dc:	97 fd       	sbrc	r25, 7
    30de:	a0 95       	com	r26
    30e0:	ba 2f       	mov	r27, r26
    30e2:	81 70       	andi	r24, 0x01	; 1
    30e4:	90 70       	andi	r25, 0x00	; 0
    30e6:	a0 70       	andi	r26, 0x00	; 0
    30e8:	b0 70       	andi	r27, 0x00	; 0
    30ea:	56 95       	lsr	r21
    30ec:	47 95       	ror	r20
    30ee:	37 95       	ror	r19
    30f0:	27 95       	ror	r18
    30f2:	82 2b       	or	r24, r18
    30f4:	93 2b       	or	r25, r19
    30f6:	a4 2b       	or	r26, r20
    30f8:	b5 2b       	or	r27, r21
    30fa:	84 83       	std	Z+4, r24	; 0x04
    30fc:	95 83       	std	Z+5, r25	; 0x05
    30fe:	a6 83       	std	Z+6, r26	; 0x06
    3100:	b7 83       	std	Z+7, r27	; 0x07
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	93 83       	std	Z+3, r25	; 0x03
    310a:	82 83       	std	Z+2, r24	; 0x02
    310c:	df 01       	movw	r26, r30
    310e:	01 c0       	rjmp	.+2      	; 0x3112 <_fpadd_parts+0x28c>
    3110:	d2 01       	movw	r26, r4
    3112:	cd 01       	movw	r24, r26
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	e2 e1       	ldi	r30, 0x12	; 18
    311a:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__epilogue_restores__>

0000311e <__subsf3>:
    311e:	a0 e2       	ldi	r26, 0x20	; 32
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e5 e9       	ldi	r30, 0x95	; 149
    3124:	f8 e1       	ldi	r31, 0x18	; 24
    3126:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <__prologue_saves__+0x18>
    312a:	69 83       	std	Y+1, r22	; 0x01
    312c:	7a 83       	std	Y+2, r23	; 0x02
    312e:	8b 83       	std	Y+3, r24	; 0x03
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	2d 83       	std	Y+5, r18	; 0x05
    3134:	3e 83       	std	Y+6, r19	; 0x06
    3136:	4f 83       	std	Y+7, r20	; 0x07
    3138:	58 87       	std	Y+8, r21	; 0x08
    313a:	e9 e0       	ldi	r30, 0x09	; 9
    313c:	ee 2e       	mov	r14, r30
    313e:	f1 2c       	mov	r15, r1
    3140:	ec 0e       	add	r14, r28
    3142:	fd 1e       	adc	r15, r29
    3144:	ce 01       	movw	r24, r28
    3146:	01 96       	adiw	r24, 0x01	; 1
    3148:	b7 01       	movw	r22, r14
    314a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    314e:	8e 01       	movw	r16, r28
    3150:	0f 5e       	subi	r16, 0xEF	; 239
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
    3154:	ce 01       	movw	r24, r28
    3156:	05 96       	adiw	r24, 0x05	; 5
    3158:	b8 01       	movw	r22, r16
    315a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    315e:	8a 89       	ldd	r24, Y+18	; 0x12
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	89 27       	eor	r24, r25
    3164:	8a 8b       	std	Y+18, r24	; 0x12
    3166:	c7 01       	movw	r24, r14
    3168:	b8 01       	movw	r22, r16
    316a:	ae 01       	movw	r20, r28
    316c:	47 5e       	subi	r20, 0xE7	; 231
    316e:	5f 4f       	sbci	r21, 0xFF	; 255
    3170:	0e 94 43 17 	call	0x2e86	; 0x2e86 <_fpadd_parts>
    3174:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__pack_f>
    3178:	a0 96       	adiw	r28, 0x20	; 32
    317a:	e6 e0       	ldi	r30, 0x06	; 6
    317c:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__epilogue_restores__+0x18>

00003180 <__addsf3>:
    3180:	a0 e2       	ldi	r26, 0x20	; 32
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e6 ec       	ldi	r30, 0xC6	; 198
    3186:	f8 e1       	ldi	r31, 0x18	; 24
    3188:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <__prologue_saves__+0x18>
    318c:	69 83       	std	Y+1, r22	; 0x01
    318e:	7a 83       	std	Y+2, r23	; 0x02
    3190:	8b 83       	std	Y+3, r24	; 0x03
    3192:	9c 83       	std	Y+4, r25	; 0x04
    3194:	2d 83       	std	Y+5, r18	; 0x05
    3196:	3e 83       	std	Y+6, r19	; 0x06
    3198:	4f 83       	std	Y+7, r20	; 0x07
    319a:	58 87       	std	Y+8, r21	; 0x08
    319c:	f9 e0       	ldi	r31, 0x09	; 9
    319e:	ef 2e       	mov	r14, r31
    31a0:	f1 2c       	mov	r15, r1
    31a2:	ec 0e       	add	r14, r28
    31a4:	fd 1e       	adc	r15, r29
    31a6:	ce 01       	movw	r24, r28
    31a8:	01 96       	adiw	r24, 0x01	; 1
    31aa:	b7 01       	movw	r22, r14
    31ac:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    31b0:	8e 01       	movw	r16, r28
    31b2:	0f 5e       	subi	r16, 0xEF	; 239
    31b4:	1f 4f       	sbci	r17, 0xFF	; 255
    31b6:	ce 01       	movw	r24, r28
    31b8:	05 96       	adiw	r24, 0x05	; 5
    31ba:	b8 01       	movw	r22, r16
    31bc:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    31c0:	c7 01       	movw	r24, r14
    31c2:	b8 01       	movw	r22, r16
    31c4:	ae 01       	movw	r20, r28
    31c6:	47 5e       	subi	r20, 0xE7	; 231
    31c8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ca:	0e 94 43 17 	call	0x2e86	; 0x2e86 <_fpadd_parts>
    31ce:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__pack_f>
    31d2:	a0 96       	adiw	r28, 0x20	; 32
    31d4:	e6 e0       	ldi	r30, 0x06	; 6
    31d6:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__epilogue_restores__+0x18>

000031da <__mulsf3>:
    31da:	a0 e2       	ldi	r26, 0x20	; 32
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e3 ef       	ldi	r30, 0xF3	; 243
    31e0:	f8 e1       	ldi	r31, 0x18	; 24
    31e2:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__prologue_saves__>
    31e6:	69 83       	std	Y+1, r22	; 0x01
    31e8:	7a 83       	std	Y+2, r23	; 0x02
    31ea:	8b 83       	std	Y+3, r24	; 0x03
    31ec:	9c 83       	std	Y+4, r25	; 0x04
    31ee:	2d 83       	std	Y+5, r18	; 0x05
    31f0:	3e 83       	std	Y+6, r19	; 0x06
    31f2:	4f 83       	std	Y+7, r20	; 0x07
    31f4:	58 87       	std	Y+8, r21	; 0x08
    31f6:	ce 01       	movw	r24, r28
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	be 01       	movw	r22, r28
    31fc:	67 5f       	subi	r22, 0xF7	; 247
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    3204:	ce 01       	movw	r24, r28
    3206:	05 96       	adiw	r24, 0x05	; 5
    3208:	be 01       	movw	r22, r28
    320a:	6f 5e       	subi	r22, 0xEF	; 239
    320c:	7f 4f       	sbci	r23, 0xFF	; 255
    320e:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    3212:	99 85       	ldd	r25, Y+9	; 0x09
    3214:	92 30       	cpi	r25, 0x02	; 2
    3216:	88 f0       	brcs	.+34     	; 0x323a <__mulsf3+0x60>
    3218:	89 89       	ldd	r24, Y+17	; 0x11
    321a:	82 30       	cpi	r24, 0x02	; 2
    321c:	c8 f0       	brcs	.+50     	; 0x3250 <__mulsf3+0x76>
    321e:	94 30       	cpi	r25, 0x04	; 4
    3220:	19 f4       	brne	.+6      	; 0x3228 <__mulsf3+0x4e>
    3222:	82 30       	cpi	r24, 0x02	; 2
    3224:	51 f4       	brne	.+20     	; 0x323a <__mulsf3+0x60>
    3226:	04 c0       	rjmp	.+8      	; 0x3230 <__mulsf3+0x56>
    3228:	84 30       	cpi	r24, 0x04	; 4
    322a:	29 f4       	brne	.+10     	; 0x3236 <__mulsf3+0x5c>
    322c:	92 30       	cpi	r25, 0x02	; 2
    322e:	81 f4       	brne	.+32     	; 0x3250 <__mulsf3+0x76>
    3230:	8a ea       	ldi	r24, 0xAA	; 170
    3232:	96 e0       	ldi	r25, 0x06	; 6
    3234:	c6 c0       	rjmp	.+396    	; 0x33c2 <__mulsf3+0x1e8>
    3236:	92 30       	cpi	r25, 0x02	; 2
    3238:	49 f4       	brne	.+18     	; 0x324c <__mulsf3+0x72>
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	9a 85       	ldd	r25, Y+10	; 0x0a
    323e:	8a 89       	ldd	r24, Y+18	; 0x12
    3240:	98 13       	cpse	r25, r24
    3242:	21 e0       	ldi	r18, 0x01	; 1
    3244:	2a 87       	std	Y+10, r18	; 0x0a
    3246:	ce 01       	movw	r24, r28
    3248:	09 96       	adiw	r24, 0x09	; 9
    324a:	bb c0       	rjmp	.+374    	; 0x33c2 <__mulsf3+0x1e8>
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	49 f4       	brne	.+18     	; 0x3262 <__mulsf3+0x88>
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	9a 85       	ldd	r25, Y+10	; 0x0a
    3254:	8a 89       	ldd	r24, Y+18	; 0x12
    3256:	98 13       	cpse	r25, r24
    3258:	21 e0       	ldi	r18, 0x01	; 1
    325a:	2a 8b       	std	Y+18, r18	; 0x12
    325c:	ce 01       	movw	r24, r28
    325e:	41 96       	adiw	r24, 0x11	; 17
    3260:	b0 c0       	rjmp	.+352    	; 0x33c2 <__mulsf3+0x1e8>
    3262:	2d 84       	ldd	r2, Y+13	; 0x0d
    3264:	3e 84       	ldd	r3, Y+14	; 0x0e
    3266:	4f 84       	ldd	r4, Y+15	; 0x0f
    3268:	58 88       	ldd	r5, Y+16	; 0x10
    326a:	6d 88       	ldd	r6, Y+21	; 0x15
    326c:	7e 88       	ldd	r7, Y+22	; 0x16
    326e:	8f 88       	ldd	r8, Y+23	; 0x17
    3270:	98 8c       	ldd	r9, Y+24	; 0x18
    3272:	ee 24       	eor	r14, r14
    3274:	ff 24       	eor	r15, r15
    3276:	87 01       	movw	r16, r14
    3278:	aa 24       	eor	r10, r10
    327a:	bb 24       	eor	r11, r11
    327c:	65 01       	movw	r12, r10
    327e:	40 e0       	ldi	r20, 0x00	; 0
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	70 e0       	ldi	r23, 0x00	; 0
    3286:	e0 e0       	ldi	r30, 0x00	; 0
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	c1 01       	movw	r24, r2
    328c:	81 70       	andi	r24, 0x01	; 1
    328e:	90 70       	andi	r25, 0x00	; 0
    3290:	89 2b       	or	r24, r25
    3292:	e9 f0       	breq	.+58     	; 0x32ce <__mulsf3+0xf4>
    3294:	e6 0c       	add	r14, r6
    3296:	f7 1c       	adc	r15, r7
    3298:	08 1d       	adc	r16, r8
    329a:	19 1d       	adc	r17, r9
    329c:	9a 01       	movw	r18, r20
    329e:	ab 01       	movw	r20, r22
    32a0:	2a 0d       	add	r18, r10
    32a2:	3b 1d       	adc	r19, r11
    32a4:	4c 1d       	adc	r20, r12
    32a6:	5d 1d       	adc	r21, r13
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	a0 e0       	ldi	r26, 0x00	; 0
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e6 14       	cp	r14, r6
    32b2:	f7 04       	cpc	r15, r7
    32b4:	08 05       	cpc	r16, r8
    32b6:	19 05       	cpc	r17, r9
    32b8:	20 f4       	brcc	.+8      	; 0x32c2 <__mulsf3+0xe8>
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	a0 e0       	ldi	r26, 0x00	; 0
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	ba 01       	movw	r22, r20
    32c4:	a9 01       	movw	r20, r18
    32c6:	48 0f       	add	r20, r24
    32c8:	59 1f       	adc	r21, r25
    32ca:	6a 1f       	adc	r22, r26
    32cc:	7b 1f       	adc	r23, r27
    32ce:	aa 0c       	add	r10, r10
    32d0:	bb 1c       	adc	r11, r11
    32d2:	cc 1c       	adc	r12, r12
    32d4:	dd 1c       	adc	r13, r13
    32d6:	97 fe       	sbrs	r9, 7
    32d8:	08 c0       	rjmp	.+16     	; 0x32ea <__mulsf3+0x110>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	a0 e0       	ldi	r26, 0x00	; 0
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	a8 2a       	or	r10, r24
    32e4:	b9 2a       	or	r11, r25
    32e6:	ca 2a       	or	r12, r26
    32e8:	db 2a       	or	r13, r27
    32ea:	31 96       	adiw	r30, 0x01	; 1
    32ec:	e0 32       	cpi	r30, 0x20	; 32
    32ee:	f1 05       	cpc	r31, r1
    32f0:	49 f0       	breq	.+18     	; 0x3304 <__mulsf3+0x12a>
    32f2:	66 0c       	add	r6, r6
    32f4:	77 1c       	adc	r7, r7
    32f6:	88 1c       	adc	r8, r8
    32f8:	99 1c       	adc	r9, r9
    32fa:	56 94       	lsr	r5
    32fc:	47 94       	ror	r4
    32fe:	37 94       	ror	r3
    3300:	27 94       	ror	r2
    3302:	c3 cf       	rjmp	.-122    	; 0x328a <__mulsf3+0xb0>
    3304:	fa 85       	ldd	r31, Y+10	; 0x0a
    3306:	ea 89       	ldd	r30, Y+18	; 0x12
    3308:	2b 89       	ldd	r18, Y+19	; 0x13
    330a:	3c 89       	ldd	r19, Y+20	; 0x14
    330c:	8b 85       	ldd	r24, Y+11	; 0x0b
    330e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3310:	28 0f       	add	r18, r24
    3312:	39 1f       	adc	r19, r25
    3314:	2e 5f       	subi	r18, 0xFE	; 254
    3316:	3f 4f       	sbci	r19, 0xFF	; 255
    3318:	17 c0       	rjmp	.+46     	; 0x3348 <__mulsf3+0x16e>
    331a:	ca 01       	movw	r24, r20
    331c:	81 70       	andi	r24, 0x01	; 1
    331e:	90 70       	andi	r25, 0x00	; 0
    3320:	89 2b       	or	r24, r25
    3322:	61 f0       	breq	.+24     	; 0x333c <__mulsf3+0x162>
    3324:	16 95       	lsr	r17
    3326:	07 95       	ror	r16
    3328:	f7 94       	ror	r15
    332a:	e7 94       	ror	r14
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	a0 e0       	ldi	r26, 0x00	; 0
    3332:	b0 e8       	ldi	r27, 0x80	; 128
    3334:	e8 2a       	or	r14, r24
    3336:	f9 2a       	or	r15, r25
    3338:	0a 2b       	or	r16, r26
    333a:	1b 2b       	or	r17, r27
    333c:	76 95       	lsr	r23
    333e:	67 95       	ror	r22
    3340:	57 95       	ror	r21
    3342:	47 95       	ror	r20
    3344:	2f 5f       	subi	r18, 0xFF	; 255
    3346:	3f 4f       	sbci	r19, 0xFF	; 255
    3348:	77 fd       	sbrc	r23, 7
    334a:	e7 cf       	rjmp	.-50     	; 0x331a <__mulsf3+0x140>
    334c:	0c c0       	rjmp	.+24     	; 0x3366 <__mulsf3+0x18c>
    334e:	44 0f       	add	r20, r20
    3350:	55 1f       	adc	r21, r21
    3352:	66 1f       	adc	r22, r22
    3354:	77 1f       	adc	r23, r23
    3356:	17 fd       	sbrc	r17, 7
    3358:	41 60       	ori	r20, 0x01	; 1
    335a:	ee 0c       	add	r14, r14
    335c:	ff 1c       	adc	r15, r15
    335e:	00 1f       	adc	r16, r16
    3360:	11 1f       	adc	r17, r17
    3362:	21 50       	subi	r18, 0x01	; 1
    3364:	30 40       	sbci	r19, 0x00	; 0
    3366:	40 30       	cpi	r20, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	59 07       	cpc	r21, r25
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	69 07       	cpc	r22, r25
    3370:	90 e4       	ldi	r25, 0x40	; 64
    3372:	79 07       	cpc	r23, r25
    3374:	60 f3       	brcs	.-40     	; 0x334e <__mulsf3+0x174>
    3376:	2b 8f       	std	Y+27, r18	; 0x1b
    3378:	3c 8f       	std	Y+28, r19	; 0x1c
    337a:	db 01       	movw	r26, r22
    337c:	ca 01       	movw	r24, r20
    337e:	8f 77       	andi	r24, 0x7F	; 127
    3380:	90 70       	andi	r25, 0x00	; 0
    3382:	a0 70       	andi	r26, 0x00	; 0
    3384:	b0 70       	andi	r27, 0x00	; 0
    3386:	80 34       	cpi	r24, 0x40	; 64
    3388:	91 05       	cpc	r25, r1
    338a:	a1 05       	cpc	r26, r1
    338c:	b1 05       	cpc	r27, r1
    338e:	61 f4       	brne	.+24     	; 0x33a8 <__mulsf3+0x1ce>
    3390:	47 fd       	sbrc	r20, 7
    3392:	0a c0       	rjmp	.+20     	; 0x33a8 <__mulsf3+0x1ce>
    3394:	e1 14       	cp	r14, r1
    3396:	f1 04       	cpc	r15, r1
    3398:	01 05       	cpc	r16, r1
    339a:	11 05       	cpc	r17, r1
    339c:	29 f0       	breq	.+10     	; 0x33a8 <__mulsf3+0x1ce>
    339e:	40 5c       	subi	r20, 0xC0	; 192
    33a0:	5f 4f       	sbci	r21, 0xFF	; 255
    33a2:	6f 4f       	sbci	r22, 0xFF	; 255
    33a4:	7f 4f       	sbci	r23, 0xFF	; 255
    33a6:	40 78       	andi	r20, 0x80	; 128
    33a8:	1a 8e       	std	Y+26, r1	; 0x1a
    33aa:	fe 17       	cp	r31, r30
    33ac:	11 f0       	breq	.+4      	; 0x33b2 <__mulsf3+0x1d8>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	8a 8f       	std	Y+26, r24	; 0x1a
    33b2:	4d 8f       	std	Y+29, r20	; 0x1d
    33b4:	5e 8f       	std	Y+30, r21	; 0x1e
    33b6:	6f 8f       	std	Y+31, r22	; 0x1f
    33b8:	78 a3       	std	Y+32, r23	; 0x20
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	89 8f       	std	Y+25, r24	; 0x19
    33be:	ce 01       	movw	r24, r28
    33c0:	49 96       	adiw	r24, 0x19	; 25
    33c2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__pack_f>
    33c6:	a0 96       	adiw	r28, 0x20	; 32
    33c8:	e2 e1       	ldi	r30, 0x12	; 18
    33ca:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__epilogue_restores__>

000033ce <__gtsf2>:
    33ce:	a8 e1       	ldi	r26, 0x18	; 24
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	ed ee       	ldi	r30, 0xED	; 237
    33d4:	f9 e1       	ldi	r31, 0x19	; 25
    33d6:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <__prologue_saves__+0x18>
    33da:	69 83       	std	Y+1, r22	; 0x01
    33dc:	7a 83       	std	Y+2, r23	; 0x02
    33de:	8b 83       	std	Y+3, r24	; 0x03
    33e0:	9c 83       	std	Y+4, r25	; 0x04
    33e2:	2d 83       	std	Y+5, r18	; 0x05
    33e4:	3e 83       	std	Y+6, r19	; 0x06
    33e6:	4f 83       	std	Y+7, r20	; 0x07
    33e8:	58 87       	std	Y+8, r21	; 0x08
    33ea:	89 e0       	ldi	r24, 0x09	; 9
    33ec:	e8 2e       	mov	r14, r24
    33ee:	f1 2c       	mov	r15, r1
    33f0:	ec 0e       	add	r14, r28
    33f2:	fd 1e       	adc	r15, r29
    33f4:	ce 01       	movw	r24, r28
    33f6:	01 96       	adiw	r24, 0x01	; 1
    33f8:	b7 01       	movw	r22, r14
    33fa:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    33fe:	8e 01       	movw	r16, r28
    3400:	0f 5e       	subi	r16, 0xEF	; 239
    3402:	1f 4f       	sbci	r17, 0xFF	; 255
    3404:	ce 01       	movw	r24, r28
    3406:	05 96       	adiw	r24, 0x05	; 5
    3408:	b8 01       	movw	r22, r16
    340a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    340e:	89 85       	ldd	r24, Y+9	; 0x09
    3410:	82 30       	cpi	r24, 0x02	; 2
    3412:	40 f0       	brcs	.+16     	; 0x3424 <__gtsf2+0x56>
    3414:	89 89       	ldd	r24, Y+17	; 0x11
    3416:	82 30       	cpi	r24, 0x02	; 2
    3418:	28 f0       	brcs	.+10     	; 0x3424 <__gtsf2+0x56>
    341a:	c7 01       	movw	r24, r14
    341c:	b8 01       	movw	r22, r16
    341e:	0e 94 c5 1c 	call	0x398a	; 0x398a <__fpcmp_parts_f>
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <__gtsf2+0x58>
    3424:	8f ef       	ldi	r24, 0xFF	; 255
    3426:	68 96       	adiw	r28, 0x18	; 24
    3428:	e6 e0       	ldi	r30, 0x06	; 6
    342a:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__epilogue_restores__+0x18>

0000342e <__gesf2>:
    342e:	a8 e1       	ldi	r26, 0x18	; 24
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	ed e1       	ldi	r30, 0x1D	; 29
    3434:	fa e1       	ldi	r31, 0x1A	; 26
    3436:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <__prologue_saves__+0x18>
    343a:	69 83       	std	Y+1, r22	; 0x01
    343c:	7a 83       	std	Y+2, r23	; 0x02
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	9c 83       	std	Y+4, r25	; 0x04
    3442:	2d 83       	std	Y+5, r18	; 0x05
    3444:	3e 83       	std	Y+6, r19	; 0x06
    3446:	4f 83       	std	Y+7, r20	; 0x07
    3448:	58 87       	std	Y+8, r21	; 0x08
    344a:	89 e0       	ldi	r24, 0x09	; 9
    344c:	e8 2e       	mov	r14, r24
    344e:	f1 2c       	mov	r15, r1
    3450:	ec 0e       	add	r14, r28
    3452:	fd 1e       	adc	r15, r29
    3454:	ce 01       	movw	r24, r28
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	b7 01       	movw	r22, r14
    345a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    345e:	8e 01       	movw	r16, r28
    3460:	0f 5e       	subi	r16, 0xEF	; 239
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
    3464:	ce 01       	movw	r24, r28
    3466:	05 96       	adiw	r24, 0x05	; 5
    3468:	b8 01       	movw	r22, r16
    346a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    346e:	89 85       	ldd	r24, Y+9	; 0x09
    3470:	82 30       	cpi	r24, 0x02	; 2
    3472:	40 f0       	brcs	.+16     	; 0x3484 <__gesf2+0x56>
    3474:	89 89       	ldd	r24, Y+17	; 0x11
    3476:	82 30       	cpi	r24, 0x02	; 2
    3478:	28 f0       	brcs	.+10     	; 0x3484 <__gesf2+0x56>
    347a:	c7 01       	movw	r24, r14
    347c:	b8 01       	movw	r22, r16
    347e:	0e 94 c5 1c 	call	0x398a	; 0x398a <__fpcmp_parts_f>
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <__gesf2+0x58>
    3484:	8f ef       	ldi	r24, 0xFF	; 255
    3486:	68 96       	adiw	r28, 0x18	; 24
    3488:	e6 e0       	ldi	r30, 0x06	; 6
    348a:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__epilogue_restores__+0x18>

0000348e <__ltsf2>:
    348e:	a8 e1       	ldi	r26, 0x18	; 24
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	ed e4       	ldi	r30, 0x4D	; 77
    3494:	fa e1       	ldi	r31, 0x1A	; 26
    3496:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <__prologue_saves__+0x18>
    349a:	69 83       	std	Y+1, r22	; 0x01
    349c:	7a 83       	std	Y+2, r23	; 0x02
    349e:	8b 83       	std	Y+3, r24	; 0x03
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	2d 83       	std	Y+5, r18	; 0x05
    34a4:	3e 83       	std	Y+6, r19	; 0x06
    34a6:	4f 83       	std	Y+7, r20	; 0x07
    34a8:	58 87       	std	Y+8, r21	; 0x08
    34aa:	89 e0       	ldi	r24, 0x09	; 9
    34ac:	e8 2e       	mov	r14, r24
    34ae:	f1 2c       	mov	r15, r1
    34b0:	ec 0e       	add	r14, r28
    34b2:	fd 1e       	adc	r15, r29
    34b4:	ce 01       	movw	r24, r28
    34b6:	01 96       	adiw	r24, 0x01	; 1
    34b8:	b7 01       	movw	r22, r14
    34ba:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    34be:	8e 01       	movw	r16, r28
    34c0:	0f 5e       	subi	r16, 0xEF	; 239
    34c2:	1f 4f       	sbci	r17, 0xFF	; 255
    34c4:	ce 01       	movw	r24, r28
    34c6:	05 96       	adiw	r24, 0x05	; 5
    34c8:	b8 01       	movw	r22, r16
    34ca:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    34ce:	89 85       	ldd	r24, Y+9	; 0x09
    34d0:	82 30       	cpi	r24, 0x02	; 2
    34d2:	40 f0       	brcs	.+16     	; 0x34e4 <__ltsf2+0x56>
    34d4:	89 89       	ldd	r24, Y+17	; 0x11
    34d6:	82 30       	cpi	r24, 0x02	; 2
    34d8:	28 f0       	brcs	.+10     	; 0x34e4 <__ltsf2+0x56>
    34da:	c7 01       	movw	r24, r14
    34dc:	b8 01       	movw	r22, r16
    34de:	0e 94 c5 1c 	call	0x398a	; 0x398a <__fpcmp_parts_f>
    34e2:	01 c0       	rjmp	.+2      	; 0x34e6 <__ltsf2+0x58>
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	68 96       	adiw	r28, 0x18	; 24
    34e8:	e6 e0       	ldi	r30, 0x06	; 6
    34ea:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__epilogue_restores__+0x18>

000034ee <__floatsisf>:
    34ee:	a8 e0       	ldi	r26, 0x08	; 8
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	ed e7       	ldi	r30, 0x7D	; 125
    34f4:	fa e1       	ldi	r31, 0x1A	; 26
    34f6:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__prologue_saves__+0x12>
    34fa:	9b 01       	movw	r18, r22
    34fc:	ac 01       	movw	r20, r24
    34fe:	83 e0       	ldi	r24, 0x03	; 3
    3500:	89 83       	std	Y+1, r24	; 0x01
    3502:	da 01       	movw	r26, r20
    3504:	c9 01       	movw	r24, r18
    3506:	88 27       	eor	r24, r24
    3508:	b7 fd       	sbrc	r27, 7
    350a:	83 95       	inc	r24
    350c:	99 27       	eor	r25, r25
    350e:	aa 27       	eor	r26, r26
    3510:	bb 27       	eor	r27, r27
    3512:	b8 2e       	mov	r11, r24
    3514:	21 15       	cp	r18, r1
    3516:	31 05       	cpc	r19, r1
    3518:	41 05       	cpc	r20, r1
    351a:	51 05       	cpc	r21, r1
    351c:	19 f4       	brne	.+6      	; 0x3524 <__floatsisf+0x36>
    351e:	82 e0       	ldi	r24, 0x02	; 2
    3520:	89 83       	std	Y+1, r24	; 0x01
    3522:	3a c0       	rjmp	.+116    	; 0x3598 <__floatsisf+0xaa>
    3524:	88 23       	and	r24, r24
    3526:	a9 f0       	breq	.+42     	; 0x3552 <__floatsisf+0x64>
    3528:	20 30       	cpi	r18, 0x00	; 0
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	38 07       	cpc	r19, r24
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	48 07       	cpc	r20, r24
    3532:	80 e8       	ldi	r24, 0x80	; 128
    3534:	58 07       	cpc	r21, r24
    3536:	29 f4       	brne	.+10     	; 0x3542 <__floatsisf+0x54>
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	9f ec       	ldi	r25, 0xCF	; 207
    3540:	30 c0       	rjmp	.+96     	; 0x35a2 <__floatsisf+0xb4>
    3542:	ee 24       	eor	r14, r14
    3544:	ff 24       	eor	r15, r15
    3546:	87 01       	movw	r16, r14
    3548:	e2 1a       	sub	r14, r18
    354a:	f3 0a       	sbc	r15, r19
    354c:	04 0b       	sbc	r16, r20
    354e:	15 0b       	sbc	r17, r21
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <__floatsisf+0x68>
    3552:	79 01       	movw	r14, r18
    3554:	8a 01       	movw	r16, r20
    3556:	8e e1       	ldi	r24, 0x1E	; 30
    3558:	c8 2e       	mov	r12, r24
    355a:	d1 2c       	mov	r13, r1
    355c:	dc 82       	std	Y+4, r13	; 0x04
    355e:	cb 82       	std	Y+3, r12	; 0x03
    3560:	ed 82       	std	Y+5, r14	; 0x05
    3562:	fe 82       	std	Y+6, r15	; 0x06
    3564:	0f 83       	std	Y+7, r16	; 0x07
    3566:	18 87       	std	Y+8, r17	; 0x08
    3568:	c8 01       	movw	r24, r16
    356a:	b7 01       	movw	r22, r14
    356c:	0e 94 29 1b 	call	0x3652	; 0x3652 <__clzsi2>
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	18 16       	cp	r1, r24
    3574:	19 06       	cpc	r1, r25
    3576:	84 f4       	brge	.+32     	; 0x3598 <__floatsisf+0xaa>
    3578:	08 2e       	mov	r0, r24
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <__floatsisf+0x96>
    357c:	ee 0c       	add	r14, r14
    357e:	ff 1c       	adc	r15, r15
    3580:	00 1f       	adc	r16, r16
    3582:	11 1f       	adc	r17, r17
    3584:	0a 94       	dec	r0
    3586:	d2 f7       	brpl	.-12     	; 0x357c <__floatsisf+0x8e>
    3588:	ed 82       	std	Y+5, r14	; 0x05
    358a:	fe 82       	std	Y+6, r15	; 0x06
    358c:	0f 83       	std	Y+7, r16	; 0x07
    358e:	18 87       	std	Y+8, r17	; 0x08
    3590:	c8 1a       	sub	r12, r24
    3592:	d9 0a       	sbc	r13, r25
    3594:	dc 82       	std	Y+4, r13	; 0x04
    3596:	cb 82       	std	Y+3, r12	; 0x03
    3598:	ba 82       	std	Y+2, r11	; 0x02
    359a:	ce 01       	movw	r24, r28
    359c:	01 96       	adiw	r24, 0x01	; 1
    359e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__pack_f>
    35a2:	28 96       	adiw	r28, 0x08	; 8
    35a4:	e9 e0       	ldi	r30, 0x09	; 9
    35a6:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__epilogue_restores__+0x12>

000035aa <__fixsfsi>:
    35aa:	ac e0       	ldi	r26, 0x0C	; 12
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	eb ed       	ldi	r30, 0xDB	; 219
    35b0:	fa e1       	ldi	r31, 0x1A	; 26
    35b2:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__prologue_saves__+0x20>
    35b6:	69 83       	std	Y+1, r22	; 0x01
    35b8:	7a 83       	std	Y+2, r23	; 0x02
    35ba:	8b 83       	std	Y+3, r24	; 0x03
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	ce 01       	movw	r24, r28
    35c0:	01 96       	adiw	r24, 0x01	; 1
    35c2:	be 01       	movw	r22, r28
    35c4:	6b 5f       	subi	r22, 0xFB	; 251
    35c6:	7f 4f       	sbci	r23, 0xFF	; 255
    35c8:	0e 94 4d 1c 	call	0x389a	; 0x389a <__unpack_f>
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	82 30       	cpi	r24, 0x02	; 2
    35d0:	61 f1       	breq	.+88     	; 0x362a <__fixsfsi+0x80>
    35d2:	82 30       	cpi	r24, 0x02	; 2
    35d4:	50 f1       	brcs	.+84     	; 0x362a <__fixsfsi+0x80>
    35d6:	84 30       	cpi	r24, 0x04	; 4
    35d8:	21 f4       	brne	.+8      	; 0x35e2 <__fixsfsi+0x38>
    35da:	8e 81       	ldd	r24, Y+6	; 0x06
    35dc:	88 23       	and	r24, r24
    35de:	51 f1       	breq	.+84     	; 0x3634 <__fixsfsi+0x8a>
    35e0:	2e c0       	rjmp	.+92     	; 0x363e <__fixsfsi+0x94>
    35e2:	2f 81       	ldd	r18, Y+7	; 0x07
    35e4:	38 85       	ldd	r19, Y+8	; 0x08
    35e6:	37 fd       	sbrc	r19, 7
    35e8:	20 c0       	rjmp	.+64     	; 0x362a <__fixsfsi+0x80>
    35ea:	6e 81       	ldd	r22, Y+6	; 0x06
    35ec:	2f 31       	cpi	r18, 0x1F	; 31
    35ee:	31 05       	cpc	r19, r1
    35f0:	1c f0       	brlt	.+6      	; 0x35f8 <__fixsfsi+0x4e>
    35f2:	66 23       	and	r22, r22
    35f4:	f9 f0       	breq	.+62     	; 0x3634 <__fixsfsi+0x8a>
    35f6:	23 c0       	rjmp	.+70     	; 0x363e <__fixsfsi+0x94>
    35f8:	8e e1       	ldi	r24, 0x1E	; 30
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	82 1b       	sub	r24, r18
    35fe:	93 0b       	sbc	r25, r19
    3600:	29 85       	ldd	r18, Y+9	; 0x09
    3602:	3a 85       	ldd	r19, Y+10	; 0x0a
    3604:	4b 85       	ldd	r20, Y+11	; 0x0b
    3606:	5c 85       	ldd	r21, Y+12	; 0x0c
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <__fixsfsi+0x68>
    360a:	56 95       	lsr	r21
    360c:	47 95       	ror	r20
    360e:	37 95       	ror	r19
    3610:	27 95       	ror	r18
    3612:	8a 95       	dec	r24
    3614:	d2 f7       	brpl	.-12     	; 0x360a <__fixsfsi+0x60>
    3616:	66 23       	and	r22, r22
    3618:	b1 f0       	breq	.+44     	; 0x3646 <__fixsfsi+0x9c>
    361a:	50 95       	com	r21
    361c:	40 95       	com	r20
    361e:	30 95       	com	r19
    3620:	21 95       	neg	r18
    3622:	3f 4f       	sbci	r19, 0xFF	; 255
    3624:	4f 4f       	sbci	r20, 0xFF	; 255
    3626:	5f 4f       	sbci	r21, 0xFF	; 255
    3628:	0e c0       	rjmp	.+28     	; 0x3646 <__fixsfsi+0x9c>
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e0       	ldi	r20, 0x00	; 0
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	09 c0       	rjmp	.+18     	; 0x3646 <__fixsfsi+0x9c>
    3634:	2f ef       	ldi	r18, 0xFF	; 255
    3636:	3f ef       	ldi	r19, 0xFF	; 255
    3638:	4f ef       	ldi	r20, 0xFF	; 255
    363a:	5f e7       	ldi	r21, 0x7F	; 127
    363c:	04 c0       	rjmp	.+8      	; 0x3646 <__fixsfsi+0x9c>
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e0       	ldi	r20, 0x00	; 0
    3644:	50 e8       	ldi	r21, 0x80	; 128
    3646:	b9 01       	movw	r22, r18
    3648:	ca 01       	movw	r24, r20
    364a:	2c 96       	adiw	r28, 0x0c	; 12
    364c:	e2 e0       	ldi	r30, 0x02	; 2
    364e:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__epilogue_restores__+0x20>

00003652 <__clzsi2>:
    3652:	ef 92       	push	r14
    3654:	ff 92       	push	r15
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    365a:	7b 01       	movw	r14, r22
    365c:	8c 01       	movw	r16, r24
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	e8 16       	cp	r14, r24
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	f8 06       	cpc	r15, r24
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	08 07       	cpc	r16, r24
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	18 07       	cpc	r17, r24
    366e:	88 f4       	brcc	.+34     	; 0x3692 <__clzsi2+0x40>
    3670:	8f ef       	ldi	r24, 0xFF	; 255
    3672:	e8 16       	cp	r14, r24
    3674:	f1 04       	cpc	r15, r1
    3676:	01 05       	cpc	r16, r1
    3678:	11 05       	cpc	r17, r1
    367a:	31 f0       	breq	.+12     	; 0x3688 <__clzsi2+0x36>
    367c:	28 f0       	brcs	.+10     	; 0x3688 <__clzsi2+0x36>
    367e:	88 e0       	ldi	r24, 0x08	; 8
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	a0 e0       	ldi	r26, 0x00	; 0
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	17 c0       	rjmp	.+46     	; 0x36b6 <__clzsi2+0x64>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	a0 e0       	ldi	r26, 0x00	; 0
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	12 c0       	rjmp	.+36     	; 0x36b6 <__clzsi2+0x64>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	e8 16       	cp	r14, r24
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	f8 06       	cpc	r15, r24
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	08 07       	cpc	r16, r24
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	18 07       	cpc	r17, r24
    36a2:	28 f0       	brcs	.+10     	; 0x36ae <__clzsi2+0x5c>
    36a4:	88 e1       	ldi	r24, 0x18	; 24
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	a0 e0       	ldi	r26, 0x00	; 0
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	04 c0       	rjmp	.+8      	; 0x36b6 <__clzsi2+0x64>
    36ae:	80 e1       	ldi	r24, 0x10	; 16
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	a0 e0       	ldi	r26, 0x00	; 0
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	20 e2       	ldi	r18, 0x20	; 32
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	28 1b       	sub	r18, r24
    36c0:	39 0b       	sbc	r19, r25
    36c2:	4a 0b       	sbc	r20, r26
    36c4:	5b 0b       	sbc	r21, r27
    36c6:	04 c0       	rjmp	.+8      	; 0x36d0 <__clzsi2+0x7e>
    36c8:	16 95       	lsr	r17
    36ca:	07 95       	ror	r16
    36cc:	f7 94       	ror	r15
    36ce:	e7 94       	ror	r14
    36d0:	8a 95       	dec	r24
    36d2:	d2 f7       	brpl	.-12     	; 0x36c8 <__clzsi2+0x76>
    36d4:	f7 01       	movw	r30, r14
    36d6:	ee 54       	subi	r30, 0x4E	; 78
    36d8:	f9 4f       	sbci	r31, 0xF9	; 249
    36da:	80 81       	ld	r24, Z
    36dc:	28 1b       	sub	r18, r24
    36de:	31 09       	sbc	r19, r1
    36e0:	41 09       	sbc	r20, r1
    36e2:	51 09       	sbc	r21, r1
    36e4:	c9 01       	movw	r24, r18
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	ff 90       	pop	r15
    36ec:	ef 90       	pop	r14
    36ee:	08 95       	ret

000036f0 <__pack_f>:
    36f0:	df 92       	push	r13
    36f2:	ef 92       	push	r14
    36f4:	ff 92       	push	r15
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	fc 01       	movw	r30, r24
    36fc:	e4 80       	ldd	r14, Z+4	; 0x04
    36fe:	f5 80       	ldd	r15, Z+5	; 0x05
    3700:	06 81       	ldd	r16, Z+6	; 0x06
    3702:	17 81       	ldd	r17, Z+7	; 0x07
    3704:	d1 80       	ldd	r13, Z+1	; 0x01
    3706:	80 81       	ld	r24, Z
    3708:	82 30       	cpi	r24, 0x02	; 2
    370a:	48 f4       	brcc	.+18     	; 0x371e <__pack_f+0x2e>
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	a0 e1       	ldi	r26, 0x10	; 16
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	e8 2a       	or	r14, r24
    3716:	f9 2a       	or	r15, r25
    3718:	0a 2b       	or	r16, r26
    371a:	1b 2b       	or	r17, r27
    371c:	a5 c0       	rjmp	.+330    	; 0x3868 <__pack_f+0x178>
    371e:	84 30       	cpi	r24, 0x04	; 4
    3720:	09 f4       	brne	.+2      	; 0x3724 <__pack_f+0x34>
    3722:	9f c0       	rjmp	.+318    	; 0x3862 <__pack_f+0x172>
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	21 f4       	brne	.+8      	; 0x3730 <__pack_f+0x40>
    3728:	ee 24       	eor	r14, r14
    372a:	ff 24       	eor	r15, r15
    372c:	87 01       	movw	r16, r14
    372e:	05 c0       	rjmp	.+10     	; 0x373a <__pack_f+0x4a>
    3730:	e1 14       	cp	r14, r1
    3732:	f1 04       	cpc	r15, r1
    3734:	01 05       	cpc	r16, r1
    3736:	11 05       	cpc	r17, r1
    3738:	19 f4       	brne	.+6      	; 0x3740 <__pack_f+0x50>
    373a:	e0 e0       	ldi	r30, 0x00	; 0
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	96 c0       	rjmp	.+300    	; 0x386c <__pack_f+0x17c>
    3740:	62 81       	ldd	r22, Z+2	; 0x02
    3742:	73 81       	ldd	r23, Z+3	; 0x03
    3744:	9f ef       	ldi	r25, 0xFF	; 255
    3746:	62 38       	cpi	r22, 0x82	; 130
    3748:	79 07       	cpc	r23, r25
    374a:	0c f0       	brlt	.+2      	; 0x374e <__pack_f+0x5e>
    374c:	5b c0       	rjmp	.+182    	; 0x3804 <__pack_f+0x114>
    374e:	22 e8       	ldi	r18, 0x82	; 130
    3750:	3f ef       	ldi	r19, 0xFF	; 255
    3752:	26 1b       	sub	r18, r22
    3754:	37 0b       	sbc	r19, r23
    3756:	2a 31       	cpi	r18, 0x1A	; 26
    3758:	31 05       	cpc	r19, r1
    375a:	2c f0       	brlt	.+10     	; 0x3766 <__pack_f+0x76>
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e0       	ldi	r20, 0x00	; 0
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	2a c0       	rjmp	.+84     	; 0x37ba <__pack_f+0xca>
    3766:	b8 01       	movw	r22, r16
    3768:	a7 01       	movw	r20, r14
    376a:	02 2e       	mov	r0, r18
    376c:	04 c0       	rjmp	.+8      	; 0x3776 <__pack_f+0x86>
    376e:	76 95       	lsr	r23
    3770:	67 95       	ror	r22
    3772:	57 95       	ror	r21
    3774:	47 95       	ror	r20
    3776:	0a 94       	dec	r0
    3778:	d2 f7       	brpl	.-12     	; 0x376e <__pack_f+0x7e>
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	a0 e0       	ldi	r26, 0x00	; 0
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	04 c0       	rjmp	.+8      	; 0x378c <__pack_f+0x9c>
    3784:	88 0f       	add	r24, r24
    3786:	99 1f       	adc	r25, r25
    3788:	aa 1f       	adc	r26, r26
    378a:	bb 1f       	adc	r27, r27
    378c:	2a 95       	dec	r18
    378e:	d2 f7       	brpl	.-12     	; 0x3784 <__pack_f+0x94>
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	a1 09       	sbc	r26, r1
    3794:	b1 09       	sbc	r27, r1
    3796:	8e 21       	and	r24, r14
    3798:	9f 21       	and	r25, r15
    379a:	a0 23       	and	r26, r16
    379c:	b1 23       	and	r27, r17
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	a1 05       	cpc	r26, r1
    37a2:	b1 05       	cpc	r27, r1
    37a4:	21 f0       	breq	.+8      	; 0x37ae <__pack_f+0xbe>
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	a0 e0       	ldi	r26, 0x00	; 0
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	9a 01       	movw	r18, r20
    37b0:	ab 01       	movw	r20, r22
    37b2:	28 2b       	or	r18, r24
    37b4:	39 2b       	or	r19, r25
    37b6:	4a 2b       	or	r20, r26
    37b8:	5b 2b       	or	r21, r27
    37ba:	da 01       	movw	r26, r20
    37bc:	c9 01       	movw	r24, r18
    37be:	8f 77       	andi	r24, 0x7F	; 127
    37c0:	90 70       	andi	r25, 0x00	; 0
    37c2:	a0 70       	andi	r26, 0x00	; 0
    37c4:	b0 70       	andi	r27, 0x00	; 0
    37c6:	80 34       	cpi	r24, 0x40	; 64
    37c8:	91 05       	cpc	r25, r1
    37ca:	a1 05       	cpc	r26, r1
    37cc:	b1 05       	cpc	r27, r1
    37ce:	39 f4       	brne	.+14     	; 0x37de <__pack_f+0xee>
    37d0:	27 ff       	sbrs	r18, 7
    37d2:	09 c0       	rjmp	.+18     	; 0x37e6 <__pack_f+0xf6>
    37d4:	20 5c       	subi	r18, 0xC0	; 192
    37d6:	3f 4f       	sbci	r19, 0xFF	; 255
    37d8:	4f 4f       	sbci	r20, 0xFF	; 255
    37da:	5f 4f       	sbci	r21, 0xFF	; 255
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <__pack_f+0xf6>
    37de:	21 5c       	subi	r18, 0xC1	; 193
    37e0:	3f 4f       	sbci	r19, 0xFF	; 255
    37e2:	4f 4f       	sbci	r20, 0xFF	; 255
    37e4:	5f 4f       	sbci	r21, 0xFF	; 255
    37e6:	e0 e0       	ldi	r30, 0x00	; 0
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	20 30       	cpi	r18, 0x00	; 0
    37ec:	a0 e0       	ldi	r26, 0x00	; 0
    37ee:	3a 07       	cpc	r19, r26
    37f0:	a0 e0       	ldi	r26, 0x00	; 0
    37f2:	4a 07       	cpc	r20, r26
    37f4:	a0 e4       	ldi	r26, 0x40	; 64
    37f6:	5a 07       	cpc	r21, r26
    37f8:	10 f0       	brcs	.+4      	; 0x37fe <__pack_f+0x10e>
    37fa:	e1 e0       	ldi	r30, 0x01	; 1
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	79 01       	movw	r14, r18
    3800:	8a 01       	movw	r16, r20
    3802:	27 c0       	rjmp	.+78     	; 0x3852 <__pack_f+0x162>
    3804:	60 38       	cpi	r22, 0x80	; 128
    3806:	71 05       	cpc	r23, r1
    3808:	64 f5       	brge	.+88     	; 0x3862 <__pack_f+0x172>
    380a:	fb 01       	movw	r30, r22
    380c:	e1 58       	subi	r30, 0x81	; 129
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	d8 01       	movw	r26, r16
    3812:	c7 01       	movw	r24, r14
    3814:	8f 77       	andi	r24, 0x7F	; 127
    3816:	90 70       	andi	r25, 0x00	; 0
    3818:	a0 70       	andi	r26, 0x00	; 0
    381a:	b0 70       	andi	r27, 0x00	; 0
    381c:	80 34       	cpi	r24, 0x40	; 64
    381e:	91 05       	cpc	r25, r1
    3820:	a1 05       	cpc	r26, r1
    3822:	b1 05       	cpc	r27, r1
    3824:	39 f4       	brne	.+14     	; 0x3834 <__pack_f+0x144>
    3826:	e7 fe       	sbrs	r14, 7
    3828:	0d c0       	rjmp	.+26     	; 0x3844 <__pack_f+0x154>
    382a:	80 e4       	ldi	r24, 0x40	; 64
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	a0 e0       	ldi	r26, 0x00	; 0
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	04 c0       	rjmp	.+8      	; 0x383c <__pack_f+0x14c>
    3834:	8f e3       	ldi	r24, 0x3F	; 63
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	a0 e0       	ldi	r26, 0x00	; 0
    383a:	b0 e0       	ldi	r27, 0x00	; 0
    383c:	e8 0e       	add	r14, r24
    383e:	f9 1e       	adc	r15, r25
    3840:	0a 1f       	adc	r16, r26
    3842:	1b 1f       	adc	r17, r27
    3844:	17 ff       	sbrs	r17, 7
    3846:	05 c0       	rjmp	.+10     	; 0x3852 <__pack_f+0x162>
    3848:	16 95       	lsr	r17
    384a:	07 95       	ror	r16
    384c:	f7 94       	ror	r15
    384e:	e7 94       	ror	r14
    3850:	31 96       	adiw	r30, 0x01	; 1
    3852:	87 e0       	ldi	r24, 0x07	; 7
    3854:	16 95       	lsr	r17
    3856:	07 95       	ror	r16
    3858:	f7 94       	ror	r15
    385a:	e7 94       	ror	r14
    385c:	8a 95       	dec	r24
    385e:	d1 f7       	brne	.-12     	; 0x3854 <__pack_f+0x164>
    3860:	05 c0       	rjmp	.+10     	; 0x386c <__pack_f+0x17c>
    3862:	ee 24       	eor	r14, r14
    3864:	ff 24       	eor	r15, r15
    3866:	87 01       	movw	r16, r14
    3868:	ef ef       	ldi	r30, 0xFF	; 255
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	6e 2f       	mov	r22, r30
    386e:	67 95       	ror	r22
    3870:	66 27       	eor	r22, r22
    3872:	67 95       	ror	r22
    3874:	90 2f       	mov	r25, r16
    3876:	9f 77       	andi	r25, 0x7F	; 127
    3878:	d7 94       	ror	r13
    387a:	dd 24       	eor	r13, r13
    387c:	d7 94       	ror	r13
    387e:	8e 2f       	mov	r24, r30
    3880:	86 95       	lsr	r24
    3882:	49 2f       	mov	r20, r25
    3884:	46 2b       	or	r20, r22
    3886:	58 2f       	mov	r21, r24
    3888:	5d 29       	or	r21, r13
    388a:	b7 01       	movw	r22, r14
    388c:	ca 01       	movw	r24, r20
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	ff 90       	pop	r15
    3894:	ef 90       	pop	r14
    3896:	df 90       	pop	r13
    3898:	08 95       	ret

0000389a <__unpack_f>:
    389a:	fc 01       	movw	r30, r24
    389c:	db 01       	movw	r26, r22
    389e:	40 81       	ld	r20, Z
    38a0:	51 81       	ldd	r21, Z+1	; 0x01
    38a2:	22 81       	ldd	r18, Z+2	; 0x02
    38a4:	62 2f       	mov	r22, r18
    38a6:	6f 77       	andi	r22, 0x7F	; 127
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	22 1f       	adc	r18, r18
    38ac:	22 27       	eor	r18, r18
    38ae:	22 1f       	adc	r18, r18
    38b0:	93 81       	ldd	r25, Z+3	; 0x03
    38b2:	89 2f       	mov	r24, r25
    38b4:	88 0f       	add	r24, r24
    38b6:	82 2b       	or	r24, r18
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	99 1f       	adc	r25, r25
    38be:	99 27       	eor	r25, r25
    38c0:	99 1f       	adc	r25, r25
    38c2:	11 96       	adiw	r26, 0x01	; 1
    38c4:	9c 93       	st	X, r25
    38c6:	11 97       	sbiw	r26, 0x01	; 1
    38c8:	21 15       	cp	r18, r1
    38ca:	31 05       	cpc	r19, r1
    38cc:	a9 f5       	brne	.+106    	; 0x3938 <__unpack_f+0x9e>
    38ce:	41 15       	cp	r20, r1
    38d0:	51 05       	cpc	r21, r1
    38d2:	61 05       	cpc	r22, r1
    38d4:	71 05       	cpc	r23, r1
    38d6:	11 f4       	brne	.+4      	; 0x38dc <__unpack_f+0x42>
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	37 c0       	rjmp	.+110    	; 0x394a <__unpack_f+0xb0>
    38dc:	82 e8       	ldi	r24, 0x82	; 130
    38de:	9f ef       	ldi	r25, 0xFF	; 255
    38e0:	13 96       	adiw	r26, 0x03	; 3
    38e2:	9c 93       	st	X, r25
    38e4:	8e 93       	st	-X, r24
    38e6:	12 97       	sbiw	r26, 0x02	; 2
    38e8:	9a 01       	movw	r18, r20
    38ea:	ab 01       	movw	r20, r22
    38ec:	67 e0       	ldi	r22, 0x07	; 7
    38ee:	22 0f       	add	r18, r18
    38f0:	33 1f       	adc	r19, r19
    38f2:	44 1f       	adc	r20, r20
    38f4:	55 1f       	adc	r21, r21
    38f6:	6a 95       	dec	r22
    38f8:	d1 f7       	brne	.-12     	; 0x38ee <__unpack_f+0x54>
    38fa:	83 e0       	ldi	r24, 0x03	; 3
    38fc:	8c 93       	st	X, r24
    38fe:	0d c0       	rjmp	.+26     	; 0x391a <__unpack_f+0x80>
    3900:	22 0f       	add	r18, r18
    3902:	33 1f       	adc	r19, r19
    3904:	44 1f       	adc	r20, r20
    3906:	55 1f       	adc	r21, r21
    3908:	12 96       	adiw	r26, 0x02	; 2
    390a:	8d 91       	ld	r24, X+
    390c:	9c 91       	ld	r25, X
    390e:	13 97       	sbiw	r26, 0x03	; 3
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	13 96       	adiw	r26, 0x03	; 3
    3914:	9c 93       	st	X, r25
    3916:	8e 93       	st	-X, r24
    3918:	12 97       	sbiw	r26, 0x02	; 2
    391a:	20 30       	cpi	r18, 0x00	; 0
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	38 07       	cpc	r19, r24
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	48 07       	cpc	r20, r24
    3924:	80 e4       	ldi	r24, 0x40	; 64
    3926:	58 07       	cpc	r21, r24
    3928:	58 f3       	brcs	.-42     	; 0x3900 <__unpack_f+0x66>
    392a:	14 96       	adiw	r26, 0x04	; 4
    392c:	2d 93       	st	X+, r18
    392e:	3d 93       	st	X+, r19
    3930:	4d 93       	st	X+, r20
    3932:	5c 93       	st	X, r21
    3934:	17 97       	sbiw	r26, 0x07	; 7
    3936:	08 95       	ret
    3938:	2f 3f       	cpi	r18, 0xFF	; 255
    393a:	31 05       	cpc	r19, r1
    393c:	79 f4       	brne	.+30     	; 0x395c <__unpack_f+0xc2>
    393e:	41 15       	cp	r20, r1
    3940:	51 05       	cpc	r21, r1
    3942:	61 05       	cpc	r22, r1
    3944:	71 05       	cpc	r23, r1
    3946:	19 f4       	brne	.+6      	; 0x394e <__unpack_f+0xb4>
    3948:	84 e0       	ldi	r24, 0x04	; 4
    394a:	8c 93       	st	X, r24
    394c:	08 95       	ret
    394e:	64 ff       	sbrs	r22, 4
    3950:	03 c0       	rjmp	.+6      	; 0x3958 <__unpack_f+0xbe>
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	8c 93       	st	X, r24
    3956:	12 c0       	rjmp	.+36     	; 0x397c <__unpack_f+0xe2>
    3958:	1c 92       	st	X, r1
    395a:	10 c0       	rjmp	.+32     	; 0x397c <__unpack_f+0xe2>
    395c:	2f 57       	subi	r18, 0x7F	; 127
    395e:	30 40       	sbci	r19, 0x00	; 0
    3960:	13 96       	adiw	r26, 0x03	; 3
    3962:	3c 93       	st	X, r19
    3964:	2e 93       	st	-X, r18
    3966:	12 97       	sbiw	r26, 0x02	; 2
    3968:	83 e0       	ldi	r24, 0x03	; 3
    396a:	8c 93       	st	X, r24
    396c:	87 e0       	ldi	r24, 0x07	; 7
    396e:	44 0f       	add	r20, r20
    3970:	55 1f       	adc	r21, r21
    3972:	66 1f       	adc	r22, r22
    3974:	77 1f       	adc	r23, r23
    3976:	8a 95       	dec	r24
    3978:	d1 f7       	brne	.-12     	; 0x396e <__unpack_f+0xd4>
    397a:	70 64       	ori	r23, 0x40	; 64
    397c:	14 96       	adiw	r26, 0x04	; 4
    397e:	4d 93       	st	X+, r20
    3980:	5d 93       	st	X+, r21
    3982:	6d 93       	st	X+, r22
    3984:	7c 93       	st	X, r23
    3986:	17 97       	sbiw	r26, 0x07	; 7
    3988:	08 95       	ret

0000398a <__fpcmp_parts_f>:
    398a:	1f 93       	push	r17
    398c:	dc 01       	movw	r26, r24
    398e:	fb 01       	movw	r30, r22
    3990:	9c 91       	ld	r25, X
    3992:	92 30       	cpi	r25, 0x02	; 2
    3994:	08 f4       	brcc	.+2      	; 0x3998 <__fpcmp_parts_f+0xe>
    3996:	47 c0       	rjmp	.+142    	; 0x3a26 <__fpcmp_parts_f+0x9c>
    3998:	80 81       	ld	r24, Z
    399a:	82 30       	cpi	r24, 0x02	; 2
    399c:	08 f4       	brcc	.+2      	; 0x39a0 <__fpcmp_parts_f+0x16>
    399e:	43 c0       	rjmp	.+134    	; 0x3a26 <__fpcmp_parts_f+0x9c>
    39a0:	94 30       	cpi	r25, 0x04	; 4
    39a2:	51 f4       	brne	.+20     	; 0x39b8 <__fpcmp_parts_f+0x2e>
    39a4:	11 96       	adiw	r26, 0x01	; 1
    39a6:	1c 91       	ld	r17, X
    39a8:	84 30       	cpi	r24, 0x04	; 4
    39aa:	99 f5       	brne	.+102    	; 0x3a12 <__fpcmp_parts_f+0x88>
    39ac:	81 81       	ldd	r24, Z+1	; 0x01
    39ae:	68 2f       	mov	r22, r24
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	61 1b       	sub	r22, r17
    39b4:	71 09       	sbc	r23, r1
    39b6:	3f c0       	rjmp	.+126    	; 0x3a36 <__fpcmp_parts_f+0xac>
    39b8:	84 30       	cpi	r24, 0x04	; 4
    39ba:	21 f0       	breq	.+8      	; 0x39c4 <__fpcmp_parts_f+0x3a>
    39bc:	92 30       	cpi	r25, 0x02	; 2
    39be:	31 f4       	brne	.+12     	; 0x39cc <__fpcmp_parts_f+0x42>
    39c0:	82 30       	cpi	r24, 0x02	; 2
    39c2:	b9 f1       	breq	.+110    	; 0x3a32 <__fpcmp_parts_f+0xa8>
    39c4:	81 81       	ldd	r24, Z+1	; 0x01
    39c6:	88 23       	and	r24, r24
    39c8:	89 f1       	breq	.+98     	; 0x3a2c <__fpcmp_parts_f+0xa2>
    39ca:	2d c0       	rjmp	.+90     	; 0x3a26 <__fpcmp_parts_f+0x9c>
    39cc:	11 96       	adiw	r26, 0x01	; 1
    39ce:	1c 91       	ld	r17, X
    39d0:	11 97       	sbiw	r26, 0x01	; 1
    39d2:	82 30       	cpi	r24, 0x02	; 2
    39d4:	f1 f0       	breq	.+60     	; 0x3a12 <__fpcmp_parts_f+0x88>
    39d6:	81 81       	ldd	r24, Z+1	; 0x01
    39d8:	18 17       	cp	r17, r24
    39da:	d9 f4       	brne	.+54     	; 0x3a12 <__fpcmp_parts_f+0x88>
    39dc:	12 96       	adiw	r26, 0x02	; 2
    39de:	2d 91       	ld	r18, X+
    39e0:	3c 91       	ld	r19, X
    39e2:	13 97       	sbiw	r26, 0x03	; 3
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	82 17       	cp	r24, r18
    39ea:	93 07       	cpc	r25, r19
    39ec:	94 f0       	brlt	.+36     	; 0x3a12 <__fpcmp_parts_f+0x88>
    39ee:	28 17       	cp	r18, r24
    39f0:	39 07       	cpc	r19, r25
    39f2:	bc f0       	brlt	.+46     	; 0x3a22 <__fpcmp_parts_f+0x98>
    39f4:	14 96       	adiw	r26, 0x04	; 4
    39f6:	8d 91       	ld	r24, X+
    39f8:	9d 91       	ld	r25, X+
    39fa:	0d 90       	ld	r0, X+
    39fc:	bc 91       	ld	r27, X
    39fe:	a0 2d       	mov	r26, r0
    3a00:	24 81       	ldd	r18, Z+4	; 0x04
    3a02:	35 81       	ldd	r19, Z+5	; 0x05
    3a04:	46 81       	ldd	r20, Z+6	; 0x06
    3a06:	57 81       	ldd	r21, Z+7	; 0x07
    3a08:	28 17       	cp	r18, r24
    3a0a:	39 07       	cpc	r19, r25
    3a0c:	4a 07       	cpc	r20, r26
    3a0e:	5b 07       	cpc	r21, r27
    3a10:	18 f4       	brcc	.+6      	; 0x3a18 <__fpcmp_parts_f+0x8e>
    3a12:	11 23       	and	r17, r17
    3a14:	41 f0       	breq	.+16     	; 0x3a26 <__fpcmp_parts_f+0x9c>
    3a16:	0a c0       	rjmp	.+20     	; 0x3a2c <__fpcmp_parts_f+0xa2>
    3a18:	82 17       	cp	r24, r18
    3a1a:	93 07       	cpc	r25, r19
    3a1c:	a4 07       	cpc	r26, r20
    3a1e:	b5 07       	cpc	r27, r21
    3a20:	40 f4       	brcc	.+16     	; 0x3a32 <__fpcmp_parts_f+0xa8>
    3a22:	11 23       	and	r17, r17
    3a24:	19 f0       	breq	.+6      	; 0x3a2c <__fpcmp_parts_f+0xa2>
    3a26:	61 e0       	ldi	r22, 0x01	; 1
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	05 c0       	rjmp	.+10     	; 0x3a36 <__fpcmp_parts_f+0xac>
    3a2c:	6f ef       	ldi	r22, 0xFF	; 255
    3a2e:	7f ef       	ldi	r23, 0xFF	; 255
    3a30:	02 c0       	rjmp	.+4      	; 0x3a36 <__fpcmp_parts_f+0xac>
    3a32:	60 e0       	ldi	r22, 0x00	; 0
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	cb 01       	movw	r24, r22
    3a38:	1f 91       	pop	r17
    3a3a:	08 95       	ret

00003a3c <__mulsi3>:
    3a3c:	62 9f       	mul	r22, r18
    3a3e:	d0 01       	movw	r26, r0
    3a40:	73 9f       	mul	r23, r19
    3a42:	f0 01       	movw	r30, r0
    3a44:	82 9f       	mul	r24, r18
    3a46:	e0 0d       	add	r30, r0
    3a48:	f1 1d       	adc	r31, r1
    3a4a:	64 9f       	mul	r22, r20
    3a4c:	e0 0d       	add	r30, r0
    3a4e:	f1 1d       	adc	r31, r1
    3a50:	92 9f       	mul	r25, r18
    3a52:	f0 0d       	add	r31, r0
    3a54:	83 9f       	mul	r24, r19
    3a56:	f0 0d       	add	r31, r0
    3a58:	74 9f       	mul	r23, r20
    3a5a:	f0 0d       	add	r31, r0
    3a5c:	65 9f       	mul	r22, r21
    3a5e:	f0 0d       	add	r31, r0
    3a60:	99 27       	eor	r25, r25
    3a62:	72 9f       	mul	r23, r18
    3a64:	b0 0d       	add	r27, r0
    3a66:	e1 1d       	adc	r30, r1
    3a68:	f9 1f       	adc	r31, r25
    3a6a:	63 9f       	mul	r22, r19
    3a6c:	b0 0d       	add	r27, r0
    3a6e:	e1 1d       	adc	r30, r1
    3a70:	f9 1f       	adc	r31, r25
    3a72:	bd 01       	movw	r22, r26
    3a74:	cf 01       	movw	r24, r30
    3a76:	11 24       	eor	r1, r1
    3a78:	08 95       	ret

00003a7a <__udivmodsi4>:
    3a7a:	a1 e2       	ldi	r26, 0x21	; 33
    3a7c:	1a 2e       	mov	r1, r26
    3a7e:	aa 1b       	sub	r26, r26
    3a80:	bb 1b       	sub	r27, r27
    3a82:	fd 01       	movw	r30, r26
    3a84:	0d c0       	rjmp	.+26     	; 0x3aa0 <__udivmodsi4_ep>

00003a86 <__udivmodsi4_loop>:
    3a86:	aa 1f       	adc	r26, r26
    3a88:	bb 1f       	adc	r27, r27
    3a8a:	ee 1f       	adc	r30, r30
    3a8c:	ff 1f       	adc	r31, r31
    3a8e:	a2 17       	cp	r26, r18
    3a90:	b3 07       	cpc	r27, r19
    3a92:	e4 07       	cpc	r30, r20
    3a94:	f5 07       	cpc	r31, r21
    3a96:	20 f0       	brcs	.+8      	; 0x3aa0 <__udivmodsi4_ep>
    3a98:	a2 1b       	sub	r26, r18
    3a9a:	b3 0b       	sbc	r27, r19
    3a9c:	e4 0b       	sbc	r30, r20
    3a9e:	f5 0b       	sbc	r31, r21

00003aa0 <__udivmodsi4_ep>:
    3aa0:	66 1f       	adc	r22, r22
    3aa2:	77 1f       	adc	r23, r23
    3aa4:	88 1f       	adc	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	1a 94       	dec	r1
    3aaa:	69 f7       	brne	.-38     	; 0x3a86 <__udivmodsi4_loop>
    3aac:	60 95       	com	r22
    3aae:	70 95       	com	r23
    3ab0:	80 95       	com	r24
    3ab2:	90 95       	com	r25
    3ab4:	9b 01       	movw	r18, r22
    3ab6:	ac 01       	movw	r20, r24
    3ab8:	bd 01       	movw	r22, r26
    3aba:	cf 01       	movw	r24, r30
    3abc:	08 95       	ret

00003abe <__prologue_saves__>:
    3abe:	2f 92       	push	r2
    3ac0:	3f 92       	push	r3
    3ac2:	4f 92       	push	r4
    3ac4:	5f 92       	push	r5
    3ac6:	6f 92       	push	r6
    3ac8:	7f 92       	push	r7
    3aca:	8f 92       	push	r8
    3acc:	9f 92       	push	r9
    3ace:	af 92       	push	r10
    3ad0:	bf 92       	push	r11
    3ad2:	cf 92       	push	r12
    3ad4:	df 92       	push	r13
    3ad6:	ef 92       	push	r14
    3ad8:	ff 92       	push	r15
    3ada:	0f 93       	push	r16
    3adc:	1f 93       	push	r17
    3ade:	cf 93       	push	r28
    3ae0:	df 93       	push	r29
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
    3ae6:	ca 1b       	sub	r28, r26
    3ae8:	db 0b       	sbc	r29, r27
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	09 94       	ijmp

00003af6 <__epilogue_restores__>:
    3af6:	2a 88       	ldd	r2, Y+18	; 0x12
    3af8:	39 88       	ldd	r3, Y+17	; 0x11
    3afa:	48 88       	ldd	r4, Y+16	; 0x10
    3afc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3afe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b00:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b02:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b04:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b06:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b08:	b9 84       	ldd	r11, Y+9	; 0x09
    3b0a:	c8 84       	ldd	r12, Y+8	; 0x08
    3b0c:	df 80       	ldd	r13, Y+7	; 0x07
    3b0e:	ee 80       	ldd	r14, Y+6	; 0x06
    3b10:	fd 80       	ldd	r15, Y+5	; 0x05
    3b12:	0c 81       	ldd	r16, Y+4	; 0x04
    3b14:	1b 81       	ldd	r17, Y+3	; 0x03
    3b16:	aa 81       	ldd	r26, Y+2	; 0x02
    3b18:	b9 81       	ldd	r27, Y+1	; 0x01
    3b1a:	ce 0f       	add	r28, r30
    3b1c:	d1 1d       	adc	r29, r1
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	ed 01       	movw	r28, r26
    3b2a:	08 95       	ret

00003b2c <atoi>:
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	88 27       	eor	r24, r24
    3b30:	99 27       	eor	r25, r25
    3b32:	e8 94       	clt
    3b34:	21 91       	ld	r18, Z+
    3b36:	20 32       	cpi	r18, 0x20	; 32
    3b38:	e9 f3       	breq	.-6      	; 0x3b34 <atoi+0x8>
    3b3a:	29 30       	cpi	r18, 0x09	; 9
    3b3c:	10 f0       	brcs	.+4      	; 0x3b42 <atoi+0x16>
    3b3e:	2e 30       	cpi	r18, 0x0E	; 14
    3b40:	c8 f3       	brcs	.-14     	; 0x3b34 <atoi+0x8>
    3b42:	2b 32       	cpi	r18, 0x2B	; 43
    3b44:	41 f0       	breq	.+16     	; 0x3b56 <atoi+0x2a>
    3b46:	2d 32       	cpi	r18, 0x2D	; 45
    3b48:	39 f4       	brne	.+14     	; 0x3b58 <atoi+0x2c>
    3b4a:	68 94       	set
    3b4c:	04 c0       	rjmp	.+8      	; 0x3b56 <atoi+0x2a>
    3b4e:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <__mulhi_const_10>
    3b52:	82 0f       	add	r24, r18
    3b54:	91 1d       	adc	r25, r1
    3b56:	21 91       	ld	r18, Z+
    3b58:	20 53       	subi	r18, 0x30	; 48
    3b5a:	2a 30       	cpi	r18, 0x0A	; 10
    3b5c:	c0 f3       	brcs	.-16     	; 0x3b4e <atoi+0x22>
    3b5e:	1e f4       	brtc	.+6      	; 0x3b66 <atoi+0x3a>
    3b60:	90 95       	com	r25
    3b62:	81 95       	neg	r24
    3b64:	9f 4f       	sbci	r25, 0xFF	; 255
    3b66:	08 95       	ret

00003b68 <strcat>:
    3b68:	fb 01       	movw	r30, r22
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	0d 90       	ld	r0, X+
    3b6e:	00 20       	and	r0, r0
    3b70:	e9 f7       	brne	.-6      	; 0x3b6c <strcat+0x4>
    3b72:	11 97       	sbiw	r26, 0x01	; 1
    3b74:	01 90       	ld	r0, Z+
    3b76:	0d 92       	st	X+, r0
    3b78:	00 20       	and	r0, r0
    3b7a:	e1 f7       	brne	.-8      	; 0x3b74 <strcat+0xc>
    3b7c:	08 95       	ret

00003b7e <strchr>:
    3b7e:	fc 01       	movw	r30, r24
    3b80:	81 91       	ld	r24, Z+
    3b82:	86 17       	cp	r24, r22
    3b84:	21 f0       	breq	.+8      	; 0x3b8e <strchr+0x10>
    3b86:	88 23       	and	r24, r24
    3b88:	d9 f7       	brne	.-10     	; 0x3b80 <strchr+0x2>
    3b8a:	99 27       	eor	r25, r25
    3b8c:	08 95       	ret
    3b8e:	31 97       	sbiw	r30, 0x01	; 1
    3b90:	cf 01       	movw	r24, r30
    3b92:	08 95       	ret

00003b94 <strcpy>:
    3b94:	fb 01       	movw	r30, r22
    3b96:	dc 01       	movw	r26, r24
    3b98:	01 90       	ld	r0, Z+
    3b9a:	0d 92       	st	X+, r0
    3b9c:	00 20       	and	r0, r0
    3b9e:	e1 f7       	brne	.-8      	; 0x3b98 <strcpy+0x4>
    3ba0:	08 95       	ret

00003ba2 <strncat>:
    3ba2:	fb 01       	movw	r30, r22
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	0d 90       	ld	r0, X+
    3ba8:	00 20       	and	r0, r0
    3baa:	e9 f7       	brne	.-6      	; 0x3ba6 <strncat+0x4>
    3bac:	11 97       	sbiw	r26, 0x01	; 1
    3bae:	41 50       	subi	r20, 0x01	; 1
    3bb0:	50 40       	sbci	r21, 0x00	; 0
    3bb2:	28 f0       	brcs	.+10     	; 0x3bbe <strncat+0x1c>
    3bb4:	01 90       	ld	r0, Z+
    3bb6:	00 20       	and	r0, r0
    3bb8:	0d 92       	st	X+, r0
    3bba:	c9 f7       	brne	.-14     	; 0x3bae <strncat+0xc>
    3bbc:	08 95       	ret
    3bbe:	1c 92       	st	X, r1
    3bc0:	08 95       	ret

00003bc2 <strncmp>:
    3bc2:	fb 01       	movw	r30, r22
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	41 50       	subi	r20, 0x01	; 1
    3bc8:	50 40       	sbci	r21, 0x00	; 0
    3bca:	30 f0       	brcs	.+12     	; 0x3bd8 <strncmp+0x16>
    3bcc:	8d 91       	ld	r24, X+
    3bce:	01 90       	ld	r0, Z+
    3bd0:	80 19       	sub	r24, r0
    3bd2:	19 f4       	brne	.+6      	; 0x3bda <strncmp+0x18>
    3bd4:	00 20       	and	r0, r0
    3bd6:	b9 f7       	brne	.-18     	; 0x3bc6 <strncmp+0x4>
    3bd8:	88 1b       	sub	r24, r24
    3bda:	99 0b       	sbc	r25, r25
    3bdc:	08 95       	ret

00003bde <strncpy>:
    3bde:	fb 01       	movw	r30, r22
    3be0:	dc 01       	movw	r26, r24
    3be2:	41 50       	subi	r20, 0x01	; 1
    3be4:	50 40       	sbci	r21, 0x00	; 0
    3be6:	48 f0       	brcs	.+18     	; 0x3bfa <strncpy+0x1c>
    3be8:	01 90       	ld	r0, Z+
    3bea:	0d 92       	st	X+, r0
    3bec:	00 20       	and	r0, r0
    3bee:	c9 f7       	brne	.-14     	; 0x3be2 <strncpy+0x4>
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <strncpy+0x16>
    3bf2:	1d 92       	st	X+, r1
    3bf4:	41 50       	subi	r20, 0x01	; 1
    3bf6:	50 40       	sbci	r21, 0x00	; 0
    3bf8:	e0 f7       	brcc	.-8      	; 0x3bf2 <strncpy+0x14>
    3bfa:	08 95       	ret

00003bfc <strstr>:
    3bfc:	fb 01       	movw	r30, r22
    3bfe:	51 91       	ld	r21, Z+
    3c00:	55 23       	and	r21, r21
    3c02:	a9 f0       	breq	.+42     	; 0x3c2e <strstr+0x32>
    3c04:	bf 01       	movw	r22, r30
    3c06:	dc 01       	movw	r26, r24
    3c08:	4d 91       	ld	r20, X+
    3c0a:	45 17       	cp	r20, r21
    3c0c:	41 11       	cpse	r20, r1
    3c0e:	e1 f7       	brne	.-8      	; 0x3c08 <strstr+0xc>
    3c10:	59 f4       	brne	.+22     	; 0x3c28 <strstr+0x2c>
    3c12:	cd 01       	movw	r24, r26
    3c14:	01 90       	ld	r0, Z+
    3c16:	00 20       	and	r0, r0
    3c18:	49 f0       	breq	.+18     	; 0x3c2c <strstr+0x30>
    3c1a:	4d 91       	ld	r20, X+
    3c1c:	40 15       	cp	r20, r0
    3c1e:	41 11       	cpse	r20, r1
    3c20:	c9 f3       	breq	.-14     	; 0x3c14 <strstr+0x18>
    3c22:	fb 01       	movw	r30, r22
    3c24:	41 11       	cpse	r20, r1
    3c26:	ef cf       	rjmp	.-34     	; 0x3c06 <strstr+0xa>
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	08 95       	ret

00003c30 <itoa>:
    3c30:	fb 01       	movw	r30, r22
    3c32:	9f 01       	movw	r18, r30
    3c34:	e8 94       	clt
    3c36:	42 30       	cpi	r20, 0x02	; 2
    3c38:	c4 f0       	brlt	.+48     	; 0x3c6a <itoa+0x3a>
    3c3a:	45 32       	cpi	r20, 0x25	; 37
    3c3c:	b4 f4       	brge	.+44     	; 0x3c6a <itoa+0x3a>
    3c3e:	4a 30       	cpi	r20, 0x0A	; 10
    3c40:	29 f4       	brne	.+10     	; 0x3c4c <itoa+0x1c>
    3c42:	97 fb       	bst	r25, 7
    3c44:	1e f4       	brtc	.+6      	; 0x3c4c <itoa+0x1c>
    3c46:	90 95       	com	r25
    3c48:	81 95       	neg	r24
    3c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4c:	64 2f       	mov	r22, r20
    3c4e:	77 27       	eor	r23, r23
    3c50:	0e 94 28 21 	call	0x4250	; 0x4250 <__udivmodhi4>
    3c54:	80 5d       	subi	r24, 0xD0	; 208
    3c56:	8a 33       	cpi	r24, 0x3A	; 58
    3c58:	0c f0       	brlt	.+2      	; 0x3c5c <itoa+0x2c>
    3c5a:	89 5d       	subi	r24, 0xD9	; 217
    3c5c:	81 93       	st	Z+, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	a1 f7       	brne	.-24     	; 0x3c4c <itoa+0x1c>
    3c64:	16 f4       	brtc	.+4      	; 0x3c6a <itoa+0x3a>
    3c66:	5d e2       	ldi	r21, 0x2D	; 45
    3c68:	51 93       	st	Z+, r21
    3c6a:	10 82       	st	Z, r1
    3c6c:	c9 01       	movw	r24, r18
    3c6e:	0c 94 8e 20 	jmp	0x411c	; 0x411c <strrev>

00003c72 <__mulhi_const_10>:
    3c72:	7a e0       	ldi	r23, 0x0A	; 10
    3c74:	97 9f       	mul	r25, r23
    3c76:	90 2d       	mov	r25, r0
    3c78:	87 9f       	mul	r24, r23
    3c7a:	80 2d       	mov	r24, r0
    3c7c:	91 0d       	add	r25, r1
    3c7e:	11 24       	eor	r1, r1
    3c80:	08 95       	ret

00003c82 <sprintf>:
    3c82:	0f 93       	push	r16
    3c84:	1f 93       	push	r17
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	2e 97       	sbiw	r28, 0x0e	; 14
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	0d 89       	ldd	r16, Y+21	; 0x15
    3c9c:	1e 89       	ldd	r17, Y+22	; 0x16
    3c9e:	86 e0       	ldi	r24, 0x06	; 6
    3ca0:	8c 83       	std	Y+4, r24	; 0x04
    3ca2:	1a 83       	std	Y+2, r17	; 0x02
    3ca4:	09 83       	std	Y+1, r16	; 0x01
    3ca6:	8f ef       	ldi	r24, 0xFF	; 255
    3ca8:	9f e7       	ldi	r25, 0x7F	; 127
    3caa:	9e 83       	std	Y+6, r25	; 0x06
    3cac:	8d 83       	std	Y+5, r24	; 0x05
    3cae:	9e 01       	movw	r18, r28
    3cb0:	27 5e       	subi	r18, 0xE7	; 231
    3cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	6f 89       	ldd	r22, Y+23	; 0x17
    3cba:	78 8d       	ldd	r23, Y+24	; 0x18
    3cbc:	a9 01       	movw	r20, r18
    3cbe:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <vfprintf>
    3cc2:	2f 81       	ldd	r18, Y+7	; 0x07
    3cc4:	38 85       	ldd	r19, Y+8	; 0x08
    3cc6:	02 0f       	add	r16, r18
    3cc8:	13 1f       	adc	r17, r19
    3cca:	f8 01       	movw	r30, r16
    3ccc:	10 82       	st	Z, r1
    3cce:	2e 96       	adiw	r28, 0x0e	; 14
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	f8 94       	cli
    3cd4:	de bf       	out	0x3e, r29	; 62
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	cd bf       	out	0x3d, r28	; 61
    3cda:	cf 91       	pop	r28
    3cdc:	df 91       	pop	r29
    3cde:	1f 91       	pop	r17
    3ce0:	0f 91       	pop	r16
    3ce2:	08 95       	ret

00003ce4 <vfprintf>:
    3ce4:	2f 92       	push	r2
    3ce6:	3f 92       	push	r3
    3ce8:	4f 92       	push	r4
    3cea:	5f 92       	push	r5
    3cec:	6f 92       	push	r6
    3cee:	7f 92       	push	r7
    3cf0:	8f 92       	push	r8
    3cf2:	9f 92       	push	r9
    3cf4:	af 92       	push	r10
    3cf6:	bf 92       	push	r11
    3cf8:	cf 92       	push	r12
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	df 93       	push	r29
    3d06:	cf 93       	push	r28
    3d08:	cd b7       	in	r28, 0x3d	; 61
    3d0a:	de b7       	in	r29, 0x3e	; 62
    3d0c:	2b 97       	sbiw	r28, 0x0b	; 11
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
    3d18:	3c 01       	movw	r6, r24
    3d1a:	2b 01       	movw	r4, r22
    3d1c:	5a 01       	movw	r10, r20
    3d1e:	fc 01       	movw	r30, r24
    3d20:	17 82       	std	Z+7, r1	; 0x07
    3d22:	16 82       	std	Z+6, r1	; 0x06
    3d24:	83 81       	ldd	r24, Z+3	; 0x03
    3d26:	81 fd       	sbrc	r24, 1
    3d28:	03 c0       	rjmp	.+6      	; 0x3d30 <vfprintf+0x4c>
    3d2a:	6f ef       	ldi	r22, 0xFF	; 255
    3d2c:	7f ef       	ldi	r23, 0xFF	; 255
    3d2e:	c6 c1       	rjmp	.+908    	; 0x40bc <vfprintf+0x3d8>
    3d30:	9a e0       	ldi	r25, 0x0A	; 10
    3d32:	89 2e       	mov	r8, r25
    3d34:	1e 01       	movw	r2, r28
    3d36:	08 94       	sec
    3d38:	21 1c       	adc	r2, r1
    3d3a:	31 1c       	adc	r3, r1
    3d3c:	f3 01       	movw	r30, r6
    3d3e:	23 81       	ldd	r18, Z+3	; 0x03
    3d40:	f2 01       	movw	r30, r4
    3d42:	23 fd       	sbrc	r18, 3
    3d44:	85 91       	lpm	r24, Z+
    3d46:	23 ff       	sbrs	r18, 3
    3d48:	81 91       	ld	r24, Z+
    3d4a:	2f 01       	movw	r4, r30
    3d4c:	88 23       	and	r24, r24
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <vfprintf+0x6e>
    3d50:	b2 c1       	rjmp	.+868    	; 0x40b6 <vfprintf+0x3d2>
    3d52:	85 32       	cpi	r24, 0x25	; 37
    3d54:	39 f4       	brne	.+14     	; 0x3d64 <vfprintf+0x80>
    3d56:	23 fd       	sbrc	r18, 3
    3d58:	85 91       	lpm	r24, Z+
    3d5a:	23 ff       	sbrs	r18, 3
    3d5c:	81 91       	ld	r24, Z+
    3d5e:	2f 01       	movw	r4, r30
    3d60:	85 32       	cpi	r24, 0x25	; 37
    3d62:	29 f4       	brne	.+10     	; 0x3d6e <vfprintf+0x8a>
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	b3 01       	movw	r22, r6
    3d68:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    3d6c:	e7 cf       	rjmp	.-50     	; 0x3d3c <vfprintf+0x58>
    3d6e:	98 2f       	mov	r25, r24
    3d70:	ff 24       	eor	r15, r15
    3d72:	ee 24       	eor	r14, r14
    3d74:	99 24       	eor	r9, r9
    3d76:	ff e1       	ldi	r31, 0x1F	; 31
    3d78:	ff 15       	cp	r31, r15
    3d7a:	d0 f0       	brcs	.+52     	; 0x3db0 <vfprintf+0xcc>
    3d7c:	9b 32       	cpi	r25, 0x2B	; 43
    3d7e:	69 f0       	breq	.+26     	; 0x3d9a <vfprintf+0xb6>
    3d80:	9c 32       	cpi	r25, 0x2C	; 44
    3d82:	28 f4       	brcc	.+10     	; 0x3d8e <vfprintf+0xaa>
    3d84:	90 32       	cpi	r25, 0x20	; 32
    3d86:	59 f0       	breq	.+22     	; 0x3d9e <vfprintf+0xba>
    3d88:	93 32       	cpi	r25, 0x23	; 35
    3d8a:	91 f4       	brne	.+36     	; 0x3db0 <vfprintf+0xcc>
    3d8c:	0e c0       	rjmp	.+28     	; 0x3daa <vfprintf+0xc6>
    3d8e:	9d 32       	cpi	r25, 0x2D	; 45
    3d90:	49 f0       	breq	.+18     	; 0x3da4 <vfprintf+0xc0>
    3d92:	90 33       	cpi	r25, 0x30	; 48
    3d94:	69 f4       	brne	.+26     	; 0x3db0 <vfprintf+0xcc>
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	24 c0       	rjmp	.+72     	; 0x3de2 <vfprintf+0xfe>
    3d9a:	52 e0       	ldi	r21, 0x02	; 2
    3d9c:	f5 2a       	or	r15, r21
    3d9e:	84 e0       	ldi	r24, 0x04	; 4
    3da0:	f8 2a       	or	r15, r24
    3da2:	28 c0       	rjmp	.+80     	; 0x3df4 <vfprintf+0x110>
    3da4:	98 e0       	ldi	r25, 0x08	; 8
    3da6:	f9 2a       	or	r15, r25
    3da8:	25 c0       	rjmp	.+74     	; 0x3df4 <vfprintf+0x110>
    3daa:	e0 e1       	ldi	r30, 0x10	; 16
    3dac:	fe 2a       	or	r15, r30
    3dae:	22 c0       	rjmp	.+68     	; 0x3df4 <vfprintf+0x110>
    3db0:	f7 fc       	sbrc	r15, 7
    3db2:	29 c0       	rjmp	.+82     	; 0x3e06 <vfprintf+0x122>
    3db4:	89 2f       	mov	r24, r25
    3db6:	80 53       	subi	r24, 0x30	; 48
    3db8:	8a 30       	cpi	r24, 0x0A	; 10
    3dba:	70 f4       	brcc	.+28     	; 0x3dd8 <vfprintf+0xf4>
    3dbc:	f6 fe       	sbrs	r15, 6
    3dbe:	05 c0       	rjmp	.+10     	; 0x3dca <vfprintf+0xe6>
    3dc0:	98 9c       	mul	r9, r8
    3dc2:	90 2c       	mov	r9, r0
    3dc4:	11 24       	eor	r1, r1
    3dc6:	98 0e       	add	r9, r24
    3dc8:	15 c0       	rjmp	.+42     	; 0x3df4 <vfprintf+0x110>
    3dca:	e8 9c       	mul	r14, r8
    3dcc:	e0 2c       	mov	r14, r0
    3dce:	11 24       	eor	r1, r1
    3dd0:	e8 0e       	add	r14, r24
    3dd2:	f0 e2       	ldi	r31, 0x20	; 32
    3dd4:	ff 2a       	or	r15, r31
    3dd6:	0e c0       	rjmp	.+28     	; 0x3df4 <vfprintf+0x110>
    3dd8:	9e 32       	cpi	r25, 0x2E	; 46
    3dda:	29 f4       	brne	.+10     	; 0x3de6 <vfprintf+0x102>
    3ddc:	f6 fc       	sbrc	r15, 6
    3dde:	6b c1       	rjmp	.+726    	; 0x40b6 <vfprintf+0x3d2>
    3de0:	40 e4       	ldi	r20, 0x40	; 64
    3de2:	f4 2a       	or	r15, r20
    3de4:	07 c0       	rjmp	.+14     	; 0x3df4 <vfprintf+0x110>
    3de6:	9c 36       	cpi	r25, 0x6C	; 108
    3de8:	19 f4       	brne	.+6      	; 0x3df0 <vfprintf+0x10c>
    3dea:	50 e8       	ldi	r21, 0x80	; 128
    3dec:	f5 2a       	or	r15, r21
    3dee:	02 c0       	rjmp	.+4      	; 0x3df4 <vfprintf+0x110>
    3df0:	98 36       	cpi	r25, 0x68	; 104
    3df2:	49 f4       	brne	.+18     	; 0x3e06 <vfprintf+0x122>
    3df4:	f2 01       	movw	r30, r4
    3df6:	23 fd       	sbrc	r18, 3
    3df8:	95 91       	lpm	r25, Z+
    3dfa:	23 ff       	sbrs	r18, 3
    3dfc:	91 91       	ld	r25, Z+
    3dfe:	2f 01       	movw	r4, r30
    3e00:	99 23       	and	r25, r25
    3e02:	09 f0       	breq	.+2      	; 0x3e06 <vfprintf+0x122>
    3e04:	b8 cf       	rjmp	.-144    	; 0x3d76 <vfprintf+0x92>
    3e06:	89 2f       	mov	r24, r25
    3e08:	85 54       	subi	r24, 0x45	; 69
    3e0a:	83 30       	cpi	r24, 0x03	; 3
    3e0c:	18 f0       	brcs	.+6      	; 0x3e14 <vfprintf+0x130>
    3e0e:	80 52       	subi	r24, 0x20	; 32
    3e10:	83 30       	cpi	r24, 0x03	; 3
    3e12:	38 f4       	brcc	.+14     	; 0x3e22 <vfprintf+0x13e>
    3e14:	44 e0       	ldi	r20, 0x04	; 4
    3e16:	50 e0       	ldi	r21, 0x00	; 0
    3e18:	a4 0e       	add	r10, r20
    3e1a:	b5 1e       	adc	r11, r21
    3e1c:	5f e3       	ldi	r21, 0x3F	; 63
    3e1e:	59 83       	std	Y+1, r21	; 0x01
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <vfprintf+0x15c>
    3e22:	93 36       	cpi	r25, 0x63	; 99
    3e24:	31 f0       	breq	.+12     	; 0x3e32 <vfprintf+0x14e>
    3e26:	93 37       	cpi	r25, 0x73	; 115
    3e28:	79 f0       	breq	.+30     	; 0x3e48 <vfprintf+0x164>
    3e2a:	93 35       	cpi	r25, 0x53	; 83
    3e2c:	09 f0       	breq	.+2      	; 0x3e30 <vfprintf+0x14c>
    3e2e:	56 c0       	rjmp	.+172    	; 0x3edc <vfprintf+0x1f8>
    3e30:	20 c0       	rjmp	.+64     	; 0x3e72 <vfprintf+0x18e>
    3e32:	f5 01       	movw	r30, r10
    3e34:	80 81       	ld	r24, Z
    3e36:	89 83       	std	Y+1, r24	; 0x01
    3e38:	42 e0       	ldi	r20, 0x02	; 2
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	a4 0e       	add	r10, r20
    3e3e:	b5 1e       	adc	r11, r21
    3e40:	61 01       	movw	r12, r2
    3e42:	01 e0       	ldi	r16, 0x01	; 1
    3e44:	10 e0       	ldi	r17, 0x00	; 0
    3e46:	12 c0       	rjmp	.+36     	; 0x3e6c <vfprintf+0x188>
    3e48:	f5 01       	movw	r30, r10
    3e4a:	c0 80       	ld	r12, Z
    3e4c:	d1 80       	ldd	r13, Z+1	; 0x01
    3e4e:	f6 fc       	sbrc	r15, 6
    3e50:	03 c0       	rjmp	.+6      	; 0x3e58 <vfprintf+0x174>
    3e52:	6f ef       	ldi	r22, 0xFF	; 255
    3e54:	7f ef       	ldi	r23, 0xFF	; 255
    3e56:	02 c0       	rjmp	.+4      	; 0x3e5c <vfprintf+0x178>
    3e58:	69 2d       	mov	r22, r9
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	42 e0       	ldi	r20, 0x02	; 2
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	a4 0e       	add	r10, r20
    3e62:	b5 1e       	adc	r11, r21
    3e64:	c6 01       	movw	r24, r12
    3e66:	0e 94 83 20 	call	0x4106	; 0x4106 <strnlen>
    3e6a:	8c 01       	movw	r16, r24
    3e6c:	5f e7       	ldi	r21, 0x7F	; 127
    3e6e:	f5 22       	and	r15, r21
    3e70:	14 c0       	rjmp	.+40     	; 0x3e9a <vfprintf+0x1b6>
    3e72:	f5 01       	movw	r30, r10
    3e74:	c0 80       	ld	r12, Z
    3e76:	d1 80       	ldd	r13, Z+1	; 0x01
    3e78:	f6 fc       	sbrc	r15, 6
    3e7a:	03 c0       	rjmp	.+6      	; 0x3e82 <vfprintf+0x19e>
    3e7c:	6f ef       	ldi	r22, 0xFF	; 255
    3e7e:	7f ef       	ldi	r23, 0xFF	; 255
    3e80:	02 c0       	rjmp	.+4      	; 0x3e86 <vfprintf+0x1a2>
    3e82:	69 2d       	mov	r22, r9
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	42 e0       	ldi	r20, 0x02	; 2
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	a4 0e       	add	r10, r20
    3e8c:	b5 1e       	adc	r11, r21
    3e8e:	c6 01       	movw	r24, r12
    3e90:	0e 94 78 20 	call	0x40f0	; 0x40f0 <strnlen_P>
    3e94:	8c 01       	movw	r16, r24
    3e96:	50 e8       	ldi	r21, 0x80	; 128
    3e98:	f5 2a       	or	r15, r21
    3e9a:	f3 fe       	sbrs	r15, 3
    3e9c:	07 c0       	rjmp	.+14     	; 0x3eac <vfprintf+0x1c8>
    3e9e:	1a c0       	rjmp	.+52     	; 0x3ed4 <vfprintf+0x1f0>
    3ea0:	80 e2       	ldi	r24, 0x20	; 32
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	b3 01       	movw	r22, r6
    3ea6:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    3eaa:	ea 94       	dec	r14
    3eac:	8e 2d       	mov	r24, r14
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	08 17       	cp	r16, r24
    3eb2:	19 07       	cpc	r17, r25
    3eb4:	a8 f3       	brcs	.-22     	; 0x3ea0 <vfprintf+0x1bc>
    3eb6:	0e c0       	rjmp	.+28     	; 0x3ed4 <vfprintf+0x1f0>
    3eb8:	f6 01       	movw	r30, r12
    3eba:	f7 fc       	sbrc	r15, 7
    3ebc:	85 91       	lpm	r24, Z+
    3ebe:	f7 fe       	sbrs	r15, 7
    3ec0:	81 91       	ld	r24, Z+
    3ec2:	6f 01       	movw	r12, r30
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	b3 01       	movw	r22, r6
    3ec8:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    3ecc:	e1 10       	cpse	r14, r1
    3ece:	ea 94       	dec	r14
    3ed0:	01 50       	subi	r16, 0x01	; 1
    3ed2:	10 40       	sbci	r17, 0x00	; 0
    3ed4:	01 15       	cp	r16, r1
    3ed6:	11 05       	cpc	r17, r1
    3ed8:	79 f7       	brne	.-34     	; 0x3eb8 <vfprintf+0x1d4>
    3eda:	ea c0       	rjmp	.+468    	; 0x40b0 <vfprintf+0x3cc>
    3edc:	94 36       	cpi	r25, 0x64	; 100
    3ede:	11 f0       	breq	.+4      	; 0x3ee4 <vfprintf+0x200>
    3ee0:	99 36       	cpi	r25, 0x69	; 105
    3ee2:	69 f5       	brne	.+90     	; 0x3f3e <vfprintf+0x25a>
    3ee4:	f7 fe       	sbrs	r15, 7
    3ee6:	08 c0       	rjmp	.+16     	; 0x3ef8 <vfprintf+0x214>
    3ee8:	f5 01       	movw	r30, r10
    3eea:	20 81       	ld	r18, Z
    3eec:	31 81       	ldd	r19, Z+1	; 0x01
    3eee:	42 81       	ldd	r20, Z+2	; 0x02
    3ef0:	53 81       	ldd	r21, Z+3	; 0x03
    3ef2:	84 e0       	ldi	r24, 0x04	; 4
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0a c0       	rjmp	.+20     	; 0x3f0c <vfprintf+0x228>
    3ef8:	f5 01       	movw	r30, r10
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	9c 01       	movw	r18, r24
    3f00:	44 27       	eor	r20, r20
    3f02:	37 fd       	sbrc	r19, 7
    3f04:	40 95       	com	r20
    3f06:	54 2f       	mov	r21, r20
    3f08:	82 e0       	ldi	r24, 0x02	; 2
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a8 0e       	add	r10, r24
    3f0e:	b9 1e       	adc	r11, r25
    3f10:	9f e6       	ldi	r25, 0x6F	; 111
    3f12:	f9 22       	and	r15, r25
    3f14:	57 ff       	sbrs	r21, 7
    3f16:	09 c0       	rjmp	.+18     	; 0x3f2a <vfprintf+0x246>
    3f18:	50 95       	com	r21
    3f1a:	40 95       	com	r20
    3f1c:	30 95       	com	r19
    3f1e:	21 95       	neg	r18
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
    3f22:	4f 4f       	sbci	r20, 0xFF	; 255
    3f24:	5f 4f       	sbci	r21, 0xFF	; 255
    3f26:	e0 e8       	ldi	r30, 0x80	; 128
    3f28:	fe 2a       	or	r15, r30
    3f2a:	ca 01       	movw	r24, r20
    3f2c:	b9 01       	movw	r22, r18
    3f2e:	a1 01       	movw	r20, r2
    3f30:	2a e0       	ldi	r18, 0x0A	; 10
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	0e 94 ca 20 	call	0x4194	; 0x4194 <__ultoa_invert>
    3f38:	d8 2e       	mov	r13, r24
    3f3a:	d2 18       	sub	r13, r2
    3f3c:	40 c0       	rjmp	.+128    	; 0x3fbe <vfprintf+0x2da>
    3f3e:	95 37       	cpi	r25, 0x75	; 117
    3f40:	29 f4       	brne	.+10     	; 0x3f4c <vfprintf+0x268>
    3f42:	1f 2d       	mov	r17, r15
    3f44:	1f 7e       	andi	r17, 0xEF	; 239
    3f46:	2a e0       	ldi	r18, 0x0A	; 10
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	1d c0       	rjmp	.+58     	; 0x3f86 <vfprintf+0x2a2>
    3f4c:	1f 2d       	mov	r17, r15
    3f4e:	19 7f       	andi	r17, 0xF9	; 249
    3f50:	9f 36       	cpi	r25, 0x6F	; 111
    3f52:	61 f0       	breq	.+24     	; 0x3f6c <vfprintf+0x288>
    3f54:	90 37       	cpi	r25, 0x70	; 112
    3f56:	20 f4       	brcc	.+8      	; 0x3f60 <vfprintf+0x27c>
    3f58:	98 35       	cpi	r25, 0x58	; 88
    3f5a:	09 f0       	breq	.+2      	; 0x3f5e <vfprintf+0x27a>
    3f5c:	ac c0       	rjmp	.+344    	; 0x40b6 <vfprintf+0x3d2>
    3f5e:	0f c0       	rjmp	.+30     	; 0x3f7e <vfprintf+0x29a>
    3f60:	90 37       	cpi	r25, 0x70	; 112
    3f62:	39 f0       	breq	.+14     	; 0x3f72 <vfprintf+0x28e>
    3f64:	98 37       	cpi	r25, 0x78	; 120
    3f66:	09 f0       	breq	.+2      	; 0x3f6a <vfprintf+0x286>
    3f68:	a6 c0       	rjmp	.+332    	; 0x40b6 <vfprintf+0x3d2>
    3f6a:	04 c0       	rjmp	.+8      	; 0x3f74 <vfprintf+0x290>
    3f6c:	28 e0       	ldi	r18, 0x08	; 8
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	0a c0       	rjmp	.+20     	; 0x3f86 <vfprintf+0x2a2>
    3f72:	10 61       	ori	r17, 0x10	; 16
    3f74:	14 fd       	sbrc	r17, 4
    3f76:	14 60       	ori	r17, 0x04	; 4
    3f78:	20 e1       	ldi	r18, 0x10	; 16
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	04 c0       	rjmp	.+8      	; 0x3f86 <vfprintf+0x2a2>
    3f7e:	14 fd       	sbrc	r17, 4
    3f80:	16 60       	ori	r17, 0x06	; 6
    3f82:	20 e1       	ldi	r18, 0x10	; 16
    3f84:	32 e0       	ldi	r19, 0x02	; 2
    3f86:	17 ff       	sbrs	r17, 7
    3f88:	08 c0       	rjmp	.+16     	; 0x3f9a <vfprintf+0x2b6>
    3f8a:	f5 01       	movw	r30, r10
    3f8c:	60 81       	ld	r22, Z
    3f8e:	71 81       	ldd	r23, Z+1	; 0x01
    3f90:	82 81       	ldd	r24, Z+2	; 0x02
    3f92:	93 81       	ldd	r25, Z+3	; 0x03
    3f94:	44 e0       	ldi	r20, 0x04	; 4
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	08 c0       	rjmp	.+16     	; 0x3faa <vfprintf+0x2c6>
    3f9a:	f5 01       	movw	r30, r10
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	bc 01       	movw	r22, r24
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	42 e0       	ldi	r20, 0x02	; 2
    3fa8:	50 e0       	ldi	r21, 0x00	; 0
    3faa:	a4 0e       	add	r10, r20
    3fac:	b5 1e       	adc	r11, r21
    3fae:	a1 01       	movw	r20, r2
    3fb0:	0e 94 ca 20 	call	0x4194	; 0x4194 <__ultoa_invert>
    3fb4:	d8 2e       	mov	r13, r24
    3fb6:	d2 18       	sub	r13, r2
    3fb8:	8f e7       	ldi	r24, 0x7F	; 127
    3fba:	f8 2e       	mov	r15, r24
    3fbc:	f1 22       	and	r15, r17
    3fbe:	f6 fe       	sbrs	r15, 6
    3fc0:	0b c0       	rjmp	.+22     	; 0x3fd8 <vfprintf+0x2f4>
    3fc2:	5e ef       	ldi	r21, 0xFE	; 254
    3fc4:	f5 22       	and	r15, r21
    3fc6:	d9 14       	cp	r13, r9
    3fc8:	38 f4       	brcc	.+14     	; 0x3fd8 <vfprintf+0x2f4>
    3fca:	f4 fe       	sbrs	r15, 4
    3fcc:	07 c0       	rjmp	.+14     	; 0x3fdc <vfprintf+0x2f8>
    3fce:	f2 fc       	sbrc	r15, 2
    3fd0:	05 c0       	rjmp	.+10     	; 0x3fdc <vfprintf+0x2f8>
    3fd2:	8f ee       	ldi	r24, 0xEF	; 239
    3fd4:	f8 22       	and	r15, r24
    3fd6:	02 c0       	rjmp	.+4      	; 0x3fdc <vfprintf+0x2f8>
    3fd8:	1d 2d       	mov	r17, r13
    3fda:	01 c0       	rjmp	.+2      	; 0x3fde <vfprintf+0x2fa>
    3fdc:	19 2d       	mov	r17, r9
    3fde:	f4 fe       	sbrs	r15, 4
    3fe0:	0d c0       	rjmp	.+26     	; 0x3ffc <vfprintf+0x318>
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	ed 0d       	add	r30, r13
    3fe6:	f1 1d       	adc	r31, r1
    3fe8:	80 81       	ld	r24, Z
    3fea:	80 33       	cpi	r24, 0x30	; 48
    3fec:	19 f4       	brne	.+6      	; 0x3ff4 <vfprintf+0x310>
    3fee:	99 ee       	ldi	r25, 0xE9	; 233
    3ff0:	f9 22       	and	r15, r25
    3ff2:	08 c0       	rjmp	.+16     	; 0x4004 <vfprintf+0x320>
    3ff4:	1f 5f       	subi	r17, 0xFF	; 255
    3ff6:	f2 fe       	sbrs	r15, 2
    3ff8:	05 c0       	rjmp	.+10     	; 0x4004 <vfprintf+0x320>
    3ffa:	03 c0       	rjmp	.+6      	; 0x4002 <vfprintf+0x31e>
    3ffc:	8f 2d       	mov	r24, r15
    3ffe:	86 78       	andi	r24, 0x86	; 134
    4000:	09 f0       	breq	.+2      	; 0x4004 <vfprintf+0x320>
    4002:	1f 5f       	subi	r17, 0xFF	; 255
    4004:	0f 2d       	mov	r16, r15
    4006:	f3 fc       	sbrc	r15, 3
    4008:	14 c0       	rjmp	.+40     	; 0x4032 <vfprintf+0x34e>
    400a:	f0 fe       	sbrs	r15, 0
    400c:	0f c0       	rjmp	.+30     	; 0x402c <vfprintf+0x348>
    400e:	1e 15       	cp	r17, r14
    4010:	10 f0       	brcs	.+4      	; 0x4016 <vfprintf+0x332>
    4012:	9d 2c       	mov	r9, r13
    4014:	0b c0       	rjmp	.+22     	; 0x402c <vfprintf+0x348>
    4016:	9d 2c       	mov	r9, r13
    4018:	9e 0c       	add	r9, r14
    401a:	91 1a       	sub	r9, r17
    401c:	1e 2d       	mov	r17, r14
    401e:	06 c0       	rjmp	.+12     	; 0x402c <vfprintf+0x348>
    4020:	80 e2       	ldi	r24, 0x20	; 32
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	b3 01       	movw	r22, r6
    4026:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    402a:	1f 5f       	subi	r17, 0xFF	; 255
    402c:	1e 15       	cp	r17, r14
    402e:	c0 f3       	brcs	.-16     	; 0x4020 <vfprintf+0x33c>
    4030:	04 c0       	rjmp	.+8      	; 0x403a <vfprintf+0x356>
    4032:	1e 15       	cp	r17, r14
    4034:	10 f4       	brcc	.+4      	; 0x403a <vfprintf+0x356>
    4036:	e1 1a       	sub	r14, r17
    4038:	01 c0       	rjmp	.+2      	; 0x403c <vfprintf+0x358>
    403a:	ee 24       	eor	r14, r14
    403c:	04 ff       	sbrs	r16, 4
    403e:	0f c0       	rjmp	.+30     	; 0x405e <vfprintf+0x37a>
    4040:	80 e3       	ldi	r24, 0x30	; 48
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	b3 01       	movw	r22, r6
    4046:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    404a:	02 ff       	sbrs	r16, 2
    404c:	1d c0       	rjmp	.+58     	; 0x4088 <vfprintf+0x3a4>
    404e:	01 fd       	sbrc	r16, 1
    4050:	03 c0       	rjmp	.+6      	; 0x4058 <vfprintf+0x374>
    4052:	88 e7       	ldi	r24, 0x78	; 120
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e c0       	rjmp	.+28     	; 0x4074 <vfprintf+0x390>
    4058:	88 e5       	ldi	r24, 0x58	; 88
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0b c0       	rjmp	.+22     	; 0x4074 <vfprintf+0x390>
    405e:	80 2f       	mov	r24, r16
    4060:	86 78       	andi	r24, 0x86	; 134
    4062:	91 f0       	breq	.+36     	; 0x4088 <vfprintf+0x3a4>
    4064:	01 ff       	sbrs	r16, 1
    4066:	02 c0       	rjmp	.+4      	; 0x406c <vfprintf+0x388>
    4068:	8b e2       	ldi	r24, 0x2B	; 43
    406a:	01 c0       	rjmp	.+2      	; 0x406e <vfprintf+0x38a>
    406c:	80 e2       	ldi	r24, 0x20	; 32
    406e:	f7 fc       	sbrc	r15, 7
    4070:	8d e2       	ldi	r24, 0x2D	; 45
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	b3 01       	movw	r22, r6
    4076:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    407a:	06 c0       	rjmp	.+12     	; 0x4088 <vfprintf+0x3a4>
    407c:	80 e3       	ldi	r24, 0x30	; 48
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	b3 01       	movw	r22, r6
    4082:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    4086:	9a 94       	dec	r9
    4088:	d9 14       	cp	r13, r9
    408a:	c0 f3       	brcs	.-16     	; 0x407c <vfprintf+0x398>
    408c:	da 94       	dec	r13
    408e:	f1 01       	movw	r30, r2
    4090:	ed 0d       	add	r30, r13
    4092:	f1 1d       	adc	r31, r1
    4094:	80 81       	ld	r24, Z
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	b3 01       	movw	r22, r6
    409a:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    409e:	dd 20       	and	r13, r13
    40a0:	a9 f7       	brne	.-22     	; 0x408c <vfprintf+0x3a8>
    40a2:	06 c0       	rjmp	.+12     	; 0x40b0 <vfprintf+0x3cc>
    40a4:	80 e2       	ldi	r24, 0x20	; 32
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	b3 01       	movw	r22, r6
    40aa:	0e 94 9e 20 	call	0x413c	; 0x413c <fputc>
    40ae:	ea 94       	dec	r14
    40b0:	ee 20       	and	r14, r14
    40b2:	c1 f7       	brne	.-16     	; 0x40a4 <vfprintf+0x3c0>
    40b4:	43 ce       	rjmp	.-890    	; 0x3d3c <vfprintf+0x58>
    40b6:	f3 01       	movw	r30, r6
    40b8:	66 81       	ldd	r22, Z+6	; 0x06
    40ba:	77 81       	ldd	r23, Z+7	; 0x07
    40bc:	cb 01       	movw	r24, r22
    40be:	2b 96       	adiw	r28, 0x0b	; 11
    40c0:	0f b6       	in	r0, 0x3f	; 63
    40c2:	f8 94       	cli
    40c4:	de bf       	out	0x3e, r29	; 62
    40c6:	0f be       	out	0x3f, r0	; 63
    40c8:	cd bf       	out	0x3d, r28	; 61
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	ff 90       	pop	r15
    40d4:	ef 90       	pop	r14
    40d6:	df 90       	pop	r13
    40d8:	cf 90       	pop	r12
    40da:	bf 90       	pop	r11
    40dc:	af 90       	pop	r10
    40de:	9f 90       	pop	r9
    40e0:	8f 90       	pop	r8
    40e2:	7f 90       	pop	r7
    40e4:	6f 90       	pop	r6
    40e6:	5f 90       	pop	r5
    40e8:	4f 90       	pop	r4
    40ea:	3f 90       	pop	r3
    40ec:	2f 90       	pop	r2
    40ee:	08 95       	ret

000040f0 <strnlen_P>:
    40f0:	fc 01       	movw	r30, r24
    40f2:	05 90       	lpm	r0, Z+
    40f4:	61 50       	subi	r22, 0x01	; 1
    40f6:	70 40       	sbci	r23, 0x00	; 0
    40f8:	01 10       	cpse	r0, r1
    40fa:	d8 f7       	brcc	.-10     	; 0x40f2 <strnlen_P+0x2>
    40fc:	80 95       	com	r24
    40fe:	90 95       	com	r25
    4100:	8e 0f       	add	r24, r30
    4102:	9f 1f       	adc	r25, r31
    4104:	08 95       	ret

00004106 <strnlen>:
    4106:	fc 01       	movw	r30, r24
    4108:	61 50       	subi	r22, 0x01	; 1
    410a:	70 40       	sbci	r23, 0x00	; 0
    410c:	01 90       	ld	r0, Z+
    410e:	01 10       	cpse	r0, r1
    4110:	d8 f7       	brcc	.-10     	; 0x4108 <strnlen+0x2>
    4112:	80 95       	com	r24
    4114:	90 95       	com	r25
    4116:	8e 0f       	add	r24, r30
    4118:	9f 1f       	adc	r25, r31
    411a:	08 95       	ret

0000411c <strrev>:
    411c:	dc 01       	movw	r26, r24
    411e:	fc 01       	movw	r30, r24
    4120:	67 2f       	mov	r22, r23
    4122:	71 91       	ld	r23, Z+
    4124:	77 23       	and	r23, r23
    4126:	e1 f7       	brne	.-8      	; 0x4120 <strrev+0x4>
    4128:	32 97       	sbiw	r30, 0x02	; 2
    412a:	04 c0       	rjmp	.+8      	; 0x4134 <strrev+0x18>
    412c:	7c 91       	ld	r23, X
    412e:	6d 93       	st	X+, r22
    4130:	70 83       	st	Z, r23
    4132:	62 91       	ld	r22, -Z
    4134:	ae 17       	cp	r26, r30
    4136:	bf 07       	cpc	r27, r31
    4138:	c8 f3       	brcs	.-14     	; 0x412c <strrev+0x10>
    413a:	08 95       	ret

0000413c <fputc>:
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	8c 01       	movw	r16, r24
    4146:	eb 01       	movw	r28, r22
    4148:	8b 81       	ldd	r24, Y+3	; 0x03
    414a:	81 ff       	sbrs	r24, 1
    414c:	1b c0       	rjmp	.+54     	; 0x4184 <fputc+0x48>
    414e:	82 ff       	sbrs	r24, 2
    4150:	0d c0       	rjmp	.+26     	; 0x416c <fputc+0x30>
    4152:	2e 81       	ldd	r18, Y+6	; 0x06
    4154:	3f 81       	ldd	r19, Y+7	; 0x07
    4156:	8c 81       	ldd	r24, Y+4	; 0x04
    4158:	9d 81       	ldd	r25, Y+5	; 0x05
    415a:	28 17       	cp	r18, r24
    415c:	39 07       	cpc	r19, r25
    415e:	64 f4       	brge	.+24     	; 0x4178 <fputc+0x3c>
    4160:	e8 81       	ld	r30, Y
    4162:	f9 81       	ldd	r31, Y+1	; 0x01
    4164:	01 93       	st	Z+, r16
    4166:	f9 83       	std	Y+1, r31	; 0x01
    4168:	e8 83       	st	Y, r30
    416a:	06 c0       	rjmp	.+12     	; 0x4178 <fputc+0x3c>
    416c:	e8 85       	ldd	r30, Y+8	; 0x08
    416e:	f9 85       	ldd	r31, Y+9	; 0x09
    4170:	80 2f       	mov	r24, r16
    4172:	09 95       	icall
    4174:	89 2b       	or	r24, r25
    4176:	31 f4       	brne	.+12     	; 0x4184 <fputc+0x48>
    4178:	8e 81       	ldd	r24, Y+6	; 0x06
    417a:	9f 81       	ldd	r25, Y+7	; 0x07
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	9f 83       	std	Y+7, r25	; 0x07
    4180:	8e 83       	std	Y+6, r24	; 0x06
    4182:	02 c0       	rjmp	.+4      	; 0x4188 <fputc+0x4c>
    4184:	0f ef       	ldi	r16, 0xFF	; 255
    4186:	1f ef       	ldi	r17, 0xFF	; 255
    4188:	c8 01       	movw	r24, r16
    418a:	df 91       	pop	r29
    418c:	cf 91       	pop	r28
    418e:	1f 91       	pop	r17
    4190:	0f 91       	pop	r16
    4192:	08 95       	ret

00004194 <__ultoa_invert>:
    4194:	fa 01       	movw	r30, r20
    4196:	aa 27       	eor	r26, r26
    4198:	28 30       	cpi	r18, 0x08	; 8
    419a:	51 f1       	breq	.+84     	; 0x41f0 <__ultoa_invert+0x5c>
    419c:	20 31       	cpi	r18, 0x10	; 16
    419e:	81 f1       	breq	.+96     	; 0x4200 <__ultoa_invert+0x6c>
    41a0:	e8 94       	clt
    41a2:	6f 93       	push	r22
    41a4:	6e 7f       	andi	r22, 0xFE	; 254
    41a6:	6e 5f       	subi	r22, 0xFE	; 254
    41a8:	7f 4f       	sbci	r23, 0xFF	; 255
    41aa:	8f 4f       	sbci	r24, 0xFF	; 255
    41ac:	9f 4f       	sbci	r25, 0xFF	; 255
    41ae:	af 4f       	sbci	r26, 0xFF	; 255
    41b0:	b1 e0       	ldi	r27, 0x01	; 1
    41b2:	3e d0       	rcall	.+124    	; 0x4230 <__ultoa_invert+0x9c>
    41b4:	b4 e0       	ldi	r27, 0x04	; 4
    41b6:	3c d0       	rcall	.+120    	; 0x4230 <__ultoa_invert+0x9c>
    41b8:	67 0f       	add	r22, r23
    41ba:	78 1f       	adc	r23, r24
    41bc:	89 1f       	adc	r24, r25
    41be:	9a 1f       	adc	r25, r26
    41c0:	a1 1d       	adc	r26, r1
    41c2:	68 0f       	add	r22, r24
    41c4:	79 1f       	adc	r23, r25
    41c6:	8a 1f       	adc	r24, r26
    41c8:	91 1d       	adc	r25, r1
    41ca:	a1 1d       	adc	r26, r1
    41cc:	6a 0f       	add	r22, r26
    41ce:	71 1d       	adc	r23, r1
    41d0:	81 1d       	adc	r24, r1
    41d2:	91 1d       	adc	r25, r1
    41d4:	a1 1d       	adc	r26, r1
    41d6:	20 d0       	rcall	.+64     	; 0x4218 <__ultoa_invert+0x84>
    41d8:	09 f4       	brne	.+2      	; 0x41dc <__ultoa_invert+0x48>
    41da:	68 94       	set
    41dc:	3f 91       	pop	r19
    41de:	2a e0       	ldi	r18, 0x0A	; 10
    41e0:	26 9f       	mul	r18, r22
    41e2:	11 24       	eor	r1, r1
    41e4:	30 19       	sub	r19, r0
    41e6:	30 5d       	subi	r19, 0xD0	; 208
    41e8:	31 93       	st	Z+, r19
    41ea:	de f6       	brtc	.-74     	; 0x41a2 <__ultoa_invert+0xe>
    41ec:	cf 01       	movw	r24, r30
    41ee:	08 95       	ret
    41f0:	46 2f       	mov	r20, r22
    41f2:	47 70       	andi	r20, 0x07	; 7
    41f4:	40 5d       	subi	r20, 0xD0	; 208
    41f6:	41 93       	st	Z+, r20
    41f8:	b3 e0       	ldi	r27, 0x03	; 3
    41fa:	0f d0       	rcall	.+30     	; 0x421a <__ultoa_invert+0x86>
    41fc:	c9 f7       	brne	.-14     	; 0x41f0 <__ultoa_invert+0x5c>
    41fe:	f6 cf       	rjmp	.-20     	; 0x41ec <__ultoa_invert+0x58>
    4200:	46 2f       	mov	r20, r22
    4202:	4f 70       	andi	r20, 0x0F	; 15
    4204:	40 5d       	subi	r20, 0xD0	; 208
    4206:	4a 33       	cpi	r20, 0x3A	; 58
    4208:	18 f0       	brcs	.+6      	; 0x4210 <__ultoa_invert+0x7c>
    420a:	49 5d       	subi	r20, 0xD9	; 217
    420c:	31 fd       	sbrc	r19, 1
    420e:	40 52       	subi	r20, 0x20	; 32
    4210:	41 93       	st	Z+, r20
    4212:	02 d0       	rcall	.+4      	; 0x4218 <__ultoa_invert+0x84>
    4214:	a9 f7       	brne	.-22     	; 0x4200 <__ultoa_invert+0x6c>
    4216:	ea cf       	rjmp	.-44     	; 0x41ec <__ultoa_invert+0x58>
    4218:	b4 e0       	ldi	r27, 0x04	; 4
    421a:	a6 95       	lsr	r26
    421c:	97 95       	ror	r25
    421e:	87 95       	ror	r24
    4220:	77 95       	ror	r23
    4222:	67 95       	ror	r22
    4224:	ba 95       	dec	r27
    4226:	c9 f7       	brne	.-14     	; 0x421a <__ultoa_invert+0x86>
    4228:	00 97       	sbiw	r24, 0x00	; 0
    422a:	61 05       	cpc	r22, r1
    422c:	71 05       	cpc	r23, r1
    422e:	08 95       	ret
    4230:	9b 01       	movw	r18, r22
    4232:	ac 01       	movw	r20, r24
    4234:	0a 2e       	mov	r0, r26
    4236:	06 94       	lsr	r0
    4238:	57 95       	ror	r21
    423a:	47 95       	ror	r20
    423c:	37 95       	ror	r19
    423e:	27 95       	ror	r18
    4240:	ba 95       	dec	r27
    4242:	c9 f7       	brne	.-14     	; 0x4236 <__ultoa_invert+0xa2>
    4244:	62 0f       	add	r22, r18
    4246:	73 1f       	adc	r23, r19
    4248:	84 1f       	adc	r24, r20
    424a:	95 1f       	adc	r25, r21
    424c:	a0 1d       	adc	r26, r0
    424e:	08 95       	ret

00004250 <__udivmodhi4>:
    4250:	aa 1b       	sub	r26, r26
    4252:	bb 1b       	sub	r27, r27
    4254:	51 e1       	ldi	r21, 0x11	; 17
    4256:	07 c0       	rjmp	.+14     	; 0x4266 <__udivmodhi4_ep>

00004258 <__udivmodhi4_loop>:
    4258:	aa 1f       	adc	r26, r26
    425a:	bb 1f       	adc	r27, r27
    425c:	a6 17       	cp	r26, r22
    425e:	b7 07       	cpc	r27, r23
    4260:	10 f0       	brcs	.+4      	; 0x4266 <__udivmodhi4_ep>
    4262:	a6 1b       	sub	r26, r22
    4264:	b7 0b       	sbc	r27, r23

00004266 <__udivmodhi4_ep>:
    4266:	88 1f       	adc	r24, r24
    4268:	99 1f       	adc	r25, r25
    426a:	5a 95       	dec	r21
    426c:	a9 f7       	brne	.-22     	; 0x4258 <__udivmodhi4_loop>
    426e:	80 95       	com	r24
    4270:	90 95       	com	r25
    4272:	bc 01       	movw	r22, r24
    4274:	cd 01       	movw	r24, r26
    4276:	08 95       	ret

00004278 <_exit>:
    4278:	f8 94       	cli

0000427a <__stop_program>:
    427a:	ff cf       	rjmp	.-2      	; 0x427a <__stop_program>
