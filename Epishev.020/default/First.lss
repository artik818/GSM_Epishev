
First.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006d0  00800100  00004352  000043e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000675  008007d0  008007d0  00004ab6  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  00004ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b37  00000000  00000000  00004cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004cb3  00000000  00000000  0000580d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b5f  00000000  00000000  0000a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003376  00000000  00000000  0000c01f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000680  00000000  00000000  0000f398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fbb  00000000  00000000  0000fa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000164b  00000000  00000000  000109d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0001201e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6f 00 	jmp	0xde	; 0xde <__ctors_end>
       4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
       8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
       c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      18:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      1c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      20:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_12>
      34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      3c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      40:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      44:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      48:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <__vector_18>
      4c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      50:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      58:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      5c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      60:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      68:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      6c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      70:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      7c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      80:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      84:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      8c:	35 0c       	add	r3, r5
      8e:	3c 0c       	add	r3, r12
      90:	a6 0c       	add	r10, r6
      92:	b3 0c       	add	r11, r3
      94:	bc 0c       	add	r11, r12
      96:	ce 0c       	add	r12, r14
      98:	ef 0c       	add	r14, r15
      9a:	0d 0d       	add	r16, r13
      9c:	33 0c       	add	r3, r3
      9e:	3e 0d       	add	r19, r14
      a0:	45 0d       	add	r20, r5
      a2:	7c 0d       	add	r23, r12
      a4:	fb 0d       	add	r31, r11
      a6:	fb 0d       	add	r31, r11
      a8:	e4 0d       	add	r30, r4
      aa:	f9 0d       	add	r31, r9
      ac:	fb 0d       	add	r31, r11
      ae:	fb 0d       	add	r31, r11
      b0:	fb 0d       	add	r31, r11
      b2:	fb 0d       	add	r31, r11
      b4:	fb 0d       	add	r31, r11
      b6:	fb 0d       	add	r31, r11
      b8:	a7 0d       	add	r26, r7
      ba:	b0 0d       	add	r27, r0
      bc:	fb 0d       	add	r31, r11
      be:	fb 0d       	add	r31, r11
      c0:	fb 0d       	add	r31, r11
      c2:	fb 0d       	add	r31, r11
      c4:	fb 0d       	add	r31, r11
      c6:	fb 0d       	add	r31, r11
      c8:	fb 0d       	add	r31, r11
      ca:	fb 0d       	add	r31, r11
      cc:	fb 0d       	add	r31, r11
      ce:	fb 0d       	add	r31, r11
      d0:	fb 0d       	add	r31, r11
      d2:	fb 0d       	add	r31, r11
      d4:	1a 0d       	add	r17, r10
      d6:	58 0d       	add	r21, r8
      d8:	fb 0d       	add	r31, r11
      da:	fb 0d       	add	r31, r11
      dc:	85 0d       	add	r24, r5

000000de <__ctors_end>:
      de:	11 24       	eor	r1, r1
      e0:	1f be       	out	0x3f, r1	; 63
      e2:	cf ef       	ldi	r28, 0xFF	; 255
      e4:	d0 e1       	ldi	r29, 0x10	; 16
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	cd bf       	out	0x3d, r28	; 61

000000ea <__do_copy_data>:
      ea:	17 e0       	ldi	r17, 0x07	; 7
      ec:	a0 e0       	ldi	r26, 0x00	; 0
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	e2 e5       	ldi	r30, 0x52	; 82
      f2:	f3 e4       	ldi	r31, 0x43	; 67
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0b bf       	out	0x3b, r16	; 59
      f8:	02 c0       	rjmp	.+4      	; 0xfe <__do_copy_data+0x14>
      fa:	07 90       	elpm	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	a0 3d       	cpi	r26, 0xD0	; 208
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <__do_copy_data+0x10>

00000104 <__do_clear_bss>:
     104:	1e e0       	ldi	r17, 0x0E	; 14
     106:	a0 ed       	ldi	r26, 0xD0	; 208
     108:	b7 e0       	ldi	r27, 0x07	; 7
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	a5 34       	cpi	r26, 0x45	; 69
     110:	b1 07       	cpc	r27, r17
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
     114:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <main>
     118:	0c 94 a7 21 	jmp	0x434e	; 0x434e <_exit>

0000011c <__bad_interrupt>:
     11c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_default>

00000120 <GetTime>:
//------------------------------------------------------------------------------------

TTime GetTime(void) {
	unsigned char sreg;
	unsigned int retVal;
	sreg = SREG;
     120:	8f b7       	in	r24, 0x3f	; 63
	cli();
     122:	f8 94       	cli
	retVal = TimerVar5ms;
     124:	20 91 d0 07 	lds	r18, 0x07D0
     128:	30 91 d1 07 	lds	r19, 0x07D1
	SREG = sreg;
     12c:	8f bf       	out	0x3f, r24	; 63
	return retVal;
}
     12e:	c9 01       	movw	r24, r18
     130:	08 95       	ret

00000132 <Ticks>:
//------------------------------------------------------------------------------------

unsigned int Ticks(unsigned long int Time_ms) {
     132:	25 e0       	ldi	r18, 0x05	; 5
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__udivmodsi4>
     13e:	c9 01       	movw	r24, r18
	return Time_ms / 5;
}
     140:	08 95       	ret

00000142 <__vector_default>:

//------------------------------------------------------------------------------------
// делаем заглушку для всех векторов прерываний
char WasBadVect = 0;
ISR(BADISR_vect)
{
     142:	1f 92       	push	r1
     144:	0f 92       	push	r0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	0f 92       	push	r0
     14a:	11 24       	eor	r1, r1
     14c:	8f 93       	push	r24
	WasBadVect = 1;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	80 93 d2 07 	sts	0x07D2, r24
}
     154:	8f 91       	pop	r24
     156:	0f 90       	pop	r0
     158:	0f be       	out	0x3f, r0	; 63
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <__vector_12>:
//------------------------------------------------------------------------------------

ISR(TIMER1_COMPA_vect) {
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
	//sei();
	TimerVar5ms++;
     16e:	80 91 d0 07 	lds	r24, 0x07D0
     172:	90 91 d1 07 	lds	r25, 0x07D1
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	90 93 d1 07 	sts	0x07D1, r25
     17c:	80 93 d0 07 	sts	0x07D0, r24
	TIFR = (1<<OCF1A); // выставить в 1 для осуществления прерывания!
     180:	80 e1       	ldi	r24, 0x10	; 16
     182:	86 bf       	out	0x36, r24	; 54
}
     184:	9f 91       	pop	r25
     186:	8f 91       	pop	r24
     188:	0f 90       	pop	r0
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	0f 90       	pop	r0
     18e:	1f 90       	pop	r1
     190:	18 95       	reti

00000192 <initTimer>:
//------------------------------------------------------------------------------------

void initTimer(void) {
	// OCR1A = 73728;
	TCNT1 = 0;
     192:	1d bc       	out	0x2d, r1	; 45
     194:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 36864; // 5ms // задаем верхний предел
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e9       	ldi	r25, 0x90	; 144
     19a:	9b bd       	out	0x2b, r25	; 43
     19c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B = ((1<<WGM12) | (1<<CS10));
     19e:	89 e0       	ldi	r24, 0x09	; 9
     1a0:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1<<OCIE1A); // Timer/Counter1 Compare Match interrupt is enabled
     1a2:	80 e1       	ldi	r24, 0x10	; 16
     1a4:	87 bf       	out	0x37, r24	; 55
	TIFR = (1<<OCF1A); // выставить в 1 для осуществления прерывания!
     1a6:	86 bf       	out	0x36, r24	; 54
}
     1a8:	08 95       	ret

000001aa <SirenaOn>:
}

//------------------------------------------------------------------------------------
// включить сирену
void SirenaOn(void) {
	DOuts = DOuts & 0b11101111; 
     1aa:	80 91 69 02 	lds	r24, 0x0269
     1ae:	8f 7e       	andi	r24, 0xEF	; 239
     1b0:	80 93 69 02 	sts	0x0269, r24
}
     1b4:	08 95       	ret

000001b6 <SirenaOff>:
//------------------------------------------------------------------------------------
// выключить сирену
void SirenaOff(void) {
	DOuts = DOuts | 0b00010000; 
     1b6:	80 91 69 02 	lds	r24, 0x0269
     1ba:	80 61       	ori	r24, 0x10	; 16
     1bc:	80 93 69 02 	sts	0x0269, r24
}
     1c0:	08 95       	ret

000001c2 <SrabotkaOn>:
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// включить выход, являющийся сборным для всех входов
void SrabotkaOn(void) {
	DOuts = DOuts & 0b11011111; 
     1c2:	80 91 69 02 	lds	r24, 0x0269
     1c6:	8f 7d       	andi	r24, 0xDF	; 223
     1c8:	80 93 69 02 	sts	0x0269, r24
}
     1cc:	08 95       	ret

000001ce <SrabotkaOff>:
//------------------------------------------------------------------------------------
// выключить выход, являющийся сборным для всех входов
void SrabotkaOff(void) {
	DOuts = DOuts | 0b00100000; 
     1ce:	80 91 69 02 	lds	r24, 0x0269
     1d2:	80 62       	ori	r24, 0x20	; 32
     1d4:	80 93 69 02 	sts	0x0269, r24
}
     1d8:	08 95       	ret

000001da <IsModemOn>:
// Для запуска функции нужно: swIsModemOn = cswStart;
// если за 1000 мс был получен отклик от модема, то возвращает всегда 1
// для сброса (квитирования) требуется swIsModemOn = cswIdle;
TTime TPrevIsModemOn;
int swIsModemOn = cswIdle;
char IsModemOn(void) {
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
	char RetVal = 0;
	switch(swIsModemOn) {
     1e2:	80 91 d3 07 	lds	r24, 0x07D3
     1e6:	90 91 d4 07 	lds	r25, 0x07D4
     1ea:	85 32       	cpi	r24, 0x25	; 37
     1ec:	91 05       	cpc	r25, r1
     1ee:	c9 f0       	breq	.+50     	; 0x222 <IsModemOn+0x48>
     1f0:	86 32       	cpi	r24, 0x26	; 38
     1f2:	91 05       	cpc	r25, r1
     1f4:	1c f4       	brge	.+6      	; 0x1fc <IsModemOn+0x22>
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	49 f5       	brne	.+82     	; 0x24c <IsModemOn+0x72>
     1fa:	08 c0       	rjmp	.+16     	; 0x20c <IsModemOn+0x32>
     1fc:	83 33       	cpi	r24, 0x33	; 51
     1fe:	91 05       	cpc	r25, r1
     200:	19 f0       	breq	.+6      	; 0x208 <IsModemOn+0x2e>
     202:	c5 97       	sbiw	r24, 0x35	; 53
     204:	19 f5       	brne	.+70     	; 0x24c <IsModemOn+0x72>
     206:	1e c0       	rjmp	.+60     	; 0x244 <IsModemOn+0x6a>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	21 c0       	rjmp	.+66     	; 0x24e <IsModemOn+0x74>
		case cswIdle:
		break;
		
		case cswStart:
			DoCommand(&TPrevIsModemOn, "at+cpin?", &swIsModemOn, csw010);
     20c:	80 e1       	ldi	r24, 0x10	; 16
     20e:	98 e0       	ldi	r25, 0x08	; 8
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	71 e0       	ldi	r23, 0x01	; 1
     214:	43 ed       	ldi	r20, 0xD3	; 211
     216:	57 e0       	ldi	r21, 0x07	; 7
     218:	25 e2       	ldi	r18, 0x25	; 37
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
     220:	15 c0       	rjmp	.+42     	; 0x24c <IsModemOn+0x72>
		break;
		
		case csw010:
			WaitAnswer(TPrevIsModemOn, "+CPIN: READY", 2000, &swIsModemOn, cswOK, cswIdle);
     222:	80 91 10 08 	lds	r24, 0x0810
     226:	90 91 11 08 	lds	r25, 0x0811
     22a:	69 e0       	ldi	r22, 0x09	; 9
     22c:	71 e0       	ldi	r23, 0x01	; 1
     22e:	40 ed       	ldi	r20, 0xD0	; 208
     230:	57 e0       	ldi	r21, 0x07	; 7
     232:	23 ed       	ldi	r18, 0xD3	; 211
     234:	37 e0       	ldi	r19, 0x07	; 7
     236:	03 e3       	ldi	r16, 0x33	; 51
     238:	10 e0       	ldi	r17, 0x00	; 0
     23a:	ee 24       	eor	r14, r14
     23c:	ff 24       	eor	r15, r15
     23e:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
     242:	04 c0       	rjmp	.+8      	; 0x24c <IsModemOn+0x72>
		case cswOK:
			RetVal = 1;
		break;
		
		case cswEnd:
			swIsModemOn = cswIdle;
     244:	10 92 d4 07 	sts	0x07D4, r1
     248:	10 92 d3 07 	sts	0x07D3, r1
     24c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return RetVal;
}
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	08 95       	ret

00000258 <OutTermToPC>:

char tmpStr2[100]; // для нескольких последующих алгоритмов
//------------------------------------------------------------------------------------
TTime TOutTermToPC;
int swOutTermToPC = cswStart;
void OutTermToPC(void) {
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
	switch (swOutTermToPC) {
     25c:	80 91 55 02 	lds	r24, 0x0255
     260:	90 91 56 02 	lds	r25, 0x0256
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	91 05       	cpc	r25, r1
     268:	19 f0       	breq	.+6      	; 0x270 <OutTermToPC+0x18>
     26a:	85 97       	sbiw	r24, 0x25	; 37
     26c:	91 f5       	brne	.+100    	; 0x2d2 <OutTermToPC+0x7a>
     26e:	09 c0       	rjmp	.+18     	; 0x282 <OutTermToPC+0x2a>
		case cswIdle:
		break;
		
		case cswStart:
			TOutTermToPC = GetTime();
     270:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     274:	90 93 c1 08 	sts	0x08C1, r25
     278:	80 93 c0 08 	sts	0x08C0, r24
			swOutTermToPC = csw010;
     27c:	85 e2       	ldi	r24, 0x25	; 37
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	24 c0       	rjmp	.+72     	; 0x2ca <OutTermToPC+0x72>
		break;
			
		case csw010:
			if (GetTime() - TOutTermToPC > Ticks(5000)) {
     282:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     286:	20 91 c0 08 	lds	r18, 0x08C0
     28a:	30 91 c1 08 	lds	r19, 0x08C1
     28e:	8c 01       	movw	r16, r24
     290:	02 1b       	sub	r16, r18
     292:	13 0b       	sbc	r17, r19
     294:	68 e8       	ldi	r22, 0x88	; 136
     296:	73 e1       	ldi	r23, 0x13	; 19
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
     2a0:	80 17       	cp	r24, r16
     2a2:	91 07       	cpc	r25, r17
     2a4:	b0 f4       	brcc	.+44     	; 0x2d2 <OutTermToPC+0x7a>
				MakeTerm(tmpStr2);
     2a6:	81 e2       	ldi	r24, 0x21	; 33
     2a8:	9d e0       	ldi	r25, 0x0D	; 13
     2aa:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MakeTerm>
				if (strlen(tmpStr2) > 0) {
     2ae:	80 91 21 0d 	lds	r24, 0x0D21
     2b2:	88 23       	and	r24, r24
     2b4:	41 f0       	breq	.+16     	; 0x2c6 <OutTermToPC+0x6e>
					PutPC(tmpStr2);
     2b6:	81 e2       	ldi	r24, 0x21	; 33
     2b8:	9d e0       	ldi	r25, 0x0D	; 13
     2ba:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
					PutPC("\n\r");
     2be:	86 e1       	ldi	r24, 0x16	; 22
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
				}
				swOutTermToPC = cswStart;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 56 02 	sts	0x0256, r25
     2ce:	80 93 55 02 	sts	0x0255, r24
			}
		break;
	}
}
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <AlgMakeTermSirena>:

//------------------------------------------------------------------------------------

char flSirenaOtkaz = 0;
TTime TOtpalDatchik;
void AlgMakeTermSirena(void) {
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
	for (int i=0; i<THERM_COUNT; ++i) { // алгоритм должен работать всегда
		TermAlg(i);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <TermAlg>
		if (Terms[i].swTermAlg == cswIdle) Terms[i].swTermAlg = cswStart;
     2e4:	80 91 ce 0d 	lds	r24, 0x0DCE
     2e8:	90 91 cf 0d 	lds	r25, 0x0DCF
     2ec:	89 2b       	or	r24, r25
     2ee:	31 f4       	brne	.+12     	; 0x2fc <AlgMakeTermSirena+0x24>
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	90 93 cf 0d 	sts	0x0DCF, r25
     2f8:	80 93 ce 0d 	sts	0x0DCE, r24

char flSirenaOtkaz = 0;
TTime TOtpalDatchik;
void AlgMakeTermSirena(void) {
	for (int i=0; i<THERM_COUNT; ++i) { // алгоритм должен работать всегда
		TermAlg(i);
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <TermAlg>
		if (Terms[i].swTermAlg == cswIdle) Terms[i].swTermAlg = cswStart;
     304:	80 91 0e 0e 	lds	r24, 0x0E0E
     308:	90 91 0f 0e 	lds	r25, 0x0E0F
     30c:	89 2b       	or	r24, r25
     30e:	31 f4       	brne	.+12     	; 0x31c <AlgMakeTermSirena+0x44>
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 0f 0e 	sts	0x0E0F, r25
     318:	80 93 0e 0e 	sts	0x0E0E, r24
	}
	// если сейчас не ждем секунду перед сиреной по отказу датчиков(не было отказов), то анализируем отказы по датчикам
	// если отказ случился, то засекаем время
	if (!flSirenaOtkaz) {
     31c:	80 91 ec 07 	lds	r24, 0x07EC
     320:	88 23       	and	r24, r24
     322:	d9 f5       	brne	.+118    	; 0x39a <AlgMakeTermSirena+0xc2>
		for (int i=0; i<THERM_COUNT; ++i) {
			if (!Terms[i].flEnable) continue; // если датчик не в работе, то по нему и не жужжжжим
     324:	80 91 d4 0d 	lds	r24, 0x0DD4
     328:	88 23       	and	r24, r24
     32a:	d1 f0       	breq	.+52     	; 0x360 <AlgMakeTermSirena+0x88>
			if ((Terms[i].trigOtkaz == 1) || (Terms[i].trigCRCOtkaz == 1) || (Terms[i].trigMINLim == 1) || (Terms[i].trigMAXLim == 1)) {
     32c:	80 91 fa 0d 	lds	r24, 0x0DFA
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	51 f4       	brne	.+20     	; 0x348 <AlgMakeTermSirena+0x70>
				flSirenaOtkaz = 1;
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	80 93 ec 07 	sts	0x07EC, r24
				TOtpalDatchik = GetTime();
     33a:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     33e:	90 93 bf 08 	sts	0x08BF, r25
     342:	80 93 be 08 	sts	0x08BE, r24
     346:	0c c0       	rjmp	.+24     	; 0x360 <AlgMakeTermSirena+0x88>
	// если сейчас не ждем секунду перед сиреной по отказу датчиков(не было отказов), то анализируем отказы по датчикам
	// если отказ случился, то засекаем время
	if (!flSirenaOtkaz) {
		for (int i=0; i<THERM_COUNT; ++i) {
			if (!Terms[i].flEnable) continue; // если датчик не в работе, то по нему и не жужжжжим
			if ((Terms[i].trigOtkaz == 1) || (Terms[i].trigCRCOtkaz == 1) || (Terms[i].trigMINLim == 1) || (Terms[i].trigMAXLim == 1)) {
     348:	80 91 00 0e 	lds	r24, 0x0E00
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	91 f3       	breq	.-28     	; 0x334 <AlgMakeTermSirena+0x5c>
     350:	80 91 d9 0d 	lds	r24, 0x0DD9
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	71 f3       	breq	.-36     	; 0x334 <AlgMakeTermSirena+0x5c>
     358:	80 91 da 0d 	lds	r24, 0x0DDA
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	51 f3       	breq	.-44     	; 0x334 <AlgMakeTermSirena+0x5c>
	}
	// если сейчас не ждем секунду перед сиреной по отказу датчиков(не было отказов), то анализируем отказы по датчикам
	// если отказ случился, то засекаем время
	if (!flSirenaOtkaz) {
		for (int i=0; i<THERM_COUNT; ++i) {
			if (!Terms[i].flEnable) continue; // если датчик не в работе, то по нему и не жужжжжим
     360:	80 91 14 0e 	lds	r24, 0x0E14
     364:	88 23       	and	r24, r24
     366:	c9 f0       	breq	.+50     	; 0x39a <AlgMakeTermSirena+0xc2>
			if ((Terms[i].trigOtkaz == 1) || (Terms[i].trigCRCOtkaz == 1) || (Terms[i].trigMINLim == 1) || (Terms[i].trigMAXLim == 1)) {
     368:	80 91 3a 0e 	lds	r24, 0x0E3A
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	61 f0       	breq	.+24     	; 0x388 <AlgMakeTermSirena+0xb0>
     370:	80 91 40 0e 	lds	r24, 0x0E40
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	41 f0       	breq	.+16     	; 0x388 <AlgMakeTermSirena+0xb0>
     378:	80 91 19 0e 	lds	r24, 0x0E19
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	21 f0       	breq	.+8      	; 0x388 <AlgMakeTermSirena+0xb0>
     380:	80 91 1a 0e 	lds	r24, 0x0E1A
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	49 f4       	brne	.+18     	; 0x39a <AlgMakeTermSirena+0xc2>
				flSirenaOtkaz = 1;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 ec 07 	sts	0x07EC, r24
				TOtpalDatchik = GetTime();
     38e:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     392:	90 93 bf 08 	sts	0x08BF, r25
     396:	80 93 be 08 	sts	0x08BE, r24
			}
		}
	}
	// надо подождать секунду, только после этого фомировать температурную сирену и смс
	// если заходим по флагу, значит сто пудово случилась ситуация по одному из СКОНФИГУРИР-ЫХ датчиков
	if (flSirenaOtkaz) {
     39a:	80 91 ec 07 	lds	r24, 0x07EC
     39e:	88 23       	and	r24, r24
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <AlgMakeTermSirena+0xcc>
     3a2:	4a c0       	rjmp	.+148    	; 0x438 <AlgMakeTermSirena+0x160>
		if ((GetTime() - TOtpalDatchik) >= Ticks(2000)) {
     3a4:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     3a8:	20 91 be 08 	lds	r18, 0x08BE
     3ac:	30 91 bf 08 	lds	r19, 0x08BF
     3b0:	8c 01       	movw	r16, r24
     3b2:	02 1b       	sub	r16, r18
     3b4:	13 0b       	sbc	r17, r19
     3b6:	60 ed       	ldi	r22, 0xD0	; 208
     3b8:	77 e0       	ldi	r23, 0x07	; 7
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
     3c2:	08 17       	cp	r16, r24
     3c4:	19 07       	cpc	r17, r25
     3c6:	c0 f1       	brcs	.+112    	; 0x438 <AlgMakeTermSirena+0x160>
			MakeTerm(tmpStr2);
     3c8:	81 e2       	ldi	r24, 0x21	; 33
     3ca:	9d e0       	ldi	r25, 0x0D	; 13
     3cc:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MakeTerm>
			for (int i=0; i<THERM_COUNT; ++i) {
				Terms[i].trigOtkaz = 0;
     3d0:	10 92 fa 0d 	sts	0x0DFA, r1
				Terms[i].trigCRCOtkaz = 0;
     3d4:	10 92 00 0e 	sts	0x0E00, r1
				Terms[i].trigMINLim = 0;
     3d8:	10 92 d9 0d 	sts	0x0DD9, r1
				Terms[i].trigMAXLim = 0;
     3dc:	10 92 da 0d 	sts	0x0DDA, r1
	// если заходим по флагу, значит сто пудово случилась ситуация по одному из СКОНФИГУРИР-ЫХ датчиков
	if (flSirenaOtkaz) {
		if ((GetTime() - TOtpalDatchik) >= Ticks(2000)) {
			MakeTerm(tmpStr2);
			for (int i=0; i<THERM_COUNT; ++i) {
				Terms[i].trigOtkaz = 0;
     3e0:	10 92 3a 0e 	sts	0x0E3A, r1
				Terms[i].trigCRCOtkaz = 0;
     3e4:	10 92 40 0e 	sts	0x0E40, r1
				Terms[i].trigMINLim = 0;
     3e8:	10 92 19 0e 	sts	0x0E19, r1
				Terms[i].trigMAXLim = 0;
     3ec:	10 92 1a 0e 	sts	0x0E1A, r1
			}
			if (!IsDebug()) { //!#ifdef M_DEBUG
     3f0:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
     3f4:	88 23       	and	r24, r24
     3f6:	61 f4       	brne	.+24     	; 0x410 <AlgMakeTermSirena+0x138>
				//#ifndef M_DEBUG // если отладка, то СМС не отсылаем
				SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS|cPrivilegeAlarmSMS;
     3f8:	87 e0       	ldi	r24, 0x07	; 7
     3fa:	80 93 81 09 	sts	0x0981, r24
				SMSToSend.SMSZones = 0xFF; // все зоны
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	80 93 82 09 	sts	0x0982, r24
				strcpy(SMSToSend.SMSText, tmpStr2);
     404:	8b ee       	ldi	r24, 0xEB	; 235
     406:	98 e0       	ldi	r25, 0x08	; 8
     408:	61 e2       	ldi	r22, 0x21	; 33
     40a:	7d e0       	ldi	r23, 0x0D	; 13
     40c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
			} //!#endif
			
			swAlgTermSirena = cswStart;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	90 93 f7 07 	sts	0x07F7, r25
     418:	80 93 f6 07 	sts	0x07F6, r24
			
			if (IsDebug()) { //!#ifdef M_DEBUG
     41c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
     420:	88 23       	and	r24, r24
     422:	41 f0       	breq	.+16     	; 0x434 <AlgMakeTermSirena+0x15c>
				PutPC(tmpStr2);
     424:	81 e2       	ldi	r24, 0x21	; 33
     426:	9d e0       	ldi	r25, 0x0D	; 13
     428:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
				PutPC("\n\r");
     42c:	86 e1       	ldi	r24, 0x16	; 22
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
			} //!#endif

			flSirenaOtkaz = 0; // опять переходим на анализ отказов по датчикам
     434:	10 92 ec 07 	sts	0x07EC, r1
		}
	}
}
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <GetNumberPrivileges>:
	return 0;
}
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

char GetNumberPrivileges(char *InPhoneNumber) {
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	7c 01       	movw	r14, r24
     450:	06 e0       	ldi	r16, 0x06	; 6
     452:	10 e0       	ldi	r17, 0x00	; 0
	char RetVal = 0;
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		if (strncmp(InPhoneNumber, PhoneNumber[CellNumber-cSettings].Number, MAX_NUMBER_LENGTH-1)==0) {
     454:	86 e2       	ldi	r24, 0x26	; 38
     456:	c8 2e       	mov	r12, r24
     458:	d1 2c       	mov	r13, r1
     45a:	0c 9d       	mul	r16, r12
     45c:	e0 01       	movw	r28, r0
     45e:	0d 9d       	mul	r16, r13
     460:	d0 0d       	add	r29, r0
     462:	1c 9d       	mul	r17, r12
     464:	d0 0d       	add	r29, r0
     466:	11 24       	eor	r1, r1
     468:	c6 5e       	subi	r28, 0xE6	; 230
     46a:	d5 4f       	sbci	r29, 0xF5	; 245
     46c:	c7 01       	movw	r24, r14
     46e:	be 01       	movw	r22, r28
     470:	42 e2       	ldi	r20, 0x22	; 34
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <strncmp>
     478:	00 97       	sbiw	r24, 0x00	; 0
     47a:	11 f4       	brne	.+4      	; 0x480 <GetNumberPrivileges+0x42>
			RetVal = PhoneNumber[CellNumber-cSettings].Privilege;
     47c:	8c a1       	ldd	r24, Y+36	; 0x24
     47e:	06 c0       	rjmp	.+12     	; 0x48c <GetNumberPrivileges+0x4e>
			break;
     480:	0f 5f       	subi	r16, 0xFF	; 255
     482:	1f 4f       	sbci	r17, 0xFF	; 255
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

char GetNumberPrivileges(char *InPhoneNumber) {
	char RetVal = 0;
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
     484:	0c 30       	cpi	r16, 0x0C	; 12
     486:	11 05       	cpc	r17, r1
     488:	41 f7       	brne	.-48     	; 0x45a <GetNumberPrivileges+0x1c>
     48a:	80 e0       	ldi	r24, 0x00	; 0
			RetVal = PhoneNumber[CellNumber-cSettings].Privilege;
			break;
		}
	}
	return RetVal;
}
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	08 95       	ret

0000049e <AlgCountRings>:
//------------------------------------------------------------------------------------

char CountRings = 0;
char flWasPrivUserCall = 0;
char AlgCountRings(void) {
	if (flIsReaded != 0) {
     49e:	80 91 83 09 	lds	r24, 0x0983
     4a2:	88 23       	and	r24, r24
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <AlgCountRings+0xa>
     4a6:	3f c0       	rjmp	.+126    	; 0x526 <AlgCountRings+0x88>
		if (strstr(FromModemBuf, "+CLIP: \"") != NULL) {
     4a8:	8a e7       	ldi	r24, 0x7A	; 122
     4aa:	9c e0       	ldi	r25, 0x0C	; 12
     4ac:	69 e1       	ldi	r22, 0x19	; 25
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <strstr>
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	a9 f0       	breq	.+42     	; 0x4e2 <AlgCountRings+0x44>
			char *tmpBegStr = &(FromModemBuf[8]);
			char *tmpEndStr = strstr(tmpBegStr, "\"");
     4b8:	82 e8       	ldi	r24, 0x82	; 130
     4ba:	9c e0       	ldi	r25, 0x0C	; 12
     4bc:	62 e2       	ldi	r22, 0x22	; 34
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <strchr>
     4c4:	fc 01       	movw	r30, r24
			*tmpEndStr = 0;
     4c6:	10 82       	st	Z, r1
			if (GetNumberPrivileges(tmpBegStr) != cPrivilegeFull) {
     4c8:	82 e8       	ldi	r24, 0x82	; 130
     4ca:	9c e0       	ldi	r25, 0x0C	; 12
     4cc:	0e 94 1f 02 	call	0x43e	; 0x43e <GetNumberPrivileges>
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	49 f1       	breq	.+82     	; 0x526 <AlgCountRings+0x88>
				CountRings = 0;
     4d4:	10 92 e4 07 	sts	0x07E4, r1
				PutModem("ath\r\n");
     4d8:	82 e2       	ldi	r24, 0x22	; 34
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <PutModem>
     4e0:	22 c0       	rjmp	.+68     	; 0x526 <AlgCountRings+0x88>
			}
		} else
		if (strstr(FromModemBuf, "RING") != NULL) {
     4e2:	8a e7       	ldi	r24, 0x7A	; 122
     4e4:	9c e0       	ldi	r25, 0x0C	; 12
     4e6:	68 e2       	ldi	r22, 0x28	; 40
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <strstr>
     4ee:	00 97       	sbiw	r24, 0x00	; 0
     4f0:	81 f0       	breq	.+32     	; 0x512 <AlgCountRings+0x74>
			if (CountRings >= 3) {
     4f2:	80 91 e4 07 	lds	r24, 0x07E4
     4f6:	83 30       	cpi	r24, 0x03	; 3
     4f8:	44 f0       	brlt	.+16     	; 0x50a <AlgCountRings+0x6c>
				PutModem("ath\r\n");
     4fa:	82 e2       	ldi	r24, 0x22	; 34
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <PutModem>
				flWasPrivUserCall = 1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 e5 07 	sts	0x07E5, r24
     508:	0c c0       	rjmp	.+24     	; 0x522 <AlgCountRings+0x84>
				CountRings = 0;
			}
			else {
				CountRings++;
     50a:	8f 5f       	subi	r24, 0xFF	; 255
     50c:	80 93 e4 07 	sts	0x07E4, r24
     510:	0a c0       	rjmp	.+20     	; 0x526 <AlgCountRings+0x88>
			}
		}
		else
		if (strstr(FromModemBuf, "NO CARRIER") != NULL) {
     512:	8a e7       	ldi	r24, 0x7A	; 122
     514:	9c e0       	ldi	r25, 0x0C	; 12
     516:	6d e2       	ldi	r22, 0x2D	; 45
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <strstr>
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	11 f0       	breq	.+4      	; 0x526 <AlgCountRings+0x88>
			CountRings = 0;
     522:	10 92 e4 07 	sts	0x07E4, r1
		}
	}
	return 0;
}
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret

0000052a <Indik>:
int old_swIndik = cswIdle;
int AzbukaIndex = 0;
int swAzbuka = cswStart;
TTime TIndik;
unsigned int AzbukaMorze[10];
char Indik(void) {
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
	if (swIndik != cswIdle) {
     52e:	20 91 de 07 	lds	r18, 0x07DE
     532:	30 91 df 07 	lds	r19, 0x07DF
     536:	21 15       	cp	r18, r1
     538:	31 05       	cpc	r19, r1
     53a:	09 f4       	brne	.+2      	; 0x53e <Indik+0x14>
     53c:	06 c1       	rjmp	.+524    	; 0x74a <Indik+0x220>
		if (old_swIndik != swIndik) { // новое состояние
     53e:	80 91 e0 07 	lds	r24, 0x07E0
     542:	90 91 e1 07 	lds	r25, 0x07E1
     546:	82 17       	cp	r24, r18
     548:	93 07       	cpc	r25, r19
     54a:	09 f4       	brne	.+2      	; 0x54e <Indik+0x24>
     54c:	60 c0       	rjmp	.+192    	; 0x60e <Indik+0xe4>
			AzbukaIndex = 0;
     54e:	10 92 e3 07 	sts	0x07E3, r1
     552:	10 92 e2 07 	sts	0x07E2, r1
			switch (swIndik) {
     556:	29 30       	cpi	r18, 0x09	; 9
     558:	31 05       	cpc	r19, r1
     55a:	e9 f0       	breq	.+58     	; 0x596 <Indik+0x6c>
     55c:	2a 30       	cpi	r18, 0x0A	; 10
     55e:	31 05       	cpc	r19, r1
     560:	2c f4       	brge	.+10     	; 0x56c <Indik+0x42>
     562:	28 30       	cpi	r18, 0x08	; 8
     564:	31 05       	cpc	r19, r1
     566:	09 f0       	breq	.+2      	; 0x56a <Indik+0x40>
     568:	f0 c0       	rjmp	.+480    	; 0x74a <Indik+0x220>
     56a:	08 c0       	rjmp	.+16     	; 0x57c <Indik+0x52>
     56c:	2b 30       	cpi	r18, 0x0B	; 11
     56e:	31 05       	cpc	r19, r1
     570:	69 f1       	breq	.+90     	; 0x5cc <Indik+0xa2>
     572:	2f 30       	cpi	r18, 0x0F	; 15
     574:	31 05       	cpc	r19, r1
     576:	09 f0       	breq	.+2      	; 0x57a <Indik+0x50>
     578:	e8 c0       	rjmp	.+464    	; 0x74a <Indik+0x220>
     57a:	3d c0       	rjmp	.+122    	; 0x5f6 <Indik+0xcc>
				
				case cswStart:
				break;
				
				case cswWaitReady:
					AzbukaMorze[0] = 500;
     57c:	84 ef       	ldi	r24, 0xF4	; 244
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	90 93 fd 07 	sts	0x07FD, r25
     584:	80 93 fc 07 	sts	0x07FC, r24
					AzbukaMorze[1] = 500;
     588:	90 93 ff 07 	sts	0x07FF, r25
     58c:	80 93 fe 07 	sts	0x07FE, r24
					AzbukaMorze[2] = 1500;
     590:	8c ed       	ldi	r24, 0xDC	; 220
     592:	95 e0       	ldi	r25, 0x05	; 5
     594:	27 c0       	rjmp	.+78     	; 0x5e4 <Indik+0xba>
					AzbukaMorze[3] = 0;
				break;
				
				case cswERRORWaitReady:
					AzbukaMorze[0] = 500;
     596:	84 ef       	ldi	r24, 0xF4	; 244
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	90 93 fd 07 	sts	0x07FD, r25
     59e:	80 93 fc 07 	sts	0x07FC, r24
					AzbukaMorze[1] = 500;
     5a2:	90 93 ff 07 	sts	0x07FF, r25
     5a6:	80 93 fe 07 	sts	0x07FE, r24
					AzbukaMorze[2] = 500;
     5aa:	90 93 01 08 	sts	0x0801, r25
     5ae:	80 93 00 08 	sts	0x0800, r24
					AzbukaMorze[3] = 500;
     5b2:	90 93 03 08 	sts	0x0803, r25
     5b6:	80 93 02 08 	sts	0x0802, r24
					AzbukaMorze[4] = 500;
     5ba:	90 93 05 08 	sts	0x0805, r25
     5be:	80 93 04 08 	sts	0x0804, r24
					AzbukaMorze[5] = 0;
     5c2:	10 92 07 08 	sts	0x0807, r1
     5c6:	10 92 06 08 	sts	0x0806, r1
     5ca:	bf c0       	rjmp	.+382    	; 0x74a <Indik+0x220>
				break;
				
				case cswReadSettings:
					AzbukaMorze[0] = 1500;
     5cc:	8c ed       	ldi	r24, 0xDC	; 220
     5ce:	95 e0       	ldi	r25, 0x05	; 5
     5d0:	90 93 fd 07 	sts	0x07FD, r25
     5d4:	80 93 fc 07 	sts	0x07FC, r24
					AzbukaMorze[1] = 1500;
     5d8:	90 93 ff 07 	sts	0x07FF, r25
     5dc:	80 93 fe 07 	sts	0x07FE, r24
					AzbukaMorze[2] = 500;
     5e0:	84 ef       	ldi	r24, 0xF4	; 244
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	90 93 01 08 	sts	0x0801, r25
     5e8:	80 93 00 08 	sts	0x0800, r24
					AzbukaMorze[3] = 0;
     5ec:	10 92 03 08 	sts	0x0803, r1
     5f0:	10 92 02 08 	sts	0x0802, r1
     5f4:	aa c0       	rjmp	.+340    	; 0x74a <Indik+0x220>
				break;
				
				case cswStartWork: // режим "работа" - потушили все диоды
					AzbukaMorze[0] = 0;
     5f6:	10 92 fd 07 	sts	0x07FD, r1
     5fa:	10 92 fc 07 	sts	0x07FC, r1
					SetIndBits(0);
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
					swIndik = cswIdle;
     604:	10 92 df 07 	sts	0x07DF, r1
     608:	10 92 de 07 	sts	0x07DE, r1
     60c:	9e c0       	rjmp	.+316    	; 0x74a <Indik+0x220>
				break;
			}
		}
		else { // старое состояние - продолжаем мигать
			switch (swAzbuka) {
     60e:	80 91 53 02 	lds	r24, 0x0253
     612:	90 91 54 02 	lds	r25, 0x0254
     616:	86 32       	cpi	r24, 0x26	; 38
     618:	91 05       	cpc	r25, r1
     61a:	09 f4       	brne	.+2      	; 0x61e <Indik+0xf4>
     61c:	4b c0       	rjmp	.+150    	; 0x6b4 <Indik+0x18a>
     61e:	87 32       	cpi	r24, 0x27	; 39
     620:	91 05       	cpc	r25, r1
     622:	3c f4       	brge	.+14     	; 0x632 <Indik+0x108>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	91 05       	cpc	r25, r1
     628:	79 f0       	breq	.+30     	; 0x648 <Indik+0x11e>
     62a:	85 97       	sbiw	r24, 0x25	; 37
     62c:	09 f0       	breq	.+2      	; 0x630 <Indik+0x106>
     62e:	8d c0       	rjmp	.+282    	; 0x74a <Indik+0x220>
     630:	17 c0       	rjmp	.+46     	; 0x660 <Indik+0x136>
     632:	83 33       	cpi	r24, 0x33	; 51
     634:	91 05       	cpc	r25, r1
     636:	91 f1       	breq	.+100    	; 0x69c <Indik+0x172>
     638:	85 33       	cpi	r24, 0x35	; 53
     63a:	91 05       	cpc	r25, r1
     63c:	09 f4       	brne	.+2      	; 0x640 <Indik+0x116>
     63e:	60 c0       	rjmp	.+192    	; 0x700 <Indik+0x1d6>
     640:	88 97       	sbiw	r24, 0x28	; 40
     642:	09 f0       	breq	.+2      	; 0x646 <Indik+0x11c>
     644:	82 c0       	rjmp	.+260    	; 0x74a <Indik+0x220>
     646:	65 c0       	rjmp	.+202    	; 0x712 <Indik+0x1e8>
				case cswStart:
					OnIndBit(0b00000001);
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <OnIndBit>
					TIndik = GetTime();
     64e:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     652:	90 93 fb 07 	sts	0x07FB, r25
     656:	80 93 fa 07 	sts	0x07FA, r24
					swAzbuka = csw010;
     65a:	85 e2       	ldi	r24, 0x25	; 37
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	71 c0       	rjmp	.+226    	; 0x742 <Indik+0x218>
				break;
				case csw010:
					if ((GetTime() - TIndik) >= Ticks(AzbukaMorze[AzbukaIndex])) { 
     660:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     664:	20 91 fa 07 	lds	r18, 0x07FA
     668:	30 91 fb 07 	lds	r19, 0x07FB
     66c:	8c 01       	movw	r16, r24
     66e:	02 1b       	sub	r16, r18
     670:	13 0b       	sbc	r17, r19
     672:	e0 91 e2 07 	lds	r30, 0x07E2
     676:	f0 91 e3 07 	lds	r31, 0x07E3
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e4 50       	subi	r30, 0x04	; 4
     680:	f8 4f       	sbci	r31, 0xF8	; 248
     682:	60 81       	ld	r22, Z
     684:	71 81       	ldd	r23, Z+1	; 0x01
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
     68e:	08 17       	cp	r16, r24
     690:	19 07       	cpc	r17, r25
     692:	08 f4       	brcc	.+2      	; 0x696 <Indik+0x16c>
     694:	5a c0       	rjmp	.+180    	; 0x74a <Indik+0x220>
						swAzbuka = cswOK;
     696:	83 e3       	ldi	r24, 0x33	; 51
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	53 c0       	rjmp	.+166    	; 0x742 <Indik+0x218>
					}
				break;
				case cswOK:
					OffIndBit(0b00000001);
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <OffIndBit>
					TIndik = GetTime();
     6a2:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     6a6:	90 93 fb 07 	sts	0x07FB, r25
     6aa:	80 93 fa 07 	sts	0x07FA, r24
					swAzbuka = csw020;
     6ae:	86 e2       	ldi	r24, 0x26	; 38
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	47 c0       	rjmp	.+142    	; 0x742 <Indik+0x218>
				break;
				case csw020:
					if ((GetTime() - TIndik) >= Ticks(500)) { 
     6b4:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     6b8:	20 91 fa 07 	lds	r18, 0x07FA
     6bc:	30 91 fb 07 	lds	r19, 0x07FB
     6c0:	8c 01       	movw	r16, r24
     6c2:	02 1b       	sub	r16, r18
     6c4:	13 0b       	sbc	r17, r19
     6c6:	64 ef       	ldi	r22, 0xF4	; 244
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
     6d2:	08 17       	cp	r16, r24
     6d4:	19 07       	cpc	r17, r25
     6d6:	c8 f1       	brcs	.+114    	; 0x74a <Indik+0x220>
						AzbukaIndex++;
     6d8:	e0 91 e2 07 	lds	r30, 0x07E2
     6dc:	f0 91 e3 07 	lds	r31, 0x07E3
     6e0:	31 96       	adiw	r30, 0x01	; 1
     6e2:	f0 93 e3 07 	sts	0x07E3, r31
     6e6:	e0 93 e2 07 	sts	0x07E2, r30
						if (AzbukaMorze[AzbukaIndex] == 0) swAzbuka = cswEnd; // закончили серию миганий - кушаем твикс
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	e4 50       	subi	r30, 0x04	; 4
     6f0:	f8 4f       	sbci	r31, 0xF8	; 248
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	89 2b       	or	r24, r25
     6f8:	11 f5       	brne	.+68     	; 0x73e <Indik+0x214>
     6fa:	85 e3       	ldi	r24, 0x35	; 53
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	21 c0       	rjmp	.+66     	; 0x742 <Indik+0x218>
						else swAzbuka = cswStart;
					}
				break;
		//------------------------
				case cswEnd: // кушаем
					TIndik = GetTime();
     700:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     704:	90 93 fb 07 	sts	0x07FB, r25
     708:	80 93 fa 07 	sts	0x07FA, r24
					swAzbuka = csw030;
     70c:	88 e2       	ldi	r24, 0x28	; 40
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	18 c0       	rjmp	.+48     	; 0x742 <Indik+0x218>
				break;
				case csw030:
					if ((GetTime() - TIndik) >= Ticks(500)) { 
     712:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     716:	20 91 fa 07 	lds	r18, 0x07FA
     71a:	30 91 fb 07 	lds	r19, 0x07FB
     71e:	8c 01       	movw	r16, r24
     720:	02 1b       	sub	r16, r18
     722:	13 0b       	sbc	r17, r19
     724:	64 ef       	ldi	r22, 0xF4	; 244
     726:	71 e0       	ldi	r23, 0x01	; 1
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
     730:	08 17       	cp	r16, r24
     732:	19 07       	cpc	r17, r25
     734:	50 f0       	brcs	.+20     	; 0x74a <Indik+0x220>
						AzbukaIndex = 0;
     736:	10 92 e3 07 	sts	0x07E3, r1
     73a:	10 92 e2 07 	sts	0x07E2, r1
						swAzbuka = cswStart;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	90 93 54 02 	sts	0x0254, r25
     746:	80 93 53 02 	sts	0x0253, r24
					}
				break;
			}
		}
	}
	old_swIndik = swIndik;
     74a:	80 91 de 07 	lds	r24, 0x07DE
     74e:	90 91 df 07 	lds	r25, 0x07DF
     752:	90 93 e1 07 	sts	0x07E1, r25
     756:	80 93 e0 07 	sts	0x07E0, r24
	return 0;
}
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <SendSMS>:
//Text – текст сообщения;
////Возвращает: 0 – все удачно, в случае ошибки – ее код.
struct SSMSToSend SMSToSendAlg;
TTime TPrevSendSMS;
int swSMS = cswIdle;
char SendSMS() {
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	c6 59       	subi	r28, 0x96	; 150
     774:	d0 40       	sbci	r29, 0x00	; 0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
	char cmdSendSMS[MAX_BUF];
	switch (swSMS) {
     780:	80 91 dc 07 	lds	r24, 0x07DC
     784:	90 91 dd 07 	lds	r25, 0x07DD
     788:	80 32       	cpi	r24, 0x20	; 32
     78a:	91 05       	cpc	r25, r1
     78c:	09 f4       	brne	.+2      	; 0x790 <SendSMS+0x2e>
     78e:	db c0       	rjmp	.+438    	; 0x946 <SendSMS+0x1e4>
     790:	81 32       	cpi	r24, 0x21	; 33
     792:	91 05       	cpc	r25, r1
     794:	ac f4       	brge	.+42     	; 0x7c0 <SendSMS+0x5e>
     796:	8b 31       	cpi	r24, 0x1B	; 27
     798:	91 05       	cpc	r25, r1
     79a:	09 f4       	brne	.+2      	; 0x79e <SendSMS+0x3c>
     79c:	4c c0       	rjmp	.+152    	; 0x836 <SendSMS+0xd4>
     79e:	8c 31       	cpi	r24, 0x1C	; 28
     7a0:	91 05       	cpc	r25, r1
     7a2:	34 f4       	brge	.+12     	; 0x7b0 <SendSMS+0x4e>
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	39 f1       	breq	.+78     	; 0x7f6 <SendSMS+0x94>
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	09 f0       	breq	.+2      	; 0x7ae <SendSMS+0x4c>
     7ac:	31 c1       	rjmp	.+610    	; 0xa10 <SendSMS+0x2ae>
     7ae:	36 c0       	rjmp	.+108    	; 0x81c <SendSMS+0xba>
     7b0:	8c 31       	cpi	r24, 0x1C	; 28
     7b2:	91 05       	cpc	r25, r1
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <SendSMS+0x56>
     7b6:	48 c0       	rjmp	.+144    	; 0x848 <SendSMS+0xe6>
     7b8:	4f 97       	sbiw	r24, 0x1f	; 31
     7ba:	09 f0       	breq	.+2      	; 0x7be <SendSMS+0x5c>
     7bc:	29 c1       	rjmp	.+594    	; 0xa10 <SendSMS+0x2ae>
     7be:	b6 c0       	rjmp	.+364    	; 0x92c <SendSMS+0x1ca>
     7c0:	85 32       	cpi	r24, 0x25	; 37
     7c2:	91 05       	cpc	r25, r1
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <SendSMS+0x66>
     7c6:	4b c0       	rjmp	.+150    	; 0x85e <SendSMS+0xfc>
     7c8:	86 32       	cpi	r24, 0x26	; 38
     7ca:	91 05       	cpc	r25, r1
     7cc:	44 f4       	brge	.+16     	; 0x7de <SendSMS+0x7c>
     7ce:	82 32       	cpi	r24, 0x22	; 34
     7d0:	91 05       	cpc	r25, r1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <SendSMS+0x74>
     7d4:	cc c0       	rjmp	.+408    	; 0x96e <SendSMS+0x20c>
     7d6:	83 97       	sbiw	r24, 0x23	; 35
     7d8:	09 f0       	breq	.+2      	; 0x7dc <SendSMS+0x7a>
     7da:	1a c1       	rjmp	.+564    	; 0xa10 <SendSMS+0x2ae>
     7dc:	cf c0       	rjmp	.+414    	; 0x97c <SendSMS+0x21a>
     7de:	88 32       	cpi	r24, 0x28	; 40
     7e0:	91 05       	cpc	r25, r1
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <SendSMS+0x84>
     7e4:	f4 c0       	rjmp	.+488    	; 0x9ce <SendSMS+0x26c>
     7e6:	85 33       	cpi	r24, 0x35	; 53
     7e8:	91 05       	cpc	r25, r1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <SendSMS+0x8c>
     7ec:	0d c1       	rjmp	.+538    	; 0xa08 <SendSMS+0x2a6>
     7ee:	86 97       	sbiw	r24, 0x26	; 38
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <SendSMS+0x92>
     7f2:	0e c1       	rjmp	.+540    	; 0xa10 <SendSMS+0x2ae>
     7f4:	da c0       	rjmp	.+436    	; 0x9aa <SendSMS+0x248>
		case cswIdle:
			if (SMSToSend.SMSPriv) {
     7f6:	80 91 81 09 	lds	r24, 0x0981
     7fa:	88 23       	and	r24, r24
     7fc:	09 f4       	brne	.+2      	; 0x800 <SendSMS+0x9e>
     7fe:	08 c1       	rjmp	.+528    	; 0xa10 <SendSMS+0x2ae>
				memcpy(&SMSToSendAlg, &SMSToSend, sizeof(SMSToSend));
     800:	a2 e1       	ldi	r26, 0x12	; 18
     802:	b8 e0       	ldi	r27, 0x08	; 8
     804:	eb ee       	ldi	r30, 0xEB	; 235
     806:	f8 e0       	ldi	r31, 0x08	; 8
     808:	88 e9       	ldi	r24, 0x98	; 152
     80a:	01 90       	ld	r0, Z+
     80c:	0d 92       	st	X+, r0
     80e:	81 50       	subi	r24, 0x01	; 1
     810:	e1 f7       	brne	.-8      	; 0x80a <SendSMS+0xa8>
				SMSToSend.SMSPriv = 0;
     812:	10 92 81 09 	sts	0x0981, r1
				swSMS = cswStart;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	08 c0       	rjmp	.+16     	; 0x82c <SendSMS+0xca>
			}
		break;

		case cswStart:
			CellNumber = cNumber01;
     81c:	8a e1       	ldi	r24, 0x1A	; 26
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 16 0d 	sts	0x0D16, r25
     824:	80 93 15 0d 	sts	0x0D15, r24
			swSMS = cswMarkDelay00;
     828:	8b e1       	ldi	r24, 0x1B	; 27
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 dd 07 	sts	0x07DD, r25
     830:	80 93 dc 07 	sts	0x07DC, r24
     834:	ed c0       	rjmp	.+474    	; 0xa10 <SendSMS+0x2ae>
		break;
		
		case cswMarkDelay00:
			MarkDelay(&TPrevSendSMS, &swSMS, cswWaitDelay00);
     836:	88 ef       	ldi	r24, 0xF8	; 248
     838:	97 e0       	ldi	r25, 0x07	; 7
     83a:	6c ed       	ldi	r22, 0xDC	; 220
     83c:	77 e0       	ldi	r23, 0x07	; 7
     83e:	4c e1       	ldi	r20, 0x1C	; 28
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <MarkDelay>
     846:	e4 c0       	rjmp	.+456    	; 0xa10 <SendSMS+0x2ae>
		break;
		case cswWaitDelay00:
			WaitDelayAndGoTo(TPrevSendSMS, 3000, &swSMS, csw010);
     848:	80 91 f8 07 	lds	r24, 0x07F8
     84c:	90 91 f9 07 	lds	r25, 0x07F9
     850:	68 eb       	ldi	r22, 0xB8	; 184
     852:	7b e0       	ldi	r23, 0x0B	; 11
     854:	4c ed       	ldi	r20, 0xDC	; 220
     856:	57 e0       	ldi	r21, 0x07	; 7
     858:	25 e2       	ldi	r18, 0x25	; 37
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	71 c0       	rjmp	.+226    	; 0x940 <SendSMS+0x1de>
		break;
		
		case csw010:
			if (CellNumber >= cLast) { // Отправили СМС всем абонентам
     85e:	40 91 15 0d 	lds	r20, 0x0D15
     862:	50 91 16 0d 	lds	r21, 0x0D16
     866:	40 32       	cpi	r20, 0x20	; 32
     868:	51 05       	cpc	r21, r1
     86a:	1c f0       	brlt	.+6      	; 0x872 <SendSMS+0x110>
				swSMS = cswEnd;
     86c:	85 e3       	ldi	r24, 0x35	; 53
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	dd cf       	rjmp	.-70     	; 0x82c <SendSMS+0xca>
				break;
			}
			if (
     872:	44 51       	subi	r20, 0x14	; 20
     874:	50 40       	sbci	r21, 0x00	; 0
     876:	b6 e2       	ldi	r27, 0x26	; 38
     878:	eb 2e       	mov	r14, r27
     87a:	f1 2c       	mov	r15, r1
     87c:	4e 9d       	mul	r20, r14
     87e:	f0 01       	movw	r30, r0
     880:	4f 9d       	mul	r20, r15
     882:	f0 0d       	add	r31, r0
     884:	5e 9d       	mul	r21, r14
     886:	f0 0d       	add	r31, r0
     888:	11 24       	eor	r1, r1
     88a:	4c 5e       	subi	r20, 0xEC	; 236
     88c:	5f 4f       	sbci	r21, 0xFF	; 255
     88e:	e6 5e       	subi	r30, 0xE6	; 230
     890:	f5 4f       	sbci	r31, 0xF5	; 245
     892:	83 a1       	ldd	r24, Z+35	; 0x23
     894:	88 23       	and	r24, r24
     896:	c9 f0       	breq	.+50     	; 0x8ca <SendSMS+0x168>
     898:	80 91 a8 08 	lds	r24, 0x08A8
     89c:	94 a1       	ldd	r25, Z+36	; 0x24
     89e:	89 23       	and	r24, r25
     8a0:	a1 f0       	breq	.+40     	; 0x8ca <SendSMS+0x168>
     8a2:	20 91 a9 08 	lds	r18, 0x08A9
     8a6:	33 27       	eor	r19, r19
     8a8:	27 fd       	sbrc	r18, 7
     8aa:	30 95       	com	r19
     8ac:	20 7f       	andi	r18, 0xF0	; 240
     8ae:	30 70       	andi	r19, 0x00	; 0
     8b0:	85 a1       	ldd	r24, Z+37	; 0x25
     8b2:	99 27       	eor	r25, r25
     8b4:	87 fd       	sbrc	r24, 7
     8b6:	90 95       	com	r25
     8b8:	a4 e0       	ldi	r26, 0x04	; 4
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	aa 95       	dec	r26
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <SendSMS+0x158>
     8c2:	28 23       	and	r18, r24
     8c4:	39 23       	and	r19, r25
     8c6:	23 2b       	or	r18, r19
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <SendSMS+0x176>
				(PhoneNumber[CellNumber-cSettings].IsActive==0) || // неактивен
				((PhoneNumber[CellNumber-cSettings].Privilege & SMSToSendAlg.SMSPriv) == 0) || // не обладает привилегиями получения такого СМС
				!((SMSToSendAlg.SMSZones&(PhoneNumber[CellNumber-cSettings].Zones<<4)) & 0b11110000) // НЕ сработала зона именно этого номера
				) {
				CellNumber++;
     8ca:	4f 5f       	subi	r20, 0xFF	; 255
     8cc:	5f 4f       	sbci	r21, 0xFF	; 255
     8ce:	50 93 16 0d 	sts	0x0D16, r21
     8d2:	40 93 15 0d 	sts	0x0D15, r20
     8d6:	9c c0       	rjmp	.+312    	; 0xa10 <SendSMS+0x2ae>
			}
			else {
				strncpy(cmdSendSMS, "at+cmgs=\"", MAX_BUF-1);
     8d8:	8e 01       	movw	r16, r28
     8da:	0f 5f       	subi	r16, 0xFF	; 255
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
     8de:	c8 01       	movw	r24, r16
     8e0:	68 e3       	ldi	r22, 0x38	; 56
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	45 e9       	ldi	r20, 0x95	; 149
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
				strncat(cmdSendSMS, PhoneNumber[CellNumber-cSettings].Number, MAX_BUF-1);
     8ec:	80 91 15 0d 	lds	r24, 0x0D15
     8f0:	90 91 16 0d 	lds	r25, 0x0D16
     8f4:	44 97       	sbiw	r24, 0x14	; 20
     8f6:	8e 9d       	mul	r24, r14
     8f8:	b0 01       	movw	r22, r0
     8fa:	8f 9d       	mul	r24, r15
     8fc:	70 0d       	add	r23, r0
     8fe:	9e 9d       	mul	r25, r14
     900:	70 0d       	add	r23, r0
     902:	11 24       	eor	r1, r1
     904:	66 5e       	subi	r22, 0xE6	; 230
     906:	75 4f       	sbci	r23, 0xF5	; 245
     908:	c8 01       	movw	r24, r16
     90a:	45 e9       	ldi	r20, 0x95	; 149
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
				strncat(cmdSendSMS, "\"\r\n", MAX_BUF-1);
     912:	c8 01       	movw	r24, r16
     914:	62 e4       	ldi	r22, 0x42	; 66
     916:	71 e0       	ldi	r23, 0x01	; 1
     918:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
				DoCommand(&TPrevSendSMS, cmdSendSMS, &swSMS, cswWaitDelay01);
     91c:	88 ef       	ldi	r24, 0xF8	; 248
     91e:	97 e0       	ldi	r25, 0x07	; 7
     920:	b8 01       	movw	r22, r16
     922:	4c ed       	ldi	r20, 0xDC	; 220
     924:	57 e0       	ldi	r21, 0x07	; 7
     926:	2f e1       	ldi	r18, 0x1F	; 31
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	1e c0       	rjmp	.+60     	; 0x968 <SendSMS+0x206>
		/*case cswMarkDelay01:
			MarkDelay(&TPrevSendSMS, &swSMS, cswWaitDelay01);
		break;*/
		case cswWaitDelay01:
			//WaitDelayAndGoTo(TPrevSendSMS, 1000, &swSMS, cswDoneDelay01);
			WaitDelayAndGoTo(TPrevSendSMS, 1000, &swSMS, cswDoneDelay02);
     92c:	80 91 f8 07 	lds	r24, 0x07F8
     930:	90 91 f9 07 	lds	r25, 0x07F9
     934:	68 ee       	ldi	r22, 0xE8	; 232
     936:	73 e0       	ldi	r23, 0x03	; 3
     938:	4c ed       	ldi	r20, 0xDC	; 220
     93a:	57 e0       	ldi	r21, 0x07	; 7
     93c:	23 e2       	ldi	r18, 0x23	; 35
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	0e 94 1e 10 	call	0x203c	; 0x203c <WaitDelayAndGoTo>
     944:	65 c0       	rjmp	.+202    	; 0xa10 <SendSMS+0x2ae>
		break;
		case cswDoneDelay01:
			strncpy(cmdSendSMS, "\r\n", MAX_BUF-1);
     946:	8e 01       	movw	r16, r28
     948:	0f 5f       	subi	r16, 0xFF	; 255
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	c8 01       	movw	r24, r16
     94e:	66 e4       	ldi	r22, 0x46	; 70
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	45 e9       	ldi	r20, 0x95	; 149
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
			DoCommand(&TPrevSendSMS, cmdSendSMS, &swSMS, cswWaitDelay02);
     95a:	88 ef       	ldi	r24, 0xF8	; 248
     95c:	97 e0       	ldi	r25, 0x07	; 7
     95e:	b8 01       	movw	r22, r16
     960:	4c ed       	ldi	r20, 0xDC	; 220
     962:	57 e0       	ldi	r21, 0x07	; 7
     964:	22 e2       	ldi	r18, 0x22	; 34
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
     96c:	51 c0       	rjmp	.+162    	; 0xa10 <SendSMS+0x2ae>
		break;
		case cswWaitDelay02:
			WaitDelayAndGoTo(TPrevSendSMS, 3000, &swSMS, cswDoneDelay02);
     96e:	80 91 f8 07 	lds	r24, 0x07F8
     972:	90 91 f9 07 	lds	r25, 0x07F9
     976:	68 eb       	ldi	r22, 0xB8	; 184
     978:	7b e0       	ldi	r23, 0x0B	; 11
     97a:	de cf       	rjmp	.-68     	; 0x938 <SendSMS+0x1d6>
		break;
		case cswDoneDelay02:
			strncpy(cmdSendSMS, SMSToSendAlg.SMSText, MAX_BUF-1);
     97c:	8e 01       	movw	r16, r28
     97e:	0f 5f       	subi	r16, 0xFF	; 255
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	c8 01       	movw	r24, r16
     984:	62 e1       	ldi	r22, 0x12	; 18
     986:	78 e0       	ldi	r23, 0x08	; 8
     988:	45 e9       	ldi	r20, 0x95	; 149
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
			strncat(cmdSendSMS, "\x1A", MAX_BUF-1); // 26 = конец файла = ^Z
     990:	c8 01       	movw	r24, r16
     992:	69 e4       	ldi	r22, 0x49	; 73
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			DoCommand(&TPrevSendSMS, cmdSendSMS, &swSMS, csw020);
     99a:	88 ef       	ldi	r24, 0xF8	; 248
     99c:	97 e0       	ldi	r25, 0x07	; 7
     99e:	b8 01       	movw	r22, r16
     9a0:	4c ed       	ldi	r20, 0xDC	; 220
     9a2:	57 e0       	ldi	r21, 0x07	; 7
     9a4:	26 e2       	ldi	r18, 0x26	; 38
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	df cf       	rjmp	.-66     	; 0x968 <SendSMS+0x206>
		break;
		case csw020: // просто ждем "+CMGS:"
			WaitAnswer(TPrevSendSMS, "+CMGS:", 15000, &swSMS, csw030, csw030);
     9aa:	80 91 f8 07 	lds	r24, 0x07F8
     9ae:	90 91 f9 07 	lds	r25, 0x07F9
     9b2:	6b e4       	ldi	r22, 0x4B	; 75
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	48 e9       	ldi	r20, 0x98	; 152
     9b8:	5a e3       	ldi	r21, 0x3A	; 58
     9ba:	2c ed       	ldi	r18, 0xDC	; 220
     9bc:	37 e0       	ldi	r19, 0x07	; 7
     9be:	08 e2       	ldi	r16, 0x28	; 40
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	f8 e2       	ldi	r31, 0x28	; 40
     9c4:	ef 2e       	mov	r14, r31
     9c6:	f1 2c       	mov	r15, r1
     9c8:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
     9cc:	21 c0       	rjmp	.+66     	; 0xa10 <SendSMS+0x2ae>
		break;
		case csw030: // ждем "OK" и не важно от ответа (кроме 0) переходим к следующему номеру
			if (WaitAnswer(TPrevSendSMS, "OK", 5000, &swSMS, csw010, csw010)) {
     9ce:	80 91 f8 07 	lds	r24, 0x07F8
     9d2:	90 91 f9 07 	lds	r25, 0x07F9
     9d6:	62 e5       	ldi	r22, 0x52	; 82
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	48 e8       	ldi	r20, 0x88	; 136
     9dc:	53 e1       	ldi	r21, 0x13	; 19
     9de:	2c ed       	ldi	r18, 0xDC	; 220
     9e0:	37 e0       	ldi	r19, 0x07	; 7
     9e2:	05 e2       	ldi	r16, 0x25	; 37
     9e4:	10 e0       	ldi	r17, 0x00	; 0
     9e6:	e5 e2       	ldi	r30, 0x25	; 37
     9e8:	ee 2e       	mov	r14, r30
     9ea:	f1 2c       	mov	r15, r1
     9ec:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
     9f0:	88 23       	and	r24, r24
     9f2:	71 f0       	breq	.+28     	; 0xa10 <SendSMS+0x2ae>
				CellNumber++;
     9f4:	80 91 15 0d 	lds	r24, 0x0D15
     9f8:	90 91 16 0d 	lds	r25, 0x0D16
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	90 93 16 0d 	sts	0x0D16, r25
     a02:	80 93 15 0d 	sts	0x0D15, r24
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <SendSMS+0x2ae>
			}
		break;
		case cswEnd:
			swSMS = cswIdle;
     a08:	10 92 dd 07 	sts	0x07DD, r1
     a0c:	10 92 dc 07 	sts	0x07DC, r1
		break;
	}

	return 0;
}
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	ca 56       	subi	r28, 0x6A	; 106
     a14:	df 4f       	sbci	r29, 0xFF	; 255
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	08 95       	ret

00000a2e <Work>:
			flSirenaOtkaz = 0; // опять переходим на анализ отказов по датчикам
		}
	}
}

char Work(void) {
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
	
	AlgMakeTermSirena();
     a32:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <AlgMakeTermSirena>
	AlgTermSirena();
     a36:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <AlgTermSirena>
	
	OutTermToPC();
     a3a:	0e 94 2c 01 	call	0x258	; 0x258 <OutTermToPC>
	
	AlgCountRings();
     a3e:	0e 94 4f 02 	call	0x49e	; 0x49e <AlgCountRings>
	
	switch (swWork) {
     a42:	80 91 e6 07 	lds	r24, 0x07E6
     a46:	90 91 e7 07 	lds	r25, 0x07E7
     a4a:	82 31       	cpi	r24, 0x12	; 18
     a4c:	91 05       	cpc	r25, r1
     a4e:	09 f4       	brne	.+2      	; 0xa52 <Work+0x24>
     a50:	a9 c0       	rjmp	.+338    	; 0xba4 <Work+0x176>
     a52:	83 31       	cpi	r24, 0x13	; 19
     a54:	91 05       	cpc	r25, r1
     a56:	5c f4       	brge	.+22     	; 0xa6e <Work+0x40>
     a58:	80 31       	cpi	r24, 0x10	; 16
     a5a:	91 05       	cpc	r25, r1
     a5c:	99 f1       	breq	.+102    	; 0xac4 <Work+0x96>
     a5e:	81 31       	cpi	r24, 0x11	; 17
     a60:	91 05       	cpc	r25, r1
     a62:	0c f0       	brlt	.+2      	; 0xa66 <Work+0x38>
     a64:	80 c0       	rjmp	.+256    	; 0xb66 <Work+0x138>
     a66:	0f 97       	sbiw	r24, 0x0f	; 15
     a68:	09 f0       	breq	.+2      	; 0xa6c <Work+0x3e>
     a6a:	fa c1       	rjmp	.+1012   	; 0xe60 <Work+0x432>
     a6c:	10 c0       	rjmp	.+32     	; 0xa8e <Work+0x60>
     a6e:	84 31       	cpi	r24, 0x14	; 20
     a70:	91 05       	cpc	r25, r1
     a72:	09 f4       	brne	.+2      	; 0xa76 <Work+0x48>
     a74:	82 c1       	rjmp	.+772    	; 0xd7a <Work+0x34c>
     a76:	84 31       	cpi	r24, 0x14	; 20
     a78:	91 05       	cpc	r25, r1
     a7a:	0c f4       	brge	.+2      	; 0xa7e <Work+0x50>
     a7c:	34 c1       	rjmp	.+616    	; 0xce6 <Work+0x2b8>
     a7e:	85 31       	cpi	r24, 0x15	; 21
     a80:	91 05       	cpc	r25, r1
     a82:	09 f4       	brne	.+2      	; 0xa86 <Work+0x58>
     a84:	b0 c0       	rjmp	.+352    	; 0xbe6 <Work+0x1b8>
     a86:	46 97       	sbiw	r24, 0x16	; 22
     a88:	09 f0       	breq	.+2      	; 0xa8c <Work+0x5e>
     a8a:	ea c1       	rjmp	.+980    	; 0xe60 <Work+0x432>
     a8c:	01 c1       	rjmp	.+514    	; 0xc90 <Work+0x262>
// RABOTA
// в этом режиме:
// если поступил звонок - отбить его через 7 гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Охрана"
		case cswStartWork:
			CountRings = 0;
     a8e:	10 92 e4 07 	sts	0x07E4, r1
			//! запустить алгоритм "отправить смс" с текстом "Снято с охраны" по одному каждому абоненту
			SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	80 93 81 09 	sts	0x0981, r24
			SMSToSend.SMSZones = 0xFF; // разрешающая зона
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	80 93 82 09 	sts	0x0982, r24
			strcpy(SMSToSend.SMSText, "Snyato!  ");
     a9e:	8b ee       	ldi	r24, 0xEB	; 235
     aa0:	98 e0       	ldi	r25, 0x08	; 8
     aa2:	65 e5       	ldi	r22, 0x55	; 85
     aa4:	71 e0       	ldi	r23, 0x01	; 1
     aa6:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
			if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
				MakeTerm(tmpStr2);
     aaa:	81 e2       	ldi	r24, 0x21	; 33
     aac:	9d e0       	ldi	r25, 0x0D	; 13
     aae:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MakeTerm>
				strcat(SMSToSend.SMSText, tmpStr2);
     ab2:	8b ee       	ldi	r24, 0xEB	; 235
     ab4:	98 e0       	ldi	r25, 0x08	; 8
     ab6:	61 e2       	ldi	r22, 0x21	; 33
     ab8:	7d e0       	ldi	r23, 0x0D	; 13
     aba:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			}
			//swSMS = cswStart;
			swWork = cswWork;
     abe:	80 e1       	ldi	r24, 0x10	; 16
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	6b c0       	rjmp	.+214    	; 0xb9a <Work+0x16c>
		break;

		case cswWork:
			SetIndBits(0b00000000);
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
			if (flWasPrivUserCall != 0) {
     aca:	80 91 e5 07 	lds	r24, 0x07E5
     ace:	88 23       	and	r24, r24
     ad0:	09 f4       	brne	.+2      	; 0xad4 <Work+0xa6>
     ad2:	c6 c1       	rjmp	.+908    	; 0xe60 <Work+0x432>
				if (DIns == 0) {
     ad4:	90 91 11 0d 	lds	r25, 0x0D11
     ad8:	99 23       	and	r25, r25
     ada:	09 f4       	brne	.+2      	; 0xade <Work+0xb0>
     adc:	8a c0       	rjmp	.+276    	; 0xbf2 <Work+0x1c4>
					swWork = cswStartWarta;
				}
				else {
					SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	80 93 81 09 	sts	0x0981, r24
					SMSToSend.SMSZones = DIns;
     ae4:	90 93 82 09 	sts	0x0982, r25
					strcpy(SMSToSend.SMSText, "Narushen kontur");
     ae8:	8b ee       	ldi	r24, 0xEB	; 235
     aea:	98 e0       	ldi	r25, 0x08	; 8
     aec:	6f e5       	ldi	r22, 0x5F	; 95
     aee:	71 e0       	ldi	r23, 0x01	; 1
     af0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
					if (DIns&0b00010000) strcat(SMSToSend.SMSText, " 1");
     af4:	80 91 11 0d 	lds	r24, 0x0D11
     af8:	84 ff       	sbrs	r24, 4
     afa:	06 c0       	rjmp	.+12     	; 0xb08 <Work+0xda>
     afc:	8b ee       	ldi	r24, 0xEB	; 235
     afe:	98 e0       	ldi	r25, 0x08	; 8
     b00:	6f e6       	ldi	r22, 0x6F	; 111
     b02:	71 e0       	ldi	r23, 0x01	; 1
     b04:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
					if (DIns&0b00100000) strcat(SMSToSend.SMSText, " 2");
     b08:	80 91 11 0d 	lds	r24, 0x0D11
     b0c:	85 ff       	sbrs	r24, 5
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <Work+0xee>
     b10:	8b ee       	ldi	r24, 0xEB	; 235
     b12:	98 e0       	ldi	r25, 0x08	; 8
     b14:	62 e7       	ldi	r22, 0x72	; 114
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
					if (DIns&0b01000000) strcat(SMSToSend.SMSText, " 3");
     b1c:	80 91 11 0d 	lds	r24, 0x0D11
     b20:	86 ff       	sbrs	r24, 6
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <Work+0x102>
     b24:	8b ee       	ldi	r24, 0xEB	; 235
     b26:	98 e0       	ldi	r25, 0x08	; 8
     b28:	65 e7       	ldi	r22, 0x75	; 117
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
					if (DIns&0b10000000) strcat(SMSToSend.SMSText, " 4");
     b30:	80 91 11 0d 	lds	r24, 0x0D11
     b34:	87 ff       	sbrs	r24, 7
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <Work+0x116>
     b38:	8b ee       	ldi	r24, 0xEB	; 235
     b3a:	98 e0       	ldi	r25, 0x08	; 8
     b3c:	68 e7       	ldi	r22, 0x78	; 120
     b3e:	71 e0       	ldi	r23, 0x01	; 1
     b40:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
					strcat(SMSToSend.SMSText, " ");
     b44:	8b ee       	ldi	r24, 0xEB	; 235
     b46:	98 e0       	ldi	r25, 0x08	; 8
     b48:	6b e7       	ldi	r22, 0x7B	; 123
     b4a:	71 e0       	ldi	r23, 0x01	; 1
     b4c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
					if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
						MakeTerm(tmpStr2);
     b50:	81 e2       	ldi	r24, 0x21	; 33
     b52:	9d e0       	ldi	r25, 0x0D	; 13
     b54:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MakeTerm>
						strcat(SMSToSend.SMSText, tmpStr2);
     b58:	8b ee       	ldi	r24, 0xEB	; 235
     b5a:	98 e0       	ldi	r25, 0x08	; 8
     b5c:	61 e2       	ldi	r22, 0x21	; 33
     b5e:	7d e0       	ldi	r23, 0x0D	; 13
     b60:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
     b64:	7d c1       	rjmp	.+762    	; 0xe60 <Work+0x432>
// в этом режиме:
// если поступил звонок - отбить его через 3 гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Снято"
// если сработка входа - переход в режим "Аларм"
		case cswStartWarta:
			CountRings = 0;
     b66:	10 92 e4 07 	sts	0x07E4, r1
			//! запустить алгоритм "отправить смс" с текстом "стал на охрану" по одному каждому абоненту
			SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	80 93 81 09 	sts	0x0981, r24
			SMSToSend.SMSZones = 0xFF; // разрешающая зона
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	80 93 82 09 	sts	0x0982, r24
			strcpy(SMSToSend.SMSText, "Ohrana!  ");
     b76:	8b ee       	ldi	r24, 0xEB	; 235
     b78:	98 e0       	ldi	r25, 0x08	; 8
     b7a:	6d e7       	ldi	r22, 0x7D	; 125
     b7c:	71 e0       	ldi	r23, 0x01	; 1
     b7e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
			if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
				MakeTerm(tmpStr2);
     b82:	81 e2       	ldi	r24, 0x21	; 33
     b84:	9d e0       	ldi	r25, 0x0D	; 13
     b86:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MakeTerm>
				strcat(SMSToSend.SMSText, tmpStr2);
     b8a:	8b ee       	ldi	r24, 0xEB	; 235
     b8c:	98 e0       	ldi	r25, 0x08	; 8
     b8e:	61 e2       	ldi	r22, 0x21	; 33
     b90:	7d e0       	ldi	r23, 0x0D	; 13
     b92:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			}
			//swSMS = cswStart;
			swWork = cswWarta;
     b96:	82 e1       	ldi	r24, 0x12	; 18
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	90 93 e7 07 	sts	0x07E7, r25
     b9e:	80 93 e6 07 	sts	0x07E6, r24
     ba2:	5e c1       	rjmp	.+700    	; 0xe60 <Work+0x432>
		break;
		case cswWarta:
			SetIndBits(0b00000010);
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
			if (flWasPrivUserCall != 0) {
     baa:	80 91 e5 07 	lds	r24, 0x07E5
     bae:	88 23       	and	r24, r24
     bb0:	31 f0       	breq	.+12     	; 0xbbe <Work+0x190>
				swWork = cswStartWork;
     bb2:	8f e0       	ldi	r24, 0x0F	; 15
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	90 93 e7 07 	sts	0x07E7, r25
     bba:	80 93 e6 07 	sts	0x07E6, r24
			}
			if (DIns > 0) { // сработка входа
     bbe:	80 91 11 0d 	lds	r24, 0x0D11
     bc2:	88 23       	and	r24, r24
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <Work+0x19a>
     bc6:	4c c1       	rjmp	.+664    	; 0xe60 <Work+0x432>
				swWork = cswStartAlarm;
     bc8:	83 e1       	ldi	r24, 0x13	; 19
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 e7 07 	sts	0x07E7, r25
     bd0:	80 93 e6 07 	sts	0x07E6, r24
				swAlarm = cswStart;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	90 93 e9 07 	sts	0x07E9, r25
     bdc:	80 93 e8 07 	sts	0x07E8, r24
				CountRings=0;
     be0:	10 92 e4 07 	sts	0x07E4, r1
     be4:	3d c1       	rjmp	.+634    	; 0xe60 <Work+0x432>
// KONTUR
// в этом режиме:
// если поступил звонок - отбить его через n гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Снято" + снять сирену
		case cswStartKontur:
			CountRings = 0;
     be6:	10 92 e4 07 	sts	0x07E4, r1
			if (DIns == 0) {
     bea:	90 91 11 0d 	lds	r25, 0x0D11
     bee:	99 23       	and	r25, r25
     bf0:	19 f4       	brne	.+6      	; 0xbf8 <Work+0x1ca>
				swWork = cswStartWarta; // опять стать под охрану!
     bf2:	81 e1       	ldi	r24, 0x11	; 17
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	d1 cf       	rjmp	.-94     	; 0xb9a <Work+0x16c>
			} 
			else {
				//! запустить алгоритм "отправить смс" с текстом "Нарушен контур" каждому абоненту
				SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS;
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	80 93 81 09 	sts	0x0981, r24
				SMSToSend.SMSZones = DIns;
     bfe:	90 93 82 09 	sts	0x0982, r25
				strcpy(SMSToSend.SMSText, "ALARM Narushen kontur ");
     c02:	8b ee       	ldi	r24, 0xEB	; 235
     c04:	98 e0       	ldi	r25, 0x08	; 8
     c06:	67 e8       	ldi	r22, 0x87	; 135
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
				if (DIns&0b00010000) strcat(SMSToSend.SMSText, " 1");
     c0e:	80 91 11 0d 	lds	r24, 0x0D11
     c12:	84 ff       	sbrs	r24, 4
     c14:	06 c0       	rjmp	.+12     	; 0xc22 <Work+0x1f4>
     c16:	8b ee       	ldi	r24, 0xEB	; 235
     c18:	98 e0       	ldi	r25, 0x08	; 8
     c1a:	6f e6       	ldi	r22, 0x6F	; 111
     c1c:	71 e0       	ldi	r23, 0x01	; 1
     c1e:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
				if (DIns&0b00100000) strcat(SMSToSend.SMSText, " 2");
     c22:	80 91 11 0d 	lds	r24, 0x0D11
     c26:	85 ff       	sbrs	r24, 5
     c28:	06 c0       	rjmp	.+12     	; 0xc36 <Work+0x208>
     c2a:	8b ee       	ldi	r24, 0xEB	; 235
     c2c:	98 e0       	ldi	r25, 0x08	; 8
     c2e:	62 e7       	ldi	r22, 0x72	; 114
     c30:	71 e0       	ldi	r23, 0x01	; 1
     c32:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
				if (DIns&0b01000000) strcat(SMSToSend.SMSText, " 3");
     c36:	80 91 11 0d 	lds	r24, 0x0D11
     c3a:	86 ff       	sbrs	r24, 6
     c3c:	06 c0       	rjmp	.+12     	; 0xc4a <Work+0x21c>
     c3e:	8b ee       	ldi	r24, 0xEB	; 235
     c40:	98 e0       	ldi	r25, 0x08	; 8
     c42:	65 e7       	ldi	r22, 0x75	; 117
     c44:	71 e0       	ldi	r23, 0x01	; 1
     c46:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
				if (DIns&0b10000000) strcat(SMSToSend.SMSText, " 4");
     c4a:	80 91 11 0d 	lds	r24, 0x0D11
     c4e:	87 ff       	sbrs	r24, 7
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <Work+0x230>
     c52:	8b ee       	ldi	r24, 0xEB	; 235
     c54:	98 e0       	ldi	r25, 0x08	; 8
     c56:	68 e7       	ldi	r22, 0x78	; 120
     c58:	71 e0       	ldi	r23, 0x01	; 1
     c5a:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
				strcat(SMSToSend.SMSText, " ");
     c5e:	8b ee       	ldi	r24, 0xEB	; 235
     c60:	98 e0       	ldi	r25, 0x08	; 8
     c62:	6b e7       	ldi	r22, 0x7B	; 123
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
				TPrevKontur = GetTime();
     c6a:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     c6e:	90 93 b5 08 	sts	0x08B5, r25
     c72:	80 93 b4 08 	sts	0x08B4, r24
				if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
					MakeTerm(tmpStr2);
     c76:	81 e2       	ldi	r24, 0x21	; 33
     c78:	9d e0       	ldi	r25, 0x0D	; 13
     c7a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MakeTerm>
					strcat(SMSToSend.SMSText, tmpStr2);
     c7e:	8b ee       	ldi	r24, 0xEB	; 235
     c80:	98 e0       	ldi	r25, 0x08	; 8
     c82:	61 e2       	ldi	r22, 0x21	; 33
     c84:	7d e0       	ldi	r23, 0x0D	; 13
     c86:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
				}
				//swSMS = cswStart;
				swWork = cswKontur;
     c8a:	86 e1       	ldi	r24, 0x16	; 22
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	85 cf       	rjmp	.-246    	; 0xb9a <Work+0x16c>
			}
		break;
		case cswKontur:
			// будем проверять контур не чаще чем 20 сек, чаще нет смысла
			if ((GetTime() - TPrevKontur) >= Ticks(20000)) { 
     c90:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     c94:	20 91 b4 08 	lds	r18, 0x08B4
     c98:	30 91 b5 08 	lds	r19, 0x08B5
     c9c:	8c 01       	movw	r16, r24
     c9e:	02 1b       	sub	r16, r18
     ca0:	13 0b       	sbc	r17, r19
     ca2:	60 e2       	ldi	r22, 0x20	; 32
     ca4:	7e e4       	ldi	r23, 0x4E	; 78
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
     cae:	08 17       	cp	r16, r24
     cb0:	19 07       	cpc	r17, r25
     cb2:	88 f0       	brcs	.+34     	; 0xcd6 <Work+0x2a8>
				if (DIns == 0) {
     cb4:	80 91 11 0d 	lds	r24, 0x0D11
     cb8:	88 23       	and	r24, r24
     cba:	31 f4       	brne	.+12     	; 0xcc8 <Work+0x29a>
					swWork = cswStartWarta; // опять стать под охрану!
     cbc:	81 e1       	ldi	r24, 0x11	; 17
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	90 93 e7 07 	sts	0x07E7, r25
     cc4:	80 93 e6 07 	sts	0x07E6, r24
				}
				TPrevKontur = GetTime();
     cc8:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     ccc:	90 93 b5 08 	sts	0x08B5, r25
     cd0:	80 93 b4 08 	sts	0x08B4, r24
     cd4:	c5 c0       	rjmp	.+394    	; 0xe60 <Work+0x432>
				break;
			}
			if (flWasPrivUserCall != 0) {
     cd6:	80 91 e5 07 	lds	r24, 0x07E5
     cda:	88 23       	and	r24, r24
     cdc:	09 f4       	brne	.+2      	; 0xce0 <Work+0x2b2>
     cde:	c0 c0       	rjmp	.+384    	; 0xe60 <Work+0x432>
				swWork = cswStartWork; // 
     ce0:	8f e0       	ldi	r24, 0x0F	; 15
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	b5 c0       	rjmp	.+362    	; 0xe50 <Work+0x422>
// включить сирену
// если поступил звонок - отбить его через 1 гудков
// если поступило СМС с любым текстом от разрешенных номеров - сменить режим на "Снято" + снять сирену
// прошло 3 минуты (время может конфигурироваться) - переход в режим "Охрана" + снять сирену
		case cswStartAlarm:
			CountRings = 0;
     ce6:	10 92 e4 07 	sts	0x07E4, r1
			//! запустить алгоритм "отправить смс" с текстом "Сирена" по одному каждому абоненту
			SMSToSend.SMSPriv = cPrivilegeFull|cPrivilegeAllSMS|cPrivilegeAlarmSMS;
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	80 93 81 09 	sts	0x0981, r24
			SMSToSend.SMSZones = DIns;
     cf0:	80 91 11 0d 	lds	r24, 0x0D11
     cf4:	80 93 82 09 	sts	0x0982, r24
			strcpy(SMSToSend.SMSText, "ALARM! ");
     cf8:	8b ee       	ldi	r24, 0xEB	; 235
     cfa:	98 e0       	ldi	r25, 0x08	; 8
     cfc:	6e e9       	ldi	r22, 0x9E	; 158
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
			if (DIns&0b00010000) strcat(SMSToSend.SMSText, " 1");
     d04:	80 91 11 0d 	lds	r24, 0x0D11
     d08:	84 ff       	sbrs	r24, 4
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <Work+0x2ea>
     d0c:	8b ee       	ldi	r24, 0xEB	; 235
     d0e:	98 e0       	ldi	r25, 0x08	; 8
     d10:	6f e6       	ldi	r22, 0x6F	; 111
     d12:	71 e0       	ldi	r23, 0x01	; 1
     d14:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			if (DIns&0b00100000) strcat(SMSToSend.SMSText, " 2");
     d18:	80 91 11 0d 	lds	r24, 0x0D11
     d1c:	85 ff       	sbrs	r24, 5
     d1e:	06 c0       	rjmp	.+12     	; 0xd2c <Work+0x2fe>
     d20:	8b ee       	ldi	r24, 0xEB	; 235
     d22:	98 e0       	ldi	r25, 0x08	; 8
     d24:	62 e7       	ldi	r22, 0x72	; 114
     d26:	71 e0       	ldi	r23, 0x01	; 1
     d28:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			if (DIns&0b01000000) strcat(SMSToSend.SMSText, " 3");
     d2c:	80 91 11 0d 	lds	r24, 0x0D11
     d30:	86 ff       	sbrs	r24, 6
     d32:	06 c0       	rjmp	.+12     	; 0xd40 <Work+0x312>
     d34:	8b ee       	ldi	r24, 0xEB	; 235
     d36:	98 e0       	ldi	r25, 0x08	; 8
     d38:	65 e7       	ldi	r22, 0x75	; 117
     d3a:	71 e0       	ldi	r23, 0x01	; 1
     d3c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			if (DIns&0b10000000) strcat(SMSToSend.SMSText, " 4");
     d40:	80 91 11 0d 	lds	r24, 0x0D11
     d44:	87 ff       	sbrs	r24, 7
     d46:	06 c0       	rjmp	.+12     	; 0xd54 <Work+0x326>
     d48:	8b ee       	ldi	r24, 0xEB	; 235
     d4a:	98 e0       	ldi	r25, 0x08	; 8
     d4c:	68 e7       	ldi	r22, 0x78	; 120
     d4e:	71 e0       	ldi	r23, 0x01	; 1
     d50:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			strcat(SMSToSend.SMSText, " ");
     d54:	8b ee       	ldi	r24, 0xEB	; 235
     d56:	98 e0       	ldi	r25, 0x08	; 8
     d58:	6b e7       	ldi	r22, 0x7B	; 123
     d5a:	71 e0       	ldi	r23, 0x01	; 1
     d5c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			if (1) { // если в настройках стоит "обрабатывать температуру", то к каждой смс добавляем состояние датчиков
				MakeTerm(tmpStr2);
     d60:	81 e2       	ldi	r24, 0x21	; 33
     d62:	9d e0       	ldi	r25, 0x0D	; 13
     d64:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MakeTerm>
				strcat(SMSToSend.SMSText, tmpStr2);
     d68:	8b ee       	ldi	r24, 0xEB	; 235
     d6a:	98 e0       	ldi	r25, 0x08	; 8
     d6c:	61 e2       	ldi	r22, 0x21	; 33
     d6e:	7d e0       	ldi	r23, 0x0D	; 13
     d70:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			}
			//swSMS = cswStart;
			//swCall = cswStart; //! дозвон по разрешенным номерам
			swWork = cswAlarm;
     d74:	84 e1       	ldi	r24, 0x14	; 20
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	10 cf       	rjmp	.-480    	; 0xb9a <Work+0x16c>
		break;
		case cswAlarm:
			SetIndBits(0b00000011);
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
			if (flWasPrivUserCall != 0) {
     d80:	80 91 e5 07 	lds	r24, 0x07E5
     d84:	88 23       	and	r24, r24
     d86:	99 f0       	breq	.+38     	; 0xdae <Work+0x380>
	DOuts = DOuts & 0b11101111; 
}
//------------------------------------------------------------------------------------
// выключить сирену
void SirenaOff(void) {
	DOuts = DOuts | 0b00010000; 
     d88:	80 91 69 02 	lds	r24, 0x0269
     d8c:	80 61       	ori	r24, 0x10	; 16
     d8e:	80 93 69 02 	sts	0x0269, r24
		break;
		case cswAlarm:
			SetIndBits(0b00000011);
			if (flWasPrivUserCall != 0) {
				SirenaOff();
				swAlarm = cswIdle; //
     d92:	10 92 e9 07 	sts	0x07E9, r1
     d96:	10 92 e8 07 	sts	0x07E8, r1
				swWork = cswStartKontur; // ждем собранного контура, чтоб стать под охрану
     d9a:	85 e1       	ldi	r24, 0x15	; 21
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	90 93 e7 07 	sts	0x07E7, r25
     da2:	80 93 e6 07 	sts	0x07E6, r24
				swCall = cswIdle;
     da6:	10 92 eb 07 	sts	0x07EB, r1
     daa:	10 92 ea 07 	sts	0x07EA, r1
			}
			
			// СИРЕНА. отключается: или по времени или при звонке от разрешенного абонента
			switch (swAlarm) {
     dae:	80 91 e8 07 	lds	r24, 0x07E8
     db2:	90 91 e9 07 	lds	r25, 0x07E9
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	91 05       	cpc	r25, r1
     dba:	21 f0       	breq	.+8      	; 0xdc4 <Work+0x396>
     dbc:	85 97       	sbiw	r24, 0x25	; 37
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <Work+0x394>
     dc0:	4f c0       	rjmp	.+158    	; 0xe60 <Work+0x432>
     dc2:	12 c0       	rjmp	.+36     	; 0xde8 <Work+0x3ba>
				case cswIdle:
				break;
		
				case cswStart:
					TPrevWorkAlarm = GetTime();
     dc4:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     dc8:	90 93 b1 08 	sts	0x08B1, r25
     dcc:	80 93 b0 08 	sts	0x08B0, r24
}

//------------------------------------------------------------------------------------
// включить сирену
void SirenaOn(void) {
	DOuts = DOuts & 0b11101111; 
     dd0:	80 91 69 02 	lds	r24, 0x0269
     dd4:	8f 7e       	andi	r24, 0xEF	; 239
     dd6:	80 93 69 02 	sts	0x0269, r24
				break;
		
				case cswStart:
					TPrevWorkAlarm = GetTime();
					SirenaOn();
					swAlarm = csw010;
     dda:	85 e2       	ldi	r24, 0x25	; 37
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	90 93 e9 07 	sts	0x07E9, r25
     de2:	80 93 e8 07 	sts	0x07E8, r24
     de6:	3c c0       	rjmp	.+120    	; 0xe60 <Work+0x432>
				break;

				case csw010:
					AlarmTime_ms = Settings.AlarmTime_s;
					AlarmTime_ms = AlarmTime_ms * 1000;
     de8:	60 91 e8 08 	lds	r22, 0x08E8
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	28 ee       	ldi	r18, 0xE8	; 232
     df4:	33 e0       	ldi	r19, 0x03	; 3
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <__mulsi3>
     dfe:	60 93 b8 08 	sts	0x08B8, r22
     e02:	70 93 b9 08 	sts	0x08B9, r23
     e06:	80 93 ba 08 	sts	0x08BA, r24
     e0a:	90 93 bb 08 	sts	0x08BB, r25
					if ((GetTime() - TPrevWorkAlarm) >= Ticks(AlarmTime_ms)) { // 60 sec
     e0e:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
     e12:	20 91 b0 08 	lds	r18, 0x08B0
     e16:	30 91 b1 08 	lds	r19, 0x08B1
     e1a:	8c 01       	movw	r16, r24
     e1c:	02 1b       	sub	r16, r18
     e1e:	13 0b       	sbc	r17, r19
     e20:	60 91 b8 08 	lds	r22, 0x08B8
     e24:	70 91 b9 08 	lds	r23, 0x08B9
     e28:	80 91 ba 08 	lds	r24, 0x08BA
     e2c:	90 91 bb 08 	lds	r25, 0x08BB
     e30:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
     e34:	08 17       	cp	r16, r24
     e36:	19 07       	cpc	r17, r25
     e38:	98 f0       	brcs	.+38     	; 0xe60 <Work+0x432>
	DOuts = DOuts & 0b11101111; 
}
//------------------------------------------------------------------------------------
// выключить сирену
void SirenaOff(void) {
	DOuts = DOuts | 0b00010000; 
     e3a:	80 91 69 02 	lds	r24, 0x0269
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	80 93 69 02 	sts	0x0269, r24
				case csw010:
					AlarmTime_ms = Settings.AlarmTime_s;
					AlarmTime_ms = AlarmTime_ms * 1000;
					if ((GetTime() - TPrevWorkAlarm) >= Ticks(AlarmTime_ms)) { // 60 sec
						SirenaOff();
						swAlarm = cswIdle; //
     e44:	10 92 e9 07 	sts	0x07E9, r1
     e48:	10 92 e8 07 	sts	0x07E8, r1
						swWork = cswStartKontur; // ждем собранного контура, чтоб стать под охрану
     e4c:	85 e1       	ldi	r24, 0x15	; 21
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	90 93 e7 07 	sts	0x07E7, r25
     e54:	80 93 e6 07 	sts	0x07E6, r24
						swCall = cswIdle;
     e58:	10 92 eb 07 	sts	0x07EB, r1
     e5c:	10 92 ea 07 	sts	0x07EA, r1
				break;
			}
			// END СИРЕНА. отключается: или по времени или при звонке от разрешенного абонента
		break;
	}
	SendSMS();
     e60:	0e 94 b1 03 	call	0x762	; 0x762 <SendSMS>

	if (DIns) SrabotkaOn();
     e64:	80 91 11 0d 	lds	r24, 0x0D11
     e68:	90 91 69 02 	lds	r25, 0x0269
     e6c:	88 23       	and	r24, r24
     e6e:	11 f0       	breq	.+4      	; 0xe74 <Work+0x446>
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// включить выход, являющийся сборным для всех входов
void SrabotkaOn(void) {
	DOuts = DOuts & 0b11011111; 
     e70:	9f 7d       	andi	r25, 0xDF	; 223
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <Work+0x448>
}
//------------------------------------------------------------------------------------
// выключить выход, являющийся сборным для всех входов
void SrabotkaOff(void) {
	DOuts = DOuts | 0b00100000; 
     e74:	90 62       	ori	r25, 0x20	; 32
     e76:	90 93 69 02 	sts	0x0269, r25
	SendSMS();

	if (DIns) SrabotkaOn();
	else SrabotkaOff();
	
	flWasPrivUserCall = 0;
     e7a:	10 92 e5 07 	sts	0x07E5, r1

	return 0;
}
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <TryBilling>:
}
//------------------------------------------------------------------------------------

int swTryBilling = cswIdle;
TTime TTryBilling;
char TryBilling(void) {
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	c6 59       	subi	r28, 0x96	; 150
     e98:	d0 40       	sbci	r29, 0x00	; 0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
	char RetWaitAnswer;
	char RetVal = 1; // еще работает - нет определенного результата
	char cmdSendSMS[MAX_BUF];
	switch (swTryBilling) {
     ea4:	80 91 da 07 	lds	r24, 0x07DA
     ea8:	90 91 db 07 	lds	r25, 0x07DB
     eac:	8a 31       	cpi	r24, 0x1A	; 26
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <TryBilling+0x2e>
     eb2:	5e c0       	rjmp	.+188    	; 0xf70 <TryBilling+0xea>
     eb4:	8b 31       	cpi	r24, 0x1B	; 27
     eb6:	91 05       	cpc	r25, r1
     eb8:	34 f4       	brge	.+12     	; 0xec6 <TryBilling+0x40>
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	81 f0       	breq	.+32     	; 0xee0 <TryBilling+0x5a>
     ec0:	49 97       	sbiw	r24, 0x19	; 25
     ec2:	c1 f4       	brne	.+48     	; 0xef4 <TryBilling+0x6e>
     ec4:	0b c0       	rjmp	.+22     	; 0xedc <TryBilling+0x56>
     ec6:	86 32       	cpi	r24, 0x26	; 38
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <TryBilling+0x48>
     ecc:	47 c0       	rjmp	.+142    	; 0xf5c <TryBilling+0xd6>
     ece:	83 33       	cpi	r24, 0x33	; 51
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <TryBilling+0x50>
     ed4:	4f c0       	rjmp	.+158    	; 0xf74 <TryBilling+0xee>
     ed6:	85 97       	sbiw	r24, 0x25	; 37
     ed8:	69 f4       	brne	.+26     	; 0xef4 <TryBilling+0x6e>
     eda:	2e c0       	rjmp	.+92     	; 0xf38 <TryBilling+0xb2>
     edc:	8a e0       	ldi	r24, 0x0A	; 10
     ede:	4b c0       	rjmp	.+150    	; 0xf76 <TryBilling+0xf0>
		case cswIdle:
		break;
		
		case cswStart:
			if (PhoneNumber[cProverkaScheta-cSettings].IsActive == 0) {
     ee0:	80 91 af 0a 	lds	r24, 0x0AAF
     ee4:	88 23       	and	r24, r24
     ee6:	41 f4       	brne	.+16     	; 0xef8 <TryBilling+0x72>
				swTryBilling = cswOK;
     ee8:	83 e3       	ldi	r24, 0x33	; 51
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	90 93 db 07 	sts	0x07DB, r25
     ef0:	80 93 da 07 	sts	0x07DA, r24
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	3f c0       	rjmp	.+126    	; 0xf76 <TryBilling+0xf0>
				break;
			}
			strncpy(cmdSendSMS, "at+cusd=1,\"", MAX_BUF-1);
     ef8:	8e 01       	movw	r16, r28
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	c8 01       	movw	r24, r16
     f00:	66 ea       	ldi	r22, 0xA6	; 166
     f02:	71 e0       	ldi	r23, 0x01	; 1
     f04:	45 e9       	ldi	r20, 0x95	; 149
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
			strncat(cmdSendSMS, PhoneNumber[cProverkaScheta-cSettings].Number, MAX_BUF-1);
     f0c:	c8 01       	movw	r24, r16
     f0e:	6c e8       	ldi	r22, 0x8C	; 140
     f10:	7a e0       	ldi	r23, 0x0A	; 10
     f12:	45 e9       	ldi	r20, 0x95	; 149
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
			strncat(cmdSendSMS, "\",15\r\n", MAX_BUF-1);
     f1a:	c8 01       	movw	r24, r16
     f1c:	62 eb       	ldi	r22, 0xB2	; 178
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			DoCommand(&TTryBilling, cmdSendSMS, &swTryBilling, csw010);
     f24:	82 eb       	ldi	r24, 0xB2	; 178
     f26:	98 e0       	ldi	r25, 0x08	; 8
     f28:	b8 01       	movw	r22, r16
     f2a:	4a ed       	ldi	r20, 0xDA	; 218
     f2c:	57 e0       	ldi	r21, 0x07	; 7
     f2e:	25 e2       	ldi	r18, 0x25	; 37
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
     f36:	de cf       	rjmp	.-68     	; 0xef4 <TryBilling+0x6e>
		break;
		
		case csw010:
			RetWaitAnswer = WaitAnswer(TTryBilling, "+CUSD: ", 10000, &swTryBilling, csw020, cswCantConnectBill);
     f38:	80 91 b2 08 	lds	r24, 0x08B2
     f3c:	90 91 b3 08 	lds	r25, 0x08B3
     f40:	69 eb       	ldi	r22, 0xB9	; 185
     f42:	71 e0       	ldi	r23, 0x01	; 1
     f44:	40 e1       	ldi	r20, 0x10	; 16
     f46:	57 e2       	ldi	r21, 0x27	; 39
     f48:	2a ed       	ldi	r18, 0xDA	; 218
     f4a:	37 e0       	ldi	r19, 0x07	; 7
     f4c:	06 e2       	ldi	r16, 0x26	; 38
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	e9 e1       	ldi	r30, 0x19	; 25
     f52:	ee 2e       	mov	r14, r30
     f54:	f1 2c       	mov	r15, r1
     f56:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
     f5a:	cc cf       	rjmp	.-104    	; 0xef4 <TryBilling+0x6e>
		break;
		
		case csw020: // разбор остатка
			//Ostatok = GetNumberFromBillString(FromModemBuf);
			if (Ostatok < MinBill) swTryBilling = cswLittleMoney;
     f5c:	80 91 f4 07 	lds	r24, 0x07F4
     f60:	90 91 f5 07 	lds	r25, 0x07F5
     f64:	04 97       	sbiw	r24, 0x04	; 4
     f66:	0c f0       	brlt	.+2      	; 0xf6a <TryBilling+0xe4>
     f68:	bf cf       	rjmp	.-130    	; 0xee8 <TryBilling+0x62>
     f6a:	8a e1       	ldi	r24, 0x1A	; 26
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	be cf       	rjmp	.-132    	; 0xeec <TryBilling+0x66>
			else swTryBilling = cswOK;
     f70:	8b e0       	ldi	r24, 0x0B	; 11
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <TryBilling+0xf0>
			RetVal = 10;
		break;
		
		case cswLittleMoney: // остаток на счете меньше дозволенной границы
			RetVal = 11;
		break;
     f74:	80 e0       	ldi	r24, 0x00	; 0
			RetVal = 0;
		break;
		
	}
	return RetVal;
}
     f76:	ca 56       	subi	r28, 0x6A	; 106
     f78:	df 4f       	sbci	r29, 0xFF	; 255
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <GetNumberFromBillString>:
	DOuts = DOuts | 0b00100000; 
}
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
int GetNumberFromBillString(char *BillStr, char *StrNumber) {
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	1f 93       	push	r17
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	c6 59       	subi	r28, 0x96	; 150
     fa2:	d0 40       	sbci	r29, 0x00	; 0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
	char tmpCh[MAX_BUF];
	int CifraIndex = 0;
	char flWasCifra = 0;
	
	BillStr = strstr(BillStr, "\"");
     fae:	62 e2       	ldi	r22, 0x22	; 34
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <strchr>
     fb6:	9c 01       	movw	r18, r24
	if (BillStr == NULL) return 0;
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	e9 f1       	breq	.+122    	; 0x1036 <GetNumberFromBillString+0xa4>
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
			tmpCh[1] = 0;
			break;
		}
		
		if ((BillStr[i] >= '0') && (BillStr[i] <= '9')) { // это цифра
			tmpCh[CifraIndex] = BillStr[i];
     fc6:	7e 01       	movw	r14, r28
     fc8:	08 94       	sec
     fca:	e1 1c       	adc	r14, r1
     fcc:	f1 1c       	adc	r15, r1
     fce:	21 c0       	rjmp	.+66     	; 0x1012 <GetNumberFromBillString+0x80>
	
	BillStr = strstr(BillStr, "\"");
	if (BillStr == NULL) return 0;
	
	for (int i=0; i<strlen(BillStr); ++i) {
		if (i >= MAX_BUF-5) {
     fd0:	41 39       	cpi	r20, 0x91	; 145
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f4       	brne	.+8      	; 0xfde <GetNumberFromBillString+0x4c>
			tmpCh[0] = '0';
     fd6:	80 e3       	ldi	r24, 0x30	; 48
     fd8:	89 83       	std	Y+1, r24	; 0x01
			tmpCh[1] = 0;
     fda:	1a 82       	std	Y+2, r1	; 0x02
     fdc:	24 c0       	rjmp	.+72     	; 0x1026 <GetNumberFromBillString+0x94>
			break;
		}
		
		if ((BillStr[i] >= '0') && (BillStr[i] <= '9')) { // это цифра
     fde:	f9 01       	movw	r30, r18
     fe0:	e4 0f       	add	r30, r20
     fe2:	f5 1f       	adc	r31, r21
     fe4:	90 81       	ld	r25, Z
     fe6:	89 2f       	mov	r24, r25
     fe8:	80 53       	subi	r24, 0x30	; 48
     fea:	8a 30       	cpi	r24, 0x0A	; 10
     fec:	40 f4       	brcc	.+16     	; 0xffe <GetNumberFromBillString+0x6c>
			tmpCh[CifraIndex] = BillStr[i];
     fee:	f7 01       	movw	r30, r14
     ff0:	e6 0f       	add	r30, r22
     ff2:	f7 1f       	adc	r31, r23
     ff4:	90 83       	st	Z, r25
			++CifraIndex;
     ff6:	6f 5f       	subi	r22, 0xFF	; 255
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	11 e0       	ldi	r17, 0x01	; 1
     ffc:	08 c0       	rjmp	.+16     	; 0x100e <GetNumberFromBillString+0x7c>
			flWasCifra = 1;
		}
		else { // какой-то левый символ - нам не нужен
			if (flWasCifra == 1) { // дочитали число до конца
     ffe:	11 30       	cpi	r17, 0x01	; 1
    1000:	29 f4       	brne	.+10     	; 0x100c <GetNumberFromBillString+0x7a>
				tmpCh[CifraIndex] = 0;
    1002:	6c 0f       	add	r22, r28
    1004:	7d 1f       	adc	r23, r29
    1006:	fb 01       	movw	r30, r22
    1008:	11 82       	std	Z+1, r1	; 0x01
    100a:	0f c0       	rjmp	.+30     	; 0x102a <GetNumberFromBillString+0x98>
    100c:	10 e0       	ldi	r17, 0x00	; 0
	char flWasCifra = 0;
	
	BillStr = strstr(BillStr, "\"");
	if (BillStr == NULL) return 0;
	
	for (int i=0; i<strlen(BillStr); ++i) {
    100e:	4f 5f       	subi	r20, 0xFF	; 255
    1010:	5f 4f       	sbci	r21, 0xFF	; 255
    1012:	f9 01       	movw	r30, r18
    1014:	01 90       	ld	r0, Z+
    1016:	00 20       	and	r0, r0
    1018:	e9 f7       	brne	.-6      	; 0x1014 <GetNumberFromBillString+0x82>
    101a:	31 97       	sbiw	r30, 0x01	; 1
    101c:	e2 1b       	sub	r30, r18
    101e:	f3 0b       	sbc	r31, r19
    1020:	4e 17       	cp	r20, r30
    1022:	5f 07       	cpc	r21, r31
    1024:	a8 f2       	brcs	.-86     	; 0xfd0 <GetNumberFromBillString+0x3e>
			}
		}
	}
	
	int RetVal = 0;
	if (flWasCifra) {
    1026:	11 23       	and	r17, r17
    1028:	31 f0       	breq	.+12     	; 0x1036 <GetNumberFromBillString+0xa4>
		RetVal = atoi(tmpCh);
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <atoi>
    1032:	9c 01       	movw	r18, r24
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GetNumberFromBillString+0xa8>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
	}
	return RetVal;
}
    103a:	c9 01       	movw	r24, r18
    103c:	ca 56       	subi	r28, 0x6A	; 106
    103e:	df 4f       	sbci	r29, 0xFF	; 255
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	1f 91       	pop	r17
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	08 95       	ret

00001056 <UnPackTermSetts>:
		PhoneNumber[CellNumber-cSettings].Zones = tmpVal;
	}
}
//------------------------------------------------------------------------------------

void UnPackTermSetts(char *StrSettings, int NumTerm) {
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	2a 97       	sbiw	r28, 0x0a	; 10
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	6c 01       	movw	r12, r24
    1078:	7b 01       	movw	r14, r22
	char tmpStr[10];
	int tmpVal = 0;
	int NumLen = strlen(StrSettings);
    107a:	fc 01       	movw	r30, r24
    107c:	01 90       	ld	r0, Z+
    107e:	00 20       	and	r0, r0
    1080:	e9 f7       	brne	.-6      	; 0x107c <UnPackTermSetts+0x26>
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	e8 1b       	sub	r30, r24
    1086:	f9 0b       	sbc	r31, r25
    1088:	db 01       	movw	r26, r22
    108a:	16 e0       	ldi	r17, 0x06	; 6
    108c:	aa 0f       	add	r26, r26
    108e:	bb 1f       	adc	r27, r27
    1090:	1a 95       	dec	r17
    1092:	e1 f7       	brne	.-8      	; 0x108c <UnPackTermSetts+0x36>
	if (NumLen < 8) {
    1094:	38 97       	sbiw	r30, 0x08	; 8
    1096:	6c f4       	brge	.+26     	; 0x10b2 <UnPackTermSetts+0x5c>
		Terms[NumTerm].MINLim = -55;
    1098:	fd 01       	movw	r30, r26
    109a:	ef 53       	subi	r30, 0x3F	; 63
    109c:	f2 4f       	sbci	r31, 0xF2	; 242
    109e:	89 ec       	ldi	r24, 0xC9	; 201
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	90 8b       	std	Z+16, r25	; 0x10
    10a4:	87 87       	std	Z+15, r24	; 0x0f
		Terms[NumTerm].MAXLim = 200;
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	92 8b       	std	Z+18, r25	; 0x12
    10ac:	81 8b       	std	Z+17, r24	; 0x11
		Terms[NumTerm].flEnable = 0;
    10ae:	13 8a       	std	Z+19, r1	; 0x13
    10b0:	49 c0       	rjmp	.+146    	; 0x1144 <__stack+0x45>
		return;
	}
	
	Terms[NumTerm].flEnable = 1;
    10b2:	af 53       	subi	r26, 0x3F	; 63
    10b4:	b2 4f       	sbci	r27, 0xF2	; 242
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	53 96       	adiw	r26, 0x13	; 19
    10ba:	8c 93       	st	X, r24
	// Tmin - 0 позиции
	strncpy(tmpStr, &(StrSettings[1]), 3);
    10bc:	b6 01       	movw	r22, r12
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8e 01       	movw	r16, r28
    10c4:	0f 5f       	subi	r16, 0xFF	; 255
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	c8 01       	movw	r24, r16
    10ca:	43 e0       	ldi	r20, 0x03	; 3
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
	tmpStr[3] = 0;
    10d2:	1c 82       	std	Y+4, r1	; 0x04
	tmpVal = atoi(tmpStr);
    10d4:	c8 01       	movw	r24, r16
    10d6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <atoi>
    10da:	9c 01       	movw	r18, r24
	if (StrSettings[0] == '1') tmpVal = 0 - tmpVal;
    10dc:	f6 01       	movw	r30, r12
    10de:	80 81       	ld	r24, Z
    10e0:	81 33       	cpi	r24, 0x31	; 49
    10e2:	19 f4       	brne	.+6      	; 0x10ea <UnPackTermSetts+0x94>
    10e4:	30 95       	com	r19
    10e6:	21 95       	neg	r18
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
	Terms[NumTerm].MINLim = tmpVal;
    10ea:	f7 01       	movw	r30, r14
    10ec:	a6 e0       	ldi	r26, 0x06	; 6
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	aa 95       	dec	r26
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <UnPackTermSetts+0x98>
    10f6:	ef 53       	subi	r30, 0x3F	; 63
    10f8:	f2 4f       	sbci	r31, 0xF2	; 242
    10fa:	30 8b       	std	Z+16, r19	; 0x10
    10fc:	27 87       	std	Z+15, r18	; 0x0f

	// Tmax - 4 позиции
	strncpy(tmpStr, &(StrSettings[5]), 3);
    10fe:	b6 01       	movw	r22, r12
    1100:	6b 5f       	subi	r22, 0xFB	; 251
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	8e 01       	movw	r16, r28
    1106:	0f 5f       	subi	r16, 0xFF	; 255
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	c8 01       	movw	r24, r16
    110c:	43 e0       	ldi	r20, 0x03	; 3
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
	tmpStr[3] = 0;
    1114:	1c 82       	std	Y+4, r1	; 0x04
	tmpVal = atoi(tmpStr);
    1116:	c8 01       	movw	r24, r16
    1118:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <atoi>
    111c:	9c 01       	movw	r18, r24
	if (StrSettings[4] == '1') tmpVal = 0 - tmpVal;
    111e:	f6 01       	movw	r30, r12
    1120:	84 81       	ldd	r24, Z+4	; 0x04
    1122:	81 33       	cpi	r24, 0x31	; 49
    1124:	19 f4       	brne	.+6      	; 0x112c <__stack+0x2d>
    1126:	30 95       	com	r19
    1128:	21 95       	neg	r18
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
	Terms[NumTerm].MAXLim = tmpVal;
    112c:	f6 e0       	ldi	r31, 0x06	; 6
    112e:	ee 0c       	add	r14, r14
    1130:	ff 1c       	adc	r15, r15
    1132:	fa 95       	dec	r31
    1134:	e1 f7       	brne	.-8      	; 0x112e <__stack+0x2f>
    1136:	81 ec       	ldi	r24, 0xC1	; 193
    1138:	9d e0       	ldi	r25, 0x0D	; 13
    113a:	e8 0e       	add	r14, r24
    113c:	f9 1e       	adc	r15, r25
    113e:	f7 01       	movw	r30, r14
    1140:	32 8b       	std	Z+18, r19	; 0x12
    1142:	21 8b       	std	Z+17, r18	; 0x11
}
    1144:	2a 96       	adiw	r28, 0x0a	; 10
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	08 95       	ret

00001162 <UnPackZonesSetts>:
		PhoneNumber[CellNumber-cSettings].Privilege = Priv;
	}
}
//------------------------------------------------------------------------------------

void UnPackZonesSetts(char *StrSettings) {
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2a 97       	sbiw	r28, 0x0a	; 10
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
	char tmpStr[10];
	unsigned char tmpVal = 0;
	int NumLen = strlen(StrSettings);
    1182:	fc 01       	movw	r30, r24
    1184:	01 90       	ld	r0, Z+
    1186:	00 20       	and	r0, r0
    1188:	e9 f7       	brne	.-6      	; 0x1184 <UnPackZonesSetts+0x22>
    118a:	31 97       	sbiw	r30, 0x01	; 1
    118c:	e8 1b       	sub	r30, r24
    118e:	f9 0b       	sbc	r31, r25
	if (NumLen < 12) {
    1190:	3c 97       	sbiw	r30, 0x0c	; 12
    1192:	ec f0       	brlt	.+58     	; 0x11ce <UnPackZonesSetts+0x6c>
		return;
    1194:	7c 01       	movw	r14, r24
    1196:	03 e2       	ldi	r16, 0x23	; 35
    1198:	1b e0       	ldi	r17, 0x0B	; 11
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		strncpy(tmpStr, &(StrSettings[(CellNumber-cNumber01)*2]), 2);
    119a:	6e 01       	movw	r12, r28
    119c:	08 94       	sec
    119e:	c1 1c       	adc	r12, r1
    11a0:	d1 1c       	adc	r13, r1
    11a2:	c6 01       	movw	r24, r12
    11a4:	b7 01       	movw	r22, r14
    11a6:	42 e0       	ldi	r20, 0x02	; 2
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
		tmpStr[2] = 0;
    11ae:	1b 82       	std	Y+3, r1	; 0x03
		tmpVal = atoi(tmpStr);
    11b0:	c6 01       	movw	r24, r12
    11b2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <atoi>
		PhoneNumber[CellNumber-cSettings].Zones = tmpVal;
    11b6:	f8 01       	movw	r30, r16
    11b8:	80 83       	st	Z, r24
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	e8 0e       	add	r14, r24
    11c0:	f9 1e       	adc	r15, r25
    11c2:	0a 5d       	subi	r16, 0xDA	; 218
    11c4:	1f 4f       	sbci	r17, 0xFF	; 255
	int NumLen = strlen(StrSettings);
	if (NumLen < 12) {
		return;
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
    11c6:	9c e0       	ldi	r25, 0x0C	; 12
    11c8:	07 30       	cpi	r16, 0x07	; 7
    11ca:	19 07       	cpc	r17, r25
    11cc:	51 f7       	brne	.-44     	; 0x11a2 <UnPackZonesSetts+0x40>
		strncpy(tmpStr, &(StrSettings[(CellNumber-cNumber01)*2]), 2);
		tmpStr[2] = 0;
		tmpVal = atoi(tmpStr);
		PhoneNumber[CellNumber-cSettings].Zones = tmpVal;
	}
}
    11ce:	2a 96       	adiw	r28, 0x0a	; 10
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	08 95       	ret

000011ec <UnPackNumSetts>:
	tmpVal = atoi(tmpStr);
	Settings.DInInversion = (tmpVal<<4);
}
//------------------------------------------------------------------------------------

void UnPackNumSetts(char *StrSettings) {
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	2a 97       	sbiw	r28, 0x0a	; 10
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
	char tmpStr[10];
	unsigned char tmpVal = 0;
	int NumLen = strlen(StrSettings);
    120c:	fc 01       	movw	r30, r24
    120e:	01 90       	ld	r0, Z+
    1210:	00 20       	and	r0, r0
    1212:	e9 f7       	brne	.-6      	; 0x120e <UnPackNumSetts+0x22>
    1214:	31 97       	sbiw	r30, 0x01	; 1
    1216:	e8 1b       	sub	r30, r24
    1218:	f9 0b       	sbc	r31, r25
	if (NumLen < 6) {
    121a:	36 97       	sbiw	r30, 0x06	; 6
    121c:	2c f1       	brlt	.+74     	; 0x1268 <UnPackNumSetts+0x7c>
		return;
    121e:	7c 01       	movw	r14, r24
    1220:	02 e2       	ldi	r16, 0x22	; 34
    1222:	1b e0       	ldi	r17, 0x0B	; 11
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		//strncpy(tmpStr, &(StrSettings[NumLen-(CellNumber-cNumber01)-1]), 1);
		strncpy(tmpStr, &(StrSettings[CellNumber-cNumber01]), 1);
    1224:	6e 01       	movw	r12, r28
    1226:	08 94       	sec
    1228:	c1 1c       	adc	r12, r1
    122a:	d1 1c       	adc	r13, r1
    122c:	c6 01       	movw	r24, r12
    122e:	b7 01       	movw	r22, r14
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
		tmpStr[1] = 0;
    1238:	1a 82       	std	Y+2, r1	; 0x02
		tmpVal = atoi(tmpStr);
    123a:	c6 01       	movw	r24, r12
    123c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <atoi>
		char Priv = cPrivilegeNone;
		if (tmpVal == 1) Priv = cPrivilegeFull;
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	39 f0       	breq	.+14     	; 0x1252 <UnPackNumSetts+0x66>
		else if (tmpVal == 2) Priv = cPrivilegeAllSMS;
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	29 f0       	breq	.+10     	; 0x1252 <UnPackNumSetts+0x66>
		else if (tmpVal == 3) Priv = cPrivilegeAlarmSMS;
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	11 f4       	brne	.+4      	; 0x1250 <UnPackNumSetts+0x64>
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <UnPackNumSetts+0x66>
    1250:	80 e0       	ldi	r24, 0x00	; 0
		PhoneNumber[CellNumber-cSettings].Privilege = Priv;
    1252:	f8 01       	movw	r30, r16
    1254:	80 83       	st	Z, r24
    1256:	08 94       	sec
    1258:	e1 1c       	adc	r14, r1
    125a:	f1 1c       	adc	r15, r1
    125c:	0a 5d       	subi	r16, 0xDA	; 218
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
	int NumLen = strlen(StrSettings);
	if (NumLen < 6) {
		return;
	}
	
	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
    1260:	fc e0       	ldi	r31, 0x0C	; 12
    1262:	06 30       	cpi	r16, 0x06	; 6
    1264:	1f 07       	cpc	r17, r31
    1266:	11 f7       	brne	.-60     	; 0x122c <UnPackNumSetts+0x40>
		if (tmpVal == 1) Priv = cPrivilegeFull;
		else if (tmpVal == 2) Priv = cPrivilegeAllSMS;
		else if (tmpVal == 3) Priv = cPrivilegeAlarmSMS;
		PhoneNumber[CellNumber-cSettings].Privilege = Priv;
	}
}
    1268:	2a 96       	adiw	r28, 0x0a	; 10
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	08 95       	ret

00001286 <UnPackSettings>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

void UnPackSettings(char *StrSettings) {
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	2a 97       	sbiw	r28, 0x0a	; 10
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	7c 01       	movw	r14, r24
	char tmpStr[10];
	unsigned char tmpVal = 0;
	int NumLen = strlen(StrSettings);
    12a4:	fc 01       	movw	r30, r24
    12a6:	01 90       	ld	r0, Z+
    12a8:	00 20       	and	r0, r0
    12aa:	e9 f7       	brne	.-6      	; 0x12a6 <UnPackSettings+0x20>
    12ac:	31 97       	sbiw	r30, 0x01	; 1
    12ae:	e8 1b       	sub	r30, r24
    12b0:	f9 0b       	sbc	r31, r25
	if (NumLen < 5) {
    12b2:	35 97       	sbiw	r30, 0x05	; 5
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <UnPackSettings+0x3c>
		Settings.DInInversion = 0;
    12b6:	10 92 e7 08 	sts	0x08E7, r1
		Settings.AlarmTime_s = 60;
    12ba:	8c e3       	ldi	r24, 0x3C	; 60
    12bc:	80 93 e8 08 	sts	0x08E8, r24
    12c0:	29 c0       	rjmp	.+82     	; 0x1314 <UnPackSettings+0x8e>
		return;
	}
	
	// Длина гудка сирены в секундах (3 позиции)
	strncpy(tmpStr, &(StrSettings[0]), 3);
    12c2:	8e 01       	movw	r16, r28
    12c4:	0f 5f       	subi	r16, 0xFF	; 255
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	c8 01       	movw	r24, r16
    12ca:	b7 01       	movw	r22, r14
    12cc:	43 e0       	ldi	r20, 0x03	; 3
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
	tmpStr[3] = 0;
    12d4:	1c 82       	std	Y+4, r1	; 0x04
	tmpVal = atoi(tmpStr);
    12d6:	c8 01       	movw	r24, r16
    12d8:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <atoi>
	Settings.AlarmTime_s = tmpVal;
    12dc:	80 93 e8 08 	sts	0x08E8, r24
	if (Settings.AlarmTime_s < 30) Settings.AlarmTime_s = 30;
    12e0:	8e 31       	cpi	r24, 0x1E	; 30
    12e2:	18 f4       	brcc	.+6      	; 0x12ea <UnPackSettings+0x64>
    12e4:	8e e1       	ldi	r24, 0x1E	; 30
    12e6:	80 93 e8 08 	sts	0x08E8, r24

	// инверсия (2 позиции)
	strncpy(tmpStr, &(StrSettings[3]), 2);
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	e8 0e       	add	r14, r24
    12f0:	f9 1e       	adc	r15, r25
    12f2:	8e 01       	movw	r16, r28
    12f4:	0f 5f       	subi	r16, 0xFF	; 255
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	c8 01       	movw	r24, r16
    12fa:	b7 01       	movw	r22, r14
    12fc:	42 e0       	ldi	r20, 0x02	; 2
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
	tmpStr[2] = 0;
    1304:	1b 82       	std	Y+3, r1	; 0x03
	tmpVal = atoi(tmpStr);
    1306:	c8 01       	movw	r24, r16
    1308:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <atoi>
	Settings.DInInversion = (tmpVal<<4);
    130c:	82 95       	swap	r24
    130e:	80 7f       	andi	r24, 0xF0	; 240
    1310:	80 93 e7 08 	sts	0x08E7, r24
}
    1314:	2a 96       	adiw	r28, 0x0a	; 10
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	08 95       	ret

0000132e <ReadSettings>:
// ErrorReadSettings = 6; // нет 21-й записи в книге => надо произвести запись начальных установок
// ErrorReadSettings = 7; // нет 22-й записи в книге => надо произвести запись начальных установок
TTime TPrevReadSettings;
int swReadSettings = cswIdle;
char ErrorReadSettings = 0; 
char ReadSettings(void) {
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	c6 54       	subi	r28, 0x46	; 70
    1340:	d0 40       	sbci	r29, 0x00	; 0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
	char CellNumberStr[MAX_NUMBER_LENGTH];
	char tmpCh[MAX_NUMBER_LENGTH];
	char RetWaitAnswer;
	char RetVal = 1; // еще работает - нет определенного результата
	switch(swReadSettings) {
    134c:	80 91 d7 07 	lds	r24, 0x07D7
    1350:	90 91 d8 07 	lds	r25, 0x07D8
    1354:	85 32       	cpi	r24, 0x25	; 37
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <ReadSettings+0x2e>
    135a:	40 c0       	rjmp	.+128    	; 0x13dc <ReadSettings+0xae>
    135c:	86 32       	cpi	r24, 0x26	; 38
    135e:	91 05       	cpc	r25, r1
    1360:	8c f4       	brge	.+34     	; 0x1384 <ReadSettings+0x56>
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	91 05       	cpc	r25, r1
    1366:	49 f1       	breq	.+82     	; 0x13ba <ReadSettings+0x8c>
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	91 05       	cpc	r25, r1
    136c:	1c f4       	brge	.+6      	; 0x1374 <ReadSettings+0x46>
    136e:	89 2b       	or	r24, r25
    1370:	09 f1       	breq	.+66     	; 0x13b4 <ReadSettings+0x86>
    1372:	4d c1       	rjmp	.+666    	; 0x160e <ReadSettings+0x2e0>
    1374:	8e 31       	cpi	r24, 0x1E	; 30
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <ReadSettings+0x4e>
    137a:	46 c0       	rjmp	.+140    	; 0x1408 <ReadSettings+0xda>
    137c:	4f 97       	sbiw	r24, 0x1f	; 31
    137e:	09 f0       	breq	.+2      	; 0x1382 <ReadSettings+0x54>
    1380:	46 c1       	rjmp	.+652    	; 0x160e <ReadSettings+0x2e0>
    1382:	4b c0       	rjmp	.+150    	; 0x141a <ReadSettings+0xec>
    1384:	83 33       	cpi	r24, 0x33	; 51
    1386:	91 05       	cpc	r25, r1
    1388:	99 f0       	breq	.+38     	; 0x13b0 <ReadSettings+0x82>
    138a:	84 33       	cpi	r24, 0x34	; 52
    138c:	91 05       	cpc	r25, r1
    138e:	44 f4       	brge	.+16     	; 0x13a0 <ReadSettings+0x72>
    1390:	86 32       	cpi	r24, 0x26	; 38
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <ReadSettings+0x6a>
    1396:	4e c0       	rjmp	.+156    	; 0x1434 <ReadSettings+0x106>
    1398:	88 97       	sbiw	r24, 0x28	; 40
    139a:	09 f0       	breq	.+2      	; 0x139e <ReadSettings+0x70>
    139c:	38 c1       	rjmp	.+624    	; 0x160e <ReadSettings+0x2e0>
    139e:	76 c0       	rjmp	.+236    	; 0x148c <ReadSettings+0x15e>
    13a0:	84 33       	cpi	r24, 0x34	; 52
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <ReadSettings+0x7a>
    13a6:	2a c1       	rjmp	.+596    	; 0x15fc <ReadSettings+0x2ce>
    13a8:	c5 97       	sbiw	r24, 0x35	; 53
    13aa:	09 f0       	breq	.+2      	; 0x13ae <ReadSettings+0x80>
    13ac:	30 c1       	rjmp	.+608    	; 0x160e <ReadSettings+0x2e0>
    13ae:	29 c1       	rjmp	.+594    	; 0x1602 <ReadSettings+0x2d4>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	2e c1       	rjmp	.+604    	; 0x1610 <ReadSettings+0x2e2>
		case cswIdle:
			ErrorReadSettings = 0;
    13b4:	10 92 d9 07 	sts	0x07D9, r1
    13b8:	2a c1       	rjmp	.+596    	; 0x160e <ReadSettings+0x2e0>
		break;
	
		case cswStart: // выбор телефонной книги на симке
			DoCommand(&TPrevReadSettings, "AT+CPBS=\"SM\"\r\n", &swReadSettings, csw010);
    13ba:	8c ea       	ldi	r24, 0xAC	; 172
    13bc:	98 e0       	ldi	r25, 0x08	; 8
    13be:	61 ec       	ldi	r22, 0xC1	; 193
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	47 ed       	ldi	r20, 0xD7	; 215
    13c4:	57 e0       	ldi	r21, 0x07	; 7
    13c6:	25 e2       	ldi	r18, 0x25	; 37
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
			CellNumber = cSettings;
    13ce:	84 e1       	ldi	r24, 0x14	; 20
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	90 93 16 0d 	sts	0x0D16, r25
    13d6:	80 93 15 0d 	sts	0x0D15, r24
    13da:	19 c1       	rjmp	.+562    	; 0x160e <ReadSettings+0x2e0>
		break;
		case csw010: // ждем ответа от модема
			if (WaitAnswer(TPrevReadSettings, "OK", 2000, &swReadSettings, cswMarkDelay01, cswNOK) == 4) {
    13dc:	80 91 ac 08 	lds	r24, 0x08AC
    13e0:	90 91 ad 08 	lds	r25, 0x08AD
    13e4:	62 e5       	ldi	r22, 0x52	; 82
    13e6:	71 e0       	ldi	r23, 0x01	; 1
    13e8:	40 ed       	ldi	r20, 0xD0	; 208
    13ea:	57 e0       	ldi	r21, 0x07	; 7
    13ec:	27 ed       	ldi	r18, 0xD7	; 215
    13ee:	37 e0       	ldi	r19, 0x07	; 7
    13f0:	0e e1       	ldi	r16, 0x1E	; 30
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	f4 e3       	ldi	r31, 0x34	; 52
    13f6:	ef 2e       	mov	r14, r31
    13f8:	f1 2c       	mov	r15, r1
    13fa:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
    13fe:	84 30       	cpi	r24, 0x04	; 4
    1400:	09 f0       	breq	.+2      	; 0x1404 <ReadSettings+0xd6>
    1402:	05 c1       	rjmp	.+522    	; 0x160e <ReadSettings+0x2e0>
				ErrorReadSettings = 3; // таймаут выбора телефонной книги сим карты
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	55 c0       	rjmp	.+170    	; 0x14b2 <ReadSettings+0x184>
			}
		break;
		
		// задержимся после одупления телефонной книги начуток
		case cswMarkDelay01:
			MarkDelay(&TPrevReadSettings, &swReadSettings, cswWaitDelay01);
    1408:	8c ea       	ldi	r24, 0xAC	; 172
    140a:	98 e0       	ldi	r25, 0x08	; 8
    140c:	67 ed       	ldi	r22, 0xD7	; 215
    140e:	77 e0       	ldi	r23, 0x07	; 7
    1410:	4f e1       	ldi	r20, 0x1F	; 31
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <MarkDelay>
    1418:	fa c0       	rjmp	.+500    	; 0x160e <ReadSettings+0x2e0>
		break;
		case cswWaitDelay01:
			WaitDelayAndGoTo(TPrevReadSettings, 1000, &swReadSettings, csw020);
    141a:	80 91 ac 08 	lds	r24, 0x08AC
    141e:	90 91 ad 08 	lds	r25, 0x08AD
    1422:	68 ee       	ldi	r22, 0xE8	; 232
    1424:	73 e0       	ldi	r23, 0x03	; 3
    1426:	47 ed       	ldi	r20, 0xD7	; 215
    1428:	57 e0       	ldi	r21, 0x07	; 7
    142a:	26 e2       	ldi	r18, 0x26	; 38
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	0e 94 1e 10 	call	0x203c	; 0x203c <WaitDelayAndGoTo>
    1432:	ed c0       	rjmp	.+474    	; 0x160e <ReadSettings+0x2e0>
		break;
		
		//----------------- чтение очередного номера из записной книжки --------------------------
		case csw020: 
			itoa(CellNumber, CellNumberStr, 10);
    1434:	80 91 15 0d 	lds	r24, 0x0D15
    1438:	90 91 16 0d 	lds	r25, 0x0D16
    143c:	7e 01       	movw	r14, r28
    143e:	08 94       	sec
    1440:	e1 1c       	adc	r14, r1
    1442:	f1 1c       	adc	r15, r1
    1444:	b7 01       	movw	r22, r14
    1446:	4a e0       	ldi	r20, 0x0A	; 10
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
			strncpy(tmpCh, "AT+CPBR=", MAX_NUMBER_LENGTH-1);
    144e:	8e 01       	movw	r16, r28
    1450:	0c 5d       	subi	r16, 0xDC	; 220
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	c8 01       	movw	r24, r16
    1456:	60 ed       	ldi	r22, 0xD0	; 208
    1458:	71 e0       	ldi	r23, 0x01	; 1
    145a:	42 e2       	ldi	r20, 0x22	; 34
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
			strncat(tmpCh, CellNumberStr, MAX_NUMBER_LENGTH-1);
    1462:	c8 01       	movw	r24, r16
    1464:	b7 01       	movw	r22, r14
    1466:	42 e2       	ldi	r20, 0x22	; 34
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
			strncat(tmpCh, "\r\n", MAX_NUMBER_LENGTH-1);
    146e:	c8 01       	movw	r24, r16
    1470:	66 e4       	ldi	r22, 0x46	; 70
    1472:	71 e0       	ldi	r23, 0x01	; 1
    1474:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			DoCommand(&TPrevReadSettings, tmpCh, &swReadSettings, csw030);
    1478:	8c ea       	ldi	r24, 0xAC	; 172
    147a:	98 e0       	ldi	r25, 0x08	; 8
    147c:	b8 01       	movw	r22, r16
    147e:	47 ed       	ldi	r20, 0xD7	; 215
    1480:	57 e0       	ldi	r21, 0x07	; 7
    1482:	28 e2       	ldi	r18, 0x28	; 40
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
    148a:	c1 c0       	rjmp	.+386    	; 0x160e <ReadSettings+0x2e0>
		break;
		case csw030: // ждем ответа от модема
			RetWaitAnswer = WaitAnswer(TPrevReadSettings, "+CPBR: ", 2000, &swReadSettings, csw020, cswNOK);
    148c:	80 91 ac 08 	lds	r24, 0x08AC
    1490:	90 91 ad 08 	lds	r25, 0x08AD
    1494:	69 ed       	ldi	r22, 0xD9	; 217
    1496:	71 e0       	ldi	r23, 0x01	; 1
    1498:	40 ed       	ldi	r20, 0xD0	; 208
    149a:	57 e0       	ldi	r21, 0x07	; 7
    149c:	27 ed       	ldi	r18, 0xD7	; 215
    149e:	37 e0       	ldi	r19, 0x07	; 7
    14a0:	06 e2       	ldi	r16, 0x26	; 38
    14a2:	10 e0       	ldi	r17, 0x00	; 0
    14a4:	e4 e3       	ldi	r30, 0x34	; 52
    14a6:	ee 2e       	mov	r14, r30
    14a8:	f1 2c       	mov	r15, r1
    14aa:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
			if (RetWaitAnswer == 4) {
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	19 f4       	brne	.+6      	; 0x14b8 <ReadSettings+0x18a>
				ErrorReadSettings = 4; // таймаут выбора телефонной книги сим карты
    14b2:	80 93 d9 07 	sts	0x07D9, r24
    14b6:	ac c0       	rjmp	.+344    	; 0x1610 <ReadSettings+0x2e2>
				RetVal = ErrorReadSettings;
			}
			else
			if (RetWaitAnswer == 1) {
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	09 f0       	breq	.+2      	; 0x14be <ReadSettings+0x190>
    14bc:	a8 c0       	rjmp	.+336    	; 0x160e <ReadSettings+0x2e0>
				char *tmpBegStr = &(FromModemBuf[11]);
				char *tmpEndStr = strstr(tmpBegStr, "\"");
    14be:	85 e8       	ldi	r24, 0x85	; 133
    14c0:	9c e0       	ldi	r25, 0x0C	; 12
    14c2:	62 e2       	ldi	r22, 0x22	; 34
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <strchr>
    14ca:	fc 01       	movw	r30, r24
				*tmpEndStr = 0;
    14cc:	10 82       	st	Z, r1
				strncpy(PhoneNumber[CellNumber-cSettings].Number, tmpBegStr, MAX_NUMBER_LENGTH-1);
    14ce:	80 91 15 0d 	lds	r24, 0x0D15
    14d2:	90 91 16 0d 	lds	r25, 0x0D16
    14d6:	44 97       	sbiw	r24, 0x14	; 20
    14d8:	26 e2       	ldi	r18, 0x26	; 38
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	ac 01       	movw	r20, r24
    14de:	42 9f       	mul	r20, r18
    14e0:	c0 01       	movw	r24, r0
    14e2:	43 9f       	mul	r20, r19
    14e4:	90 0d       	add	r25, r0
    14e6:	52 9f       	mul	r21, r18
    14e8:	90 0d       	add	r25, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	86 5e       	subi	r24, 0xE6	; 230
    14ee:	95 4f       	sbci	r25, 0xF5	; 245
    14f0:	65 e8       	ldi	r22, 0x85	; 133
    14f2:	7c e0       	ldi	r23, 0x0C	; 12
    14f4:	42 e2       	ldi	r20, 0x22	; 34
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
				// ----- действие в зависимости от ячейки
				if (CellNumber == cSettings) UnPackSettings(PhoneNumber[CellNumber-cSettings].Number);
    14fc:	80 91 15 0d 	lds	r24, 0x0D15
    1500:	90 91 16 0d 	lds	r25, 0x0D16
    1504:	44 97       	sbiw	r24, 0x14	; 20
    1506:	21 f4       	brne	.+8      	; 0x1510 <ReadSettings+0x1e2>
    1508:	8a e1       	ldi	r24, 0x1A	; 26
    150a:	9a e0       	ldi	r25, 0x0A	; 10
    150c:	0e 94 43 09 	call	0x1286	; 0x1286 <UnPackSettings>
				if (CellNumber == cNumSetts) UnPackNumSetts(PhoneNumber[CellNumber-cSettings].Number);
    1510:	80 91 15 0d 	lds	r24, 0x0D15
    1514:	90 91 16 0d 	lds	r25, 0x0D16
    1518:	45 97       	sbiw	r24, 0x15	; 21
    151a:	21 f4       	brne	.+8      	; 0x1524 <ReadSettings+0x1f6>
    151c:	80 e4       	ldi	r24, 0x40	; 64
    151e:	9a e0       	ldi	r25, 0x0A	; 10
    1520:	0e 94 f6 08 	call	0x11ec	; 0x11ec <UnPackNumSetts>
				if (CellNumber == cZonesSetts) UnPackZonesSetts(PhoneNumber[CellNumber-cSettings].Number);
    1524:	80 91 15 0d 	lds	r24, 0x0D15
    1528:	90 91 16 0d 	lds	r25, 0x0D16
    152c:	46 97       	sbiw	r24, 0x16	; 22
    152e:	21 f4       	brne	.+8      	; 0x1538 <ReadSettings+0x20a>
    1530:	86 e6       	ldi	r24, 0x66	; 102
    1532:	9a e0       	ldi	r25, 0x0A	; 10
    1534:	0e 94 b1 08 	call	0x1162	; 0x1162 <UnPackZonesSetts>
				if (CellNumber == cProverkaScheta) {
    1538:	00 91 15 0d 	lds	r16, 0x0D15
    153c:	10 91 16 0d 	lds	r17, 0x0D16
    1540:	07 31       	cpi	r16, 0x17	; 23
    1542:	11 05       	cpc	r17, r1
    1544:	81 f4       	brne	.+32     	; 0x1566 <ReadSettings+0x238>
					if (strncmp(PhoneNumber[CellNumber-cSettings].Number, "000", MAX_NUMBER_LENGTH-1) == 0) PhoneNumber[CellNumber-cSettings].IsActive = 0;
    1546:	8c e8       	ldi	r24, 0x8C	; 140
    1548:	9a e0       	ldi	r25, 0x0A	; 10
    154a:	61 ee       	ldi	r22, 0xE1	; 225
    154c:	71 e0       	ldi	r23, 0x01	; 1
    154e:	42 e2       	ldi	r20, 0x22	; 34
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <strncmp>
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	19 f4       	brne	.+6      	; 0x1560 <ReadSettings+0x232>
    155a:	10 92 af 0a 	sts	0x0AAF, r1
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <ReadSettings+0x24a>
					else PhoneNumber[CellNumber-cSettings].IsActive = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 af 0a 	sts	0x0AAF, r24
				}
				if (CellNumber == cTerm01) UnPackTermSetts(PhoneNumber[CellNumber-cSettings].Number, 0);
    1566:	08 31       	cpi	r16, 0x18	; 24
    1568:	11 05       	cpc	r17, r1
    156a:	31 f4       	brne	.+12     	; 0x1578 <ReadSettings+0x24a>
    156c:	82 eb       	ldi	r24, 0xB2	; 178
    156e:	9a e0       	ldi	r25, 0x0A	; 10
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	0e 94 2b 08 	call	0x1056	; 0x1056 <UnPackTermSetts>
				if (CellNumber == cTerm02) UnPackTermSetts(PhoneNumber[CellNumber-cSettings].Number, 1);
    1578:	80 91 15 0d 	lds	r24, 0x0D15
    157c:	90 91 16 0d 	lds	r25, 0x0D16
    1580:	49 97       	sbiw	r24, 0x19	; 25
    1582:	31 f4       	brne	.+12     	; 0x1590 <ReadSettings+0x262>
    1584:	88 ed       	ldi	r24, 0xD8	; 216
    1586:	9a e0       	ldi	r25, 0x0A	; 10
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	0e 94 2b 08 	call	0x1056	; 0x1056 <UnPackTermSetts>
				if (CellNumber >= cNumber01) {
    1590:	00 91 15 0d 	lds	r16, 0x0D15
    1594:	10 91 16 0d 	lds	r17, 0x0D16
    1598:	0a 31       	cpi	r16, 0x1A	; 26
    159a:	11 05       	cpc	r17, r1
    159c:	04 f1       	brlt	.+64     	; 0x15de <ReadSettings+0x2b0>
					if (strncmp(PhoneNumber[CellNumber-cSettings].Number, "000", MAX_NUMBER_LENGTH-1) == 0) PhoneNumber[CellNumber-cSettings].IsActive = 0;
    159e:	04 51       	subi	r16, 0x14	; 20
    15a0:	10 40       	sbci	r17, 0x00	; 0
    15a2:	86 e2       	ldi	r24, 0x26	; 38
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	08 9f       	mul	r16, r24
    15a8:	70 01       	movw	r14, r0
    15aa:	09 9f       	mul	r16, r25
    15ac:	f0 0c       	add	r15, r0
    15ae:	18 9f       	mul	r17, r24
    15b0:	f0 0c       	add	r15, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	0c 5e       	subi	r16, 0xEC	; 236
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	8a e1       	ldi	r24, 0x1A	; 26
    15ba:	9a e0       	ldi	r25, 0x0A	; 10
    15bc:	e8 0e       	add	r14, r24
    15be:	f9 1e       	adc	r15, r25
    15c0:	c7 01       	movw	r24, r14
    15c2:	61 ee       	ldi	r22, 0xE1	; 225
    15c4:	71 e0       	ldi	r23, 0x01	; 1
    15c6:	42 e2       	ldi	r20, 0x22	; 34
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <strncmp>
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	19 f4       	brne	.+6      	; 0x15d8 <ReadSettings+0x2aa>
    15d2:	f7 01       	movw	r30, r14
    15d4:	13 a2       	std	Z+35, r1	; 0x23
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <ReadSettings+0x2b0>
					else PhoneNumber[CellNumber-cSettings].IsActive = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	f7 01       	movw	r30, r14
    15dc:	83 a3       	std	Z+35, r24	; 0x23
				}
				// ----- END действие в зависимости от ячейки
				
				CellNumber++;
    15de:	c8 01       	movw	r24, r16
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	90 93 16 0d 	sts	0x0D16, r25
    15e6:	80 93 15 0d 	sts	0x0D15, r24
				if (CellNumber >= cLast) { // дочитали номера до конца
    15ea:	80 97       	sbiw	r24, 0x20	; 32
    15ec:	84 f0       	brlt	.+32     	; 0x160e <ReadSettings+0x2e0>
					swReadSettings = cswOK;
    15ee:	83 e3       	ldi	r24, 0x33	; 51
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	90 93 d8 07 	sts	0x07D8, r25
    15f6:	80 93 d7 07 	sts	0x07D7, r24
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <ReadSettings+0x2e0>
		
		case cswOK:
			RetVal = 0; // доработал - все в порядке
		break;
		case cswNOK:
			RetVal = ErrorReadSettings; // что-то не так, код ошибки в ...
    15fc:	80 91 d9 07 	lds	r24, 0x07D9
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <ReadSettings+0x2e2>
		break;
		case cswEnd:
			ErrorReadSettings = 0;
    1602:	10 92 d9 07 	sts	0x07D9, r1
			swReadSettings = cswIdle;
    1606:	10 92 d8 07 	sts	0x07D8, r1
    160a:	10 92 d7 07 	sts	0x07D7, r1
    160e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return RetVal;
}
    1610:	ca 5b       	subi	r28, 0xBA	; 186
    1612:	df 4f       	sbci	r29, 0xFF	; 255
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	08 95       	ret

0000162c <WriteSettings>:
}
//------------------------------------------------------------------------------------

TTime TPrevWriteSettings;
int swWriteSettings = cswIdle;
char WriteSettings(void) {
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	c9 5b       	subi	r28, 0xB9	; 185
    163e:	d0 40       	sbci	r29, 0x00	; 0
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
	char CellNumberStr[MAX_NUMBER_LENGTH];
	char tmpCh[MAX_BUF];
	char RetWaitAnswer;
	char RetVal = 1; // еще работает - нет определенного результата
	switch(swWriteSettings) {
    164a:	80 91 d5 07 	lds	r24, 0x07D5
    164e:	90 91 d6 07 	lds	r25, 0x07D6
    1652:	88 32       	cpi	r24, 0x28	; 40
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <WriteSettings+0x2e>
    1658:	a8 c0       	rjmp	.+336    	; 0x17aa <WriteSettings+0x17e>
    165a:	89 32       	cpi	r24, 0x29	; 41
    165c:	91 05       	cpc	r25, r1
    165e:	54 f4       	brge	.+20     	; 0x1674 <WriteSettings+0x48>
    1660:	85 32       	cpi	r24, 0x25	; 37
    1662:	91 05       	cpc	r25, r1
    1664:	29 f1       	breq	.+74     	; 0x16b0 <WriteSettings+0x84>
    1666:	86 32       	cpi	r24, 0x26	; 38
    1668:	91 05       	cpc	r25, r1
    166a:	b9 f1       	breq	.+110    	; 0x16da <WriteSettings+0xae>
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	09 f0       	breq	.+2      	; 0x1672 <WriteSettings+0x46>
    1670:	c7 c0       	rjmp	.+398    	; 0x1800 <WriteSettings+0x1d4>
    1672:	0d c0       	rjmp	.+26     	; 0x168e <WriteSettings+0x62>
    1674:	84 33       	cpi	r24, 0x34	; 52
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <WriteSettings+0x50>
    167a:	c4 c0       	rjmp	.+392    	; 0x1804 <WriteSettings+0x1d8>
    167c:	85 33       	cpi	r24, 0x35	; 53
    167e:	91 05       	cpc	r25, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <WriteSettings+0x58>
    1682:	ba c0       	rjmp	.+372    	; 0x17f8 <WriteSettings+0x1cc>
    1684:	c3 97       	sbiw	r24, 0x33	; 51
    1686:	09 f0       	breq	.+2      	; 0x168a <WriteSettings+0x5e>
    1688:	bb c0       	rjmp	.+374    	; 0x1800 <WriteSettings+0x1d4>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	bc c0       	rjmp	.+376    	; 0x1806 <WriteSettings+0x1da>
		case cswIdle:
		break;

		case cswStart: // выбор телефонной книги на симке
			DoCommand(&TPrevWriteSettings, "AT+CPBS=\"SM\"\r\n", &swWriteSettings, csw010);
    168e:	8e ea       	ldi	r24, 0xAE	; 174
    1690:	98 e0       	ldi	r25, 0x08	; 8
    1692:	61 ec       	ldi	r22, 0xC1	; 193
    1694:	71 e0       	ldi	r23, 0x01	; 1
    1696:	45 ed       	ldi	r20, 0xD5	; 213
    1698:	57 e0       	ldi	r21, 0x07	; 7
    169a:	25 e2       	ldi	r18, 0x25	; 37
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
			CellNumber = cSettings;
    16a2:	84 e1       	ldi	r24, 0x14	; 20
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	90 93 16 0d 	sts	0x0D16, r25
    16aa:	80 93 15 0d 	sts	0x0D15, r24
    16ae:	a8 c0       	rjmp	.+336    	; 0x1800 <WriteSettings+0x1d4>
		break;
		case csw010: // ждем ответа от модема
			if (WaitAnswer(TPrevWriteSettings, "OK", 2000, &swWriteSettings, csw020, cswNOK) == 4) RetVal = 4;
    16b0:	80 91 ae 08 	lds	r24, 0x08AE
    16b4:	90 91 af 08 	lds	r25, 0x08AF
    16b8:	62 e5       	ldi	r22, 0x52	; 82
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	40 ed       	ldi	r20, 0xD0	; 208
    16be:	57 e0       	ldi	r21, 0x07	; 7
    16c0:	25 ed       	ldi	r18, 0xD5	; 213
    16c2:	37 e0       	ldi	r19, 0x07	; 7
    16c4:	06 e2       	ldi	r16, 0x26	; 38
    16c6:	10 e0       	ldi	r17, 0x00	; 0
    16c8:	e4 e3       	ldi	r30, 0x34	; 52
    16ca:	ee 2e       	mov	r14, r30
    16cc:	f1 2c       	mov	r15, r1
    16ce:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <WriteSettings+0xac>
    16d6:	94 c0       	rjmp	.+296    	; 0x1800 <WriteSettings+0x1d4>
    16d8:	95 c0       	rjmp	.+298    	; 0x1804 <WriteSettings+0x1d8>
		break;
		
		case csw020: // пишем ячейку
			itoa(CellNumber, CellNumberStr, 10);
    16da:	80 91 15 0d 	lds	r24, 0x0D15
    16de:	90 91 16 0d 	lds	r25, 0x0D16
    16e2:	8e 01       	movw	r16, r28
    16e4:	0f 5f       	subi	r16, 0xFF	; 255
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	b8 01       	movw	r22, r16
    16ea:	4a e0       	ldi	r20, 0x0A	; 10
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
			strncpy(tmpCh, "AT+CPBW=", MAX_BUF-1);
    16f2:	b4 e2       	ldi	r27, 0x24	; 36
    16f4:	eb 2e       	mov	r14, r27
    16f6:	f1 2c       	mov	r15, r1
    16f8:	ec 0e       	add	r14, r28
    16fa:	fd 1e       	adc	r15, r29
    16fc:	c7 01       	movw	r24, r14
    16fe:	65 ee       	ldi	r22, 0xE5	; 229
    1700:	71 e0       	ldi	r23, 0x01	; 1
    1702:	45 e9       	ldi	r20, 0x95	; 149
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
			strncat(tmpCh, CellNumberStr, MAX_BUF-1);
    170a:	c7 01       	movw	r24, r14
    170c:	b8 01       	movw	r22, r16
    170e:	45 e9       	ldi	r20, 0x95	; 149
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
			strncat(tmpCh, ",", MAX_BUF-1);
    1716:	c7 01       	movw	r24, r14
    1718:	6e ee       	ldi	r22, 0xEE	; 238
    171a:	71 e0       	ldi	r23, 0x01	; 1
    171c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			strncat(tmpCh, Defaults[CellNumber-cSettings].Number, MAX_BUF-1);
    1720:	80 91 15 0d 	lds	r24, 0x0D15
    1724:	90 91 16 0d 	lds	r25, 0x0D16
    1728:	44 97       	sbiw	r24, 0x14	; 20
    172a:	06 e4       	ldi	r16, 0x46	; 70
    172c:	10 e0       	ldi	r17, 0x00	; 0
    172e:	80 9f       	mul	r24, r16
    1730:	b0 01       	movw	r22, r0
    1732:	81 9f       	mul	r24, r17
    1734:	70 0d       	add	r23, r0
    1736:	90 9f       	mul	r25, r16
    1738:	70 0d       	add	r23, r0
    173a:	11 24       	eor	r1, r1
    173c:	63 57       	subi	r22, 0x73	; 115
    173e:	7d 4f       	sbci	r23, 0xFD	; 253
    1740:	c7 01       	movw	r24, r14
    1742:	45 e9       	ldi	r20, 0x95	; 149
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
			strncat(tmpCh, ",,", MAX_BUF-1);
    174a:	c7 01       	movw	r24, r14
    174c:	60 ef       	ldi	r22, 0xF0	; 240
    174e:	71 e0       	ldi	r23, 0x01	; 1
    1750:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			strncat(tmpCh, Defaults[CellNumber-cSettings].Abonent, MAX_BUF-1);
    1754:	80 91 15 0d 	lds	r24, 0x0D15
    1758:	90 91 16 0d 	lds	r25, 0x0D16
    175c:	44 97       	sbiw	r24, 0x14	; 20
    175e:	80 9f       	mul	r24, r16
    1760:	b0 01       	movw	r22, r0
    1762:	81 9f       	mul	r24, r17
    1764:	70 0d       	add	r23, r0
    1766:	90 9f       	mul	r25, r16
    1768:	70 0d       	add	r23, r0
    176a:	11 24       	eor	r1, r1
    176c:	66 59       	subi	r22, 0x96	; 150
    176e:	7d 4f       	sbci	r23, 0xFD	; 253
    1770:	c7 01       	movw	r24, r14
    1772:	45 e9       	ldi	r20, 0x95	; 149
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
			strncat(tmpCh, "\r\n", MAX_BUF-1);
    177a:	c7 01       	movw	r24, r14
    177c:	66 e4       	ldi	r22, 0x46	; 70
    177e:	71 e0       	ldi	r23, 0x01	; 1
    1780:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			if (IsDebug()) { //!#ifdef M_DEBUG
    1784:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
    1788:	88 23       	and	r24, r24
    178a:	19 f0       	breq	.+6      	; 0x1792 <WriteSettings+0x166>
				PutPC(tmpCh);
    178c:	c7 01       	movw	r24, r14
    178e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
			} //!#endif
			DoCommand(&TPrevWriteSettings, tmpCh, &swWriteSettings, csw030);
    1792:	8e ea       	ldi	r24, 0xAE	; 174
    1794:	98 e0       	ldi	r25, 0x08	; 8
    1796:	be 01       	movw	r22, r28
    1798:	6c 5d       	subi	r22, 0xDC	; 220
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	45 ed       	ldi	r20, 0xD5	; 213
    179e:	57 e0       	ldi	r21, 0x07	; 7
    17a0:	28 e2       	ldi	r18, 0x28	; 40
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
    17a8:	2b c0       	rjmp	.+86     	; 0x1800 <WriteSettings+0x1d4>
		break;
		case csw030: // ждем ответа от модема
			RetWaitAnswer = WaitAnswer(TPrevWriteSettings, "OK", 3000, &swWriteSettings, csw020, cswNOK);
    17aa:	80 91 ae 08 	lds	r24, 0x08AE
    17ae:	90 91 af 08 	lds	r25, 0x08AF
    17b2:	62 e5       	ldi	r22, 0x52	; 82
    17b4:	71 e0       	ldi	r23, 0x01	; 1
    17b6:	48 eb       	ldi	r20, 0xB8	; 184
    17b8:	5b e0       	ldi	r21, 0x0B	; 11
    17ba:	25 ed       	ldi	r18, 0xD5	; 213
    17bc:	37 e0       	ldi	r19, 0x07	; 7
    17be:	06 e2       	ldi	r16, 0x26	; 38
    17c0:	10 e0       	ldi	r17, 0x00	; 0
    17c2:	a4 e3       	ldi	r26, 0x34	; 52
    17c4:	ea 2e       	mov	r14, r26
    17c6:	f1 2c       	mov	r15, r1
    17c8:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
			if (RetWaitAnswer == 4) {
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	d1 f0       	breq	.+52     	; 0x1804 <WriteSettings+0x1d8>
				RetVal = 4; 
				break;
			}
			else
			if (RetWaitAnswer == 1) {
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	b1 f4       	brne	.+44     	; 0x1800 <WriteSettings+0x1d4>
				CellNumber++;
    17d4:	80 91 15 0d 	lds	r24, 0x0D15
    17d8:	90 91 16 0d 	lds	r25, 0x0D16
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	90 93 16 0d 	sts	0x0D16, r25
    17e2:	80 93 15 0d 	sts	0x0D15, r24
				if (CellNumber >= cLast) { // дописали номера до конца
    17e6:	80 97       	sbiw	r24, 0x20	; 32
    17e8:	5c f0       	brlt	.+22     	; 0x1800 <WriteSettings+0x1d4>
					swWriteSettings = cswOK;
    17ea:	83 e3       	ldi	r24, 0x33	; 51
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	90 93 d6 07 	sts	0x07D6, r25
    17f2:	80 93 d5 07 	sts	0x07D5, r24
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <WriteSettings+0x1d4>
		break;
		case cswNOK:
			RetVal = 4; // что-то не так, код ошибки в ...
		break;
		case cswEnd:
			swWriteSettings = cswIdle;
    17f8:	10 92 d6 07 	sts	0x07D6, r1
    17fc:	10 92 d5 07 	sts	0x07D5, r1
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <WriteSettings+0x1da>
    1804:	84 e0       	ldi	r24, 0x04	; 4
		break;
	}
	return RetVal;
}
    1806:	c7 54       	subi	r28, 0x47	; 71
    1808:	df 4f       	sbci	r29, 0xFF	; 255
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <MainAlg>:
int swMainAlg = cswIdle;
char BadCount = 0;
char waitReadyBadCount = 0;
char flCallReady = 0;
int baudIndex = 0;
char MainAlg(void) {
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	c4 56       	subi	r28, 0x64	; 100
    1838:	d0 40       	sbci	r29, 0x00	; 0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
				flCallReady = 1;
			}
		}
	}*/
	
	switch (swMainAlg) {
    1844:	e0 91 ed 07 	lds	r30, 0x07ED
    1848:	f0 91 ee 07 	lds	r31, 0x07EE
    184c:	31 97       	sbiw	r30, 0x01	; 1
    184e:	e9 32       	cpi	r30, 0x29	; 41
    1850:	f1 05       	cpc	r31, r1
    1852:	08 f0       	brcs	.+2      	; 0x1856 <MainAlg+0x34>
    1854:	d0 c1       	rjmp	.+928    	; 0x1bf6 <MainAlg+0x3d4>
    1856:	ea 5b       	subi	r30, 0xBA	; 186
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	05 90       	lpm	r0, Z+
    1860:	f4 91       	lpm	r31, Z+
    1862:	e0 2d       	mov	r30, r0
    1864:	09 94       	ijmp
    1866:	14 e6       	ldi	r17, 0x64	; 100
    1868:	c7 c1       	rjmp	.+910    	; 0x1bf8 <MainAlg+0x3d6>
		case cswIdle:
		break;
		
		case cswStart:
			CurrentSet = 0;
    186a:	10 92 ea 08 	sts	0x08EA, r1
    186e:	10 92 e9 08 	sts	0x08E9, r1
			swMainAlg = cswStartModemConnectionSpeed;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	04 c1       	rjmp	.+520    	; 0x1a80 <MainAlg+0x25e>
			//swMainAlg = cswStartInitModem;
		break;
		
		case cswStartModemConnectionSpeed:
			if (baudIndex >= sizeOfBaudRates) {
    1878:	20 91 f2 07 	lds	r18, 0x07F2
    187c:	30 91 f3 07 	lds	r19, 0x07F3
    1880:	80 91 53 06 	lds	r24, 0x0653
    1884:	90 91 54 06 	lds	r25, 0x0654
    1888:	28 17       	cp	r18, r24
    188a:	39 07       	cpc	r19, r25
    188c:	24 f0       	brlt	.+8      	; 0x1896 <MainAlg+0x74>
				baudIndex = 0;
    188e:	10 92 f3 07 	sts	0x07F3, r1
    1892:	10 92 f2 07 	sts	0x07F2, r1
			}
			
			currentBaudRate = baudRates[baudIndex];
    1896:	e0 91 f2 07 	lds	r30, 0x07F2
    189a:	f0 91 f3 07 	lds	r31, 0x07F3
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	e1 5c       	subi	r30, 0xC1	; 193
    18a8:	f9 4f       	sbci	r31, 0xF9	; 249
    18aa:	c0 80       	ld	r12, Z
    18ac:	d1 80       	ldd	r13, Z+1	; 0x01
    18ae:	e2 80       	ldd	r14, Z+2	; 0x02
    18b0:	f3 80       	ldd	r15, Z+3	; 0x03
			USART0_Int_Init(BAUD(currentBaudRate));
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	78 e0       	ldi	r23, 0x08	; 8
    18b6:	87 e0       	ldi	r24, 0x07	; 7
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a7 01       	movw	r20, r14
    18bc:	96 01       	movw	r18, r12
    18be:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__udivmodsi4>
    18c2:	da 01       	movw	r26, r20
    18c4:	c9 01       	movw	r24, r18
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <USART0_Int_Init>
			sprintf(baudRateStr, "%ld", currentBaudRate);
    18cc:	8d b7       	in	r24, 0x3d	; 61
    18ce:	9e b7       	in	r25, 0x3e	; 62
    18d0:	08 97       	sbiw	r24, 0x08	; 8
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	9e bf       	out	0x3e, r25	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	8d bf       	out	0x3d, r24	; 61
    18dc:	ed b7       	in	r30, 0x3d	; 61
    18de:	fe b7       	in	r31, 0x3e	; 62
    18e0:	31 96       	adiw	r30, 0x01	; 1
    18e2:	8e 01       	movw	r16, r28
    18e4:	0f 5f       	subi	r16, 0xFF	; 255
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	ad b7       	in	r26, 0x3d	; 61
    18ea:	be b7       	in	r27, 0x3e	; 62
    18ec:	12 96       	adiw	r26, 0x02	; 2
    18ee:	1c 93       	st	X, r17
    18f0:	0e 93       	st	-X, r16
    18f2:	11 97       	sbiw	r26, 0x01	; 1
    18f4:	83 ef       	ldi	r24, 0xF3	; 243
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	93 83       	std	Z+3, r25	; 0x03
    18fa:	82 83       	std	Z+2, r24	; 0x02
    18fc:	c4 82       	std	Z+4, r12	; 0x04
    18fe:	d5 82       	std	Z+5, r13	; 0x05
    1900:	e6 82       	std	Z+6, r14	; 0x06
    1902:	f7 82       	std	Z+7, r15	; 0x07
    1904:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <sprintf>
			strcat(baudRateStr, "\r\n");
    1908:	8d b7       	in	r24, 0x3d	; 61
    190a:	9e b7       	in	r25, 0x3e	; 62
    190c:	08 96       	adiw	r24, 0x08	; 8
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	9e bf       	out	0x3e, r25	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	8d bf       	out	0x3d, r24	; 61
    1918:	c8 01       	movw	r24, r16
    191a:	66 e4       	ldi	r22, 0x46	; 70
    191c:	71 e0       	ldi	r23, 0x01	; 1
    191e:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
			PutPC(baudRateStr);
    1922:	c8 01       	movw	r24, r16
    1924:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
			baudIndex++;
    1928:	80 91 f2 07 	lds	r24, 0x07F2
    192c:	90 91 f3 07 	lds	r25, 0x07F3
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	90 93 f3 07 	sts	0x07F3, r25
    1936:	80 93 f2 07 	sts	0x07F2, r24
			
			MarkDelay(&TMainAlg, &swMainAlg, cswModemConnectionSpeed01);
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	98 e0       	ldi	r25, 0x08	; 8
    193e:	6d ee       	ldi	r22, 0xED	; 237
    1940:	77 e0       	ldi	r23, 0x07	; 7
    1942:	43 e0       	ldi	r20, 0x03	; 3
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <MarkDelay>
    194a:	55 c1       	rjmp	.+682    	; 0x1bf6 <MainAlg+0x3d4>
		break;
		
		case cswModemConnectionSpeed01:
			WaitDelayAndGoTo(TMainAlg, 500, &swMainAlg, cswModemConnectionSpeed02);
    194c:	80 91 aa 08 	lds	r24, 0x08AA
    1950:	90 91 ab 08 	lds	r25, 0x08AB
    1954:	64 ef       	ldi	r22, 0xF4	; 244
    1956:	71 e0       	ldi	r23, 0x01	; 1
    1958:	4d ee       	ldi	r20, 0xED	; 237
    195a:	57 e0       	ldi	r21, 0x07	; 7
    195c:	24 e0       	ldi	r18, 0x04	; 4
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	0e 94 1e 10 	call	0x203c	; 0x203c <WaitDelayAndGoTo>
    1964:	48 c1       	rjmp	.+656    	; 0x1bf6 <MainAlg+0x3d4>
		break;
		
		case cswModemConnectionSpeed02:
			DoCommand(&TMainAlg, "AT\r\n", &swMainAlg, cswModemConnectionSpeed03);
    1966:	8a ea       	ldi	r24, 0xAA	; 170
    1968:	98 e0       	ldi	r25, 0x08	; 8
    196a:	67 ef       	ldi	r22, 0xF7	; 247
    196c:	71 e0       	ldi	r23, 0x01	; 1
    196e:	4d ee       	ldi	r20, 0xED	; 237
    1970:	57 e0       	ldi	r21, 0x07	; 7
    1972:	25 e0       	ldi	r18, 0x05	; 5
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	30 c0       	rjmp	.+96     	; 0x19d8 <MainAlg+0x1b6>
		break;
		
		case cswModemConnectionSpeed03:
			WaitAnswer(TMainAlg, "OK", 1000, &swMainAlg, cswStartInitModem, cswStartModemConnectionSpeed);
    1978:	80 91 aa 08 	lds	r24, 0x08AA
    197c:	90 91 ab 08 	lds	r25, 0x08AB
    1980:	62 e5       	ldi	r22, 0x52	; 82
    1982:	71 e0       	ldi	r23, 0x01	; 1
    1984:	48 ee       	ldi	r20, 0xE8	; 232
    1986:	53 e0       	ldi	r21, 0x03	; 3
    1988:	2d ee       	ldi	r18, 0xED	; 237
    198a:	37 e0       	ldi	r19, 0x07	; 7
    198c:	06 e0       	ldi	r16, 0x06	; 6
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	b2 e0       	ldi	r27, 0x02	; 2
    1992:	eb 2e       	mov	r14, r27
    1994:	f1 2c       	mov	r15, r1
    1996:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
    199a:	2d c1       	rjmp	.+602    	; 0x1bf6 <MainAlg+0x3d4>
		break;
		
		case cswStartInitModem:
			if (CurrentSet >= cFirstSettsCount) {
    199c:	20 91 e9 08 	lds	r18, 0x08E9
    19a0:	30 91 ea 08 	lds	r19, 0x08EA
    19a4:	27 30       	cpi	r18, 0x07	; 7
    19a6:	31 05       	cpc	r19, r1
    19a8:	34 f0       	brlt	.+12     	; 0x19b6 <MainAlg+0x194>
				SetIndBits(0); //OutInd();
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
				swMainAlg = cswWaitReady;
    19b0:	88 e0       	ldi	r24, 0x08	; 8
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	65 c0       	rjmp	.+202    	; 0x1a80 <MainAlg+0x25e>
			}
			else {
				DoCommand(&TMainAlg, FirstSetts[CurrentSet].CMDName, &swMainAlg, cswInitModem);
    19b6:	84 e1       	ldi	r24, 0x14	; 20
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	28 9f       	mul	r18, r24
    19bc:	b0 01       	movw	r22, r0
    19be:	29 9f       	mul	r18, r25
    19c0:	70 0d       	add	r23, r0
    19c2:	38 9f       	mul	r19, r24
    19c4:	70 0d       	add	r23, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	6d 54       	subi	r22, 0x4D	; 77
    19ca:	7a 4f       	sbci	r23, 0xFA	; 250
    19cc:	8a ea       	ldi	r24, 0xAA	; 170
    19ce:	98 e0       	ldi	r25, 0x08	; 8
    19d0:	4d ee       	ldi	r20, 0xED	; 237
    19d2:	57 e0       	ldi	r21, 0x07	; 7
    19d4:	27 e0       	ldi	r18, 0x07	; 7
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
    19dc:	0c c1       	rjmp	.+536    	; 0x1bf6 <MainAlg+0x3d4>
			}
		break;
		
		case cswInitModem:
			//if (WaitAnswer(TPrevWriteSettings, "OK", 2000, &swMainAlg, cswStartInitModem, cswStartInitModem)) CurrentSet++;
			if (WaitAnswer(TMainAlg, "OK", 2000, &swMainAlg, cswStartInitModem, cswStartInitModem)) 
    19de:	80 91 aa 08 	lds	r24, 0x08AA
    19e2:	90 91 ab 08 	lds	r25, 0x08AB
    19e6:	62 e5       	ldi	r22, 0x52	; 82
    19e8:	71 e0       	ldi	r23, 0x01	; 1
    19ea:	40 ed       	ldi	r20, 0xD0	; 208
    19ec:	57 e0       	ldi	r21, 0x07	; 7
    19ee:	2d ee       	ldi	r18, 0xED	; 237
    19f0:	37 e0       	ldi	r19, 0x07	; 7
    19f2:	06 e0       	ldi	r16, 0x06	; 6
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	a6 e0       	ldi	r26, 0x06	; 6
    19f8:	ea 2e       	mov	r14, r26
    19fa:	f1 2c       	mov	r15, r1
    19fc:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
    1a00:	88 23       	and	r24, r24
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <MainAlg+0x1e4>
    1a04:	f8 c0       	rjmp	.+496    	; 0x1bf6 <MainAlg+0x3d4>
				CurrentSet++;
    1a06:	80 91 e9 08 	lds	r24, 0x08E9
    1a0a:	90 91 ea 08 	lds	r25, 0x08EA
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	90 93 ea 08 	sts	0x08EA, r25
    1a14:	80 93 e9 08 	sts	0x08E9, r24
    1a18:	ee c0       	rjmp	.+476    	; 0x1bf6 <MainAlg+0x3d4>
				RetVal = 100;
			swMainAlg = csw010;
		break;
		*/
		case cswWaitReady:
			DoCommand(&TMainAlg, "at+creg?\r\n", &swMainAlg, csw010);
    1a1a:	8a ea       	ldi	r24, 0xAA	; 170
    1a1c:	98 e0       	ldi	r25, 0x08	; 8
    1a1e:	6c ef       	ldi	r22, 0xFC	; 252
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	4d ee       	ldi	r20, 0xED	; 237
    1a24:	57 e0       	ldi	r21, 0x07	; 7
    1a26:	25 e2       	ldi	r18, 0x25	; 37
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	0e 94 02 10 	call	0x2004	; 0x2004 <DoCommand>
			swIndik = cswWaitReady;
    1a2e:	88 e0       	ldi	r24, 0x08	; 8
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	39 c0       	rjmp	.+114    	; 0x1aa6 <MainAlg+0x284>
		break;
		case csw010:
			if (WaitAnswer(TMainAlg, "+CREG: 1,1", 2000, &swMainAlg, cswOKWaitReady, cswWaitReady)) {
    1a34:	80 91 aa 08 	lds	r24, 0x08AA
    1a38:	90 91 ab 08 	lds	r25, 0x08AB
    1a3c:	67 e0       	ldi	r22, 0x07	; 7
    1a3e:	72 e0       	ldi	r23, 0x02	; 2
    1a40:	40 ed       	ldi	r20, 0xD0	; 208
    1a42:	57 e0       	ldi	r21, 0x07	; 7
    1a44:	2d ee       	ldi	r18, 0xED	; 237
    1a46:	37 e0       	ldi	r19, 0x07	; 7
    1a48:	0a e0       	ldi	r16, 0x0A	; 10
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	f8 e0       	ldi	r31, 0x08	; 8
    1a4e:	ef 2e       	mov	r14, r31
    1a50:	f1 2c       	mov	r15, r1
    1a52:	0e 94 4c 10 	call	0x2098	; 0x2098 <WaitAnswer>
    1a56:	88 23       	and	r24, r24
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <MainAlg+0x242>
				waitReadyBadCount++;
    1a5a:	80 91 f0 07 	lds	r24, 0x07F0
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	80 93 f0 07 	sts	0x07F0, r24
			}
			
			if (waitReadyBadCount > 8) {
    1a64:	80 91 f0 07 	lds	r24, 0x07F0
    1a68:	89 30       	cpi	r24, 0x09	; 9
    1a6a:	0c f4       	brge	.+2      	; 0x1a6e <MainAlg+0x24c>
    1a6c:	c4 c0       	rjmp	.+392    	; 0x1bf6 <MainAlg+0x3d4>
				swMainAlg = cswERRORWaitReady;
    1a6e:	89 e0       	ldi	r24, 0x09	; 9
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	90 93 ee 07 	sts	0x07EE, r25
    1a76:	80 93 ed 07 	sts	0x07ED, r24
    1a7a:	15 c0       	rjmp	.+42     	; 0x1aa6 <MainAlg+0x284>
		break;
		case cswERRORWaitReady:
			RetVal = 100;
		break;
		case cswOKWaitReady:
			swMainAlg = cswReadSettings;
    1a7c:	8b e0       	ldi	r24, 0x0B	; 11
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	90 93 ee 07 	sts	0x07EE, r25
    1a84:	80 93 ed 07 	sts	0x07ED, r24
    1a88:	b6 c0       	rjmp	.+364    	; 0x1bf6 <MainAlg+0x3d4>
		//------------ ----------------------------------------------------------
		
		//------------ ----------------------------------------------------------
		//------------ Читаем номера и настройки из телефонной книги ------------
		case cswReadSettings:
			swReadSettings = cswStart;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	90 93 d8 07 	sts	0x07D8, r25
    1a92:	80 93 d7 07 	sts	0x07D7, r24
			swMainAlg = csw020;
    1a96:	86 e2       	ldi	r24, 0x26	; 38
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	90 93 ee 07 	sts	0x07EE, r25
    1a9e:	80 93 ed 07 	sts	0x07ED, r24
			swIndik = cswReadSettings;
    1aa2:	8b e0       	ldi	r24, 0x0B	; 11
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	90 93 df 07 	sts	0x07DF, r25
    1aaa:	80 93 de 07 	sts	0x07DE, r24
    1aae:	a3 c0       	rjmp	.+326    	; 0x1bf6 <MainAlg+0x3d4>
		break;
		case csw020:
			tmpRet = ReadSettings();
    1ab0:	0e 94 97 09 	call	0x132e	; 0x132e <ReadSettings>
    1ab4:	20 91 d7 07 	lds	r18, 0x07D7
    1ab8:	30 91 d8 07 	lds	r19, 0x07D8
			if ((tmpRet!=0) && (swReadSettings==cswNOK)) { // ошибка сработки
    1abc:	88 23       	and	r24, r24
    1abe:	99 f0       	breq	.+38     	; 0x1ae6 <MainAlg+0x2c4>
    1ac0:	24 33       	cpi	r18, 0x34	; 52
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <MainAlg+0x2a6>
    1ac6:	97 c0       	rjmp	.+302    	; 0x1bf6 <MainAlg+0x3d4>
				swReadSettings=cswIdle;
    1ac8:	10 92 d8 07 	sts	0x07D8, r1
    1acc:	10 92 d7 07 	sts	0x07D7, r1
				swMainAlg = cswWriteSettings;
    1ad0:	8c e0       	ldi	r24, 0x0C	; 12
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	90 93 ee 07 	sts	0x07EE, r25
    1ad8:	80 93 ed 07 	sts	0x07ED, r24
				PutPC("cswWriteSettings\r\n");
    1adc:	82 e1       	ldi	r24, 0x12	; 18
    1ade:	92 e0       	ldi	r25, 0x02	; 2
    1ae0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
    1ae4:	88 c0       	rjmp	.+272    	; 0x1bf6 <MainAlg+0x3d4>
			}
			if ((tmpRet==0) && (swReadSettings==cswOK)) { // отработала нормально
    1ae6:	23 33       	cpi	r18, 0x33	; 51
    1ae8:	31 05       	cpc	r19, r1
    1aea:	09 f0       	breq	.+2      	; 0x1aee <MainAlg+0x2cc>
    1aec:	84 c0       	rjmp	.+264    	; 0x1bf6 <MainAlg+0x3d4>
				swReadSettings=cswIdle;
    1aee:	10 92 d8 07 	sts	0x07D8, r1
    1af2:	10 92 d7 07 	sts	0x07D7, r1
    1af6:	59 c0       	rjmp	.+178    	; 0x1baa <MainAlg+0x388>
		//------------ ----------------------------------------------------------

		//------------ ----------------------------------------------------------
		//------------ Записываем номера и настройки
		case cswWriteSettings:
			swWriteSettings = cswStart;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	90 93 d6 07 	sts	0x07D6, r25
    1b00:	80 93 d5 07 	sts	0x07D5, r24
			swMainAlg = csw040;
    1b04:	89 e2       	ldi	r24, 0x29	; 41
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	bb cf       	rjmp	.-138    	; 0x1a80 <MainAlg+0x25e>
		break;
		case csw040:
			tmpRet = WriteSettings();
    1b0a:	0e 94 16 0b 	call	0x162c	; 0x162c <WriteSettings>
    1b0e:	20 91 d5 07 	lds	r18, 0x07D5
    1b12:	30 91 d6 07 	lds	r19, 0x07D6
			if ((tmpRet!=0) && (swWriteSettings==cswNOK)) { // ошибка сработки
    1b16:	88 23       	and	r24, r24
    1b18:	69 f0       	breq	.+26     	; 0x1b34 <MainAlg+0x312>
    1b1a:	24 33       	cpi	r18, 0x34	; 52
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <MainAlg+0x300>
    1b20:	6a c0       	rjmp	.+212    	; 0x1bf6 <MainAlg+0x3d4>
				ModemOnOff();
    1b22:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ModemOnOff>
				swWriteSettings=cswIdle;
    1b26:	10 92 d6 07 	sts	0x07D6, r1
    1b2a:	10 92 d5 07 	sts	0x07D5, r1
				swMainAlg = cswERRORWriteSettings;
    1b2e:	8d e0       	ldi	r24, 0x0D	; 13
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a6 cf       	rjmp	.-180    	; 0x1a80 <MainAlg+0x25e>
			}
			if ((tmpRet==0) && (swWriteSettings==cswOK)) { // отработала нормально
    1b34:	23 33       	cpi	r18, 0x33	; 51
    1b36:	31 05       	cpc	r19, r1
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <MainAlg+0x31a>
    1b3a:	5d c0       	rjmp	.+186    	; 0x1bf6 <MainAlg+0x3d4>
				ModemOnOff();
    1b3c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ModemOnOff>
				swWriteSettings=cswIdle;
    1b40:	10 92 d6 07 	sts	0x07D6, r1
    1b44:	10 92 d5 07 	sts	0x07D5, r1
				swMainAlg = cswENDWriteSettings;
    1b48:	8e e0       	ldi	r24, 0x0E	; 14
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	99 cf       	rjmp	.-206    	; 0x1a80 <MainAlg+0x25e>
		//------------ ----------------------------------------------------------
		
		//------------ ----------------------------------------------------------
		//------------ Проверяем счет -------------------------------------------
		case cswStartBilling:
			swTryBilling = cswStart;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	90 93 db 07 	sts	0x07DB, r25
    1b56:	80 93 da 07 	sts	0x07DA, r24
			swMainAlg = cswBilling;
    1b5a:	88 e1       	ldi	r24, 0x18	; 24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	90 cf       	rjmp	.-224    	; 0x1a80 <MainAlg+0x25e>
		break;
		case cswBilling:
			TryBilling();
    1b60:	0e 94 43 07 	call	0xe86	; 0xe86 <TryBilling>
			switch (swTryBilling) {
    1b64:	80 91 da 07 	lds	r24, 0x07DA
    1b68:	90 91 db 07 	lds	r25, 0x07DB
    1b6c:	8a 31       	cpi	r24, 0x1A	; 26
    1b6e:	91 05       	cpc	r25, r1
    1b70:	71 f0       	breq	.+28     	; 0x1b8e <MainAlg+0x36c>
    1b72:	83 33       	cpi	r24, 0x33	; 51
    1b74:	91 05       	cpc	r25, r1
    1b76:	e1 f0       	breq	.+56     	; 0x1bb0 <MainAlg+0x38e>
    1b78:	49 97       	sbiw	r24, 0x19	; 25
    1b7a:	e9 f5       	brne	.+122    	; 0x1bf6 <MainAlg+0x3d4>
				case cswCantConnectBill:
					if (IsDebug()) { //!#ifdef M_DEBUG
    1b7c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
    1b80:	88 23       	and	r24, r24
    1b82:	79 f0       	breq	.+30     	; 0x1ba2 <MainAlg+0x380>
						PutPC("cswCantConnectBill\r\n");
    1b84:	85 e2       	ldi	r24, 0x25	; 37
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
    1b8c:	0a c0       	rjmp	.+20     	; 0x1ba2 <MainAlg+0x380>
					} //#endif
					swTryBilling = cswIdle;
					swMainAlg = cswStartWork;
				break;
				case cswLittleMoney:
					if (IsDebug()) { //!#ifdef M_DEBUG
    1b8e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
    1b92:	88 23       	and	r24, r24
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <MainAlg+0x37c>
						PutPC("cswLittleMoney\r\n");
    1b96:	8a e3       	ldi	r24, 0x3A	; 58
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
					} //#endif
					flMoreThenMax = 0;
    1b9e:	10 92 b2 05 	sts	0x05B2, r1
					swTryBilling = cswIdle;
    1ba2:	10 92 db 07 	sts	0x07DB, r1
    1ba6:	10 92 da 07 	sts	0x07DA, r1
					swMainAlg = cswStartWork;
    1baa:	8f e0       	ldi	r24, 0x0F	; 15
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	68 cf       	rjmp	.-304    	; 0x1a80 <MainAlg+0x25e>
					//!!!!!отослать СМС мало денег и подождать его выполнения
				break;
				case cswOK:
					if (IsDebug()) { //!#ifdef M_DEBUG
    1bb0:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
    1bb4:	88 23       	and	r24, r24
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <MainAlg+0x39e>
						PutPC("cswOK\r\n");
    1bb8:	8b e4       	ldi	r24, 0x4B	; 75
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
					} //#endif
					flMoreThenMax = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 93 b2 05 	sts	0x05B2, r24
    1bc6:	ed cf       	rjmp	.-38     	; 0x1ba2 <MainAlg+0x380>
		//------------ ----------------------------------------------------------
		
		//------------ ----------------------------------------------------------
		//------------ Все данные есть - можем спокойненько работать ------------
		case cswStartWork:
			swWork = cswWork;
    1bc8:	80 e1       	ldi	r24, 0x10	; 16
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	90 93 e7 07 	sts	0x07E7, r25
    1bd0:	80 93 e6 07 	sts	0x07E6, r24
			swMainAlg = cswWork;
    1bd4:	90 93 ee 07 	sts	0x07EE, r25
    1bd8:	80 93 ed 07 	sts	0x07ED, r24
			swIndik = cswStartWork;
    1bdc:	8f e0       	ldi	r24, 0x0F	; 15
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	90 93 df 07 	sts	0x07DF, r25
    1be4:	80 93 de 07 	sts	0x07DE, r24
			swAlgTermSirena = cswIdle;
    1be8:	10 92 f7 07 	sts	0x07F7, r1
    1bec:	10 92 f6 07 	sts	0x07F6, r1
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <MainAlg+0x3d4>
		break;
		case cswWork:
			Work();
    1bf2:	0e 94 17 05 	call	0xa2e	; 0xa2e <Work>
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
		break;
		//------------ END Все данные есть - можем спокойненько работать --------
		//------------ ----------------------------------------------------------
	}
	
	Indik();
    1bf8:	0e 94 95 02 	call	0x52a	; 0x52a <Indik>
	
	return RetVal;
}
    1bfc:	81 2f       	mov	r24, r17
    1bfe:	cc 59       	subi	r28, 0x9C	; 156
    1c00:	df 4f       	sbci	r29, 0xFF	; 255
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	08 95       	ret

00001c1e <main>:


//------------------------------------------------------------------------------------


int main (void) {
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
	//MDelay(1000);

	//sei();

	TermInit();
	swMainAlg = cswStart;
    1c24:	c1 e0       	ldi	r28, 0x01	; 1
    1c26:	d0 e0       	ldi	r29, 0x00	; 0
		if (tmp_flIsReaded) {
			cli();
			strncpy(FromModemBuf, PromFromModemBuf, MAX_BUF-1);
			tmp_flIsReaded = 0;
			sei();
			flIsReaded = 1;
    1c28:	11 e0       	ldi	r17, 0x01	; 1

int main (void) {

LStart:

	cli();
    1c2a:	f8 94       	cli
	initTimer();
    1c2c:	0e 94 c9 00 	call	0x192	; 0x192 <initTimer>
	//disable_interrupt();
	//SREG = SREG & 0b01111111;


flIsReaded=0; 
    1c30:	10 92 83 09 	sts	0x0983, r1
tmpFromModemBufLen = 0;
    1c34:	10 92 e3 0b 	sts	0x0BE3, r1
    1c38:	10 92 e2 0b 	sts	0x0BE2, r1
FromModemBufLen = 0;
    1c3c:	10 92 13 0d 	sts	0x0D13, r1
    1c40:	10 92 12 0d 	sts	0x0D12, r1


	// инициализация входов/выходов
	InitInsOuts();
    1c44:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <InitInsOuts>
	MDelay(1000);
    1c48:	88 ee       	ldi	r24, 0xE8	; 232
    1c4a:	93 e0       	ldi	r25, 0x03	; 3
    1c4c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDelay>
	
	SetIndBits(0b00000010);OutInd(); //!!!
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
    1c56:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <OutInd>

	// инициализация СОМ портов
	USART1_Init(BAUD(57600));	// внешний порт
    1c5a:	87 e0       	ldi	r24, 0x07	; 7
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <USART1_Init>
	USART0_Int_Init(BAUD(9600));	// модем
    1c62:	8f e2       	ldi	r24, 0x2F	; 47
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <USART0_Int_Init>
	MDelay(3000);
    1c6a:	88 eb       	ldi	r24, 0xB8	; 184
    1c6c:	9b e0       	ldi	r25, 0x0B	; 11
    1c6e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDelay>
	SetIndBits(0b00000001);OutInd(); //!!!
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
    1c78:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <OutInd>

	// включение модема
	ModemOnOff();
    1c7c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ModemOnOff>
	MDelay(3000);
    1c80:	88 eb       	ldi	r24, 0xB8	; 184
    1c82:	9b e0       	ldi	r25, 0x0B	; 11
    1c84:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDelay>
	
	sei();
    1c88:	78 94       	sei
	
	SetIndBits(0b00000010);OutInd(); //!!!
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <SetIndBits>
    1c90:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <OutInd>
	
	if (IsDebug()) { //!#ifdef M_DEBUG
    1c94:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
    1c98:	88 23       	and	r24, r24
    1c9a:	21 f0       	breq	.+8      	; 0x1ca4 <main+0x86>
		PutPC("\r\nSTART\r\n");
    1c9c:	87 e5       	ldi	r24, 0x57	; 87
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
    1ca0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
	} //!#endif
	
	PutModem("AT\r\n");
    1ca4:	81 e6       	ldi	r24, 0x61	; 97
    1ca6:	92 e0       	ldi	r25, 0x02	; 2
    1ca8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <PutModem>

	//MDelay(1000);

	//sei();

	TermInit();
    1cac:	0e 94 b6 14 	call	0x296c	; 0x296c <TermInit>
	swMainAlg = cswStart;
    1cb0:	d0 93 ee 07 	sts	0x07EE, r29
    1cb4:	c0 93 ed 07 	sts	0x07ED, r28
	
	while (1) {

		DIn();
    1cb8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <DIn>

		if (IsDebug()) { //!#ifdef M_DEBUG
    1cbc:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
    1cc0:	88 23       	and	r24, r24
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <main+0xc6>
			if (USART1_Receive(&ResCharP)) {
    1cc4:	85 ee       	ldi	r24, 0xE5	; 229
    1cc6:	98 e0       	ldi	r25, 0x08	; 8
    1cc8:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <USART1_Receive>
    1ccc:	88 23       	and	r24, r24
    1cce:	51 f0       	breq	.+20     	; 0x1ce4 <main+0xc6>
				char Ret = ProcessKey(ResCharP);
    1cd0:	80 91 e5 08 	lds	r24, 0x08E5
    1cd4:	0e 94 85 12 	call	0x250a	; 0x250a <ProcessKey>
				//if (Ret == 0x27) break; // выход
				if (Ret != 1) USART0_Transmit(ResCharP);
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	21 f0       	breq	.+8      	; 0x1ce4 <main+0xc6>
    1cdc:	80 91 e5 08 	lds	r24, 0x08E5
    1ce0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <USART0_Transmit>
			}
		} //!#endif
		
		//ReadStringModem();
		//
		if (tmp_flIsReaded) {
    1ce4:	80 91 14 0d 	lds	r24, 0x0D14
    1ce8:	88 23       	and	r24, r24
    1cea:	d1 f0       	breq	.+52     	; 0x1d20 <main+0x102>
			cli();
    1cec:	f8 94       	cli
			strncpy(FromModemBuf, PromFromModemBuf, MAX_BUF-1);
    1cee:	8a e7       	ldi	r24, 0x7A	; 122
    1cf0:	9c e0       	ldi	r25, 0x0C	; 12
    1cf2:	64 ee       	ldi	r22, 0xE4	; 228
    1cf4:	7b e0       	ldi	r23, 0x0B	; 11
    1cf6:	45 e9       	ldi	r20, 0x95	; 149
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
			tmp_flIsReaded = 0;
    1cfe:	10 92 14 0d 	sts	0x0D14, r1
			sei();
    1d02:	78 94       	sei
			flIsReaded = 1;
    1d04:	10 93 83 09 	sts	0x0983, r17
			
			if (IsDebug()) { //!#ifdef M_DEBUG
    1d08:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <IsDebug>
    1d0c:	88 23       	and	r24, r24
    1d0e:	41 f0       	breq	.+16     	; 0x1d20 <main+0x102>
				PutPC(FromModemBuf);
    1d10:	8a e7       	ldi	r24, 0x7A	; 122
    1d12:	9c e0       	ldi	r25, 0x0C	; 12
    1d14:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
				PutPC("\r\n");
    1d18:	86 e6       	ldi	r24, 0x66	; 102
    1d1a:	92 e0       	ldi	r25, 0x02	; 2
    1d1c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
		*/
//		PutPCCharsN(tmpS, 1);
//		PutPC("<\r\n");
		
		// --------- отработка алгоритмов
		char retMain = MainAlg();
    1d20:	0e 94 11 0c 	call	0x1822	; 0x1822 <MainAlg>
		if (retMain == 100) goto LStart;
    1d24:	84 36       	cpi	r24, 0x64	; 100
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <main+0x10c>
    1d28:	80 cf       	rjmp	.-256    	; 0x1c2a <main+0xc>

		if (flIsReaded != 0) {
    1d2a:	80 91 83 09 	lds	r24, 0x0983
    1d2e:	88 23       	and	r24, r24
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <main+0x118>
			flIsReaded = 0;
    1d32:	10 92 83 09 	sts	0x0983, r1
		}
		// --------- END отработка алгоритмов

		DOut();
    1d36:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <DOut>
		OutInd();
    1d3a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <OutInd>
    1d3e:	bc cf       	rjmp	.-136    	; 0x1cb8 <main+0x9a>

00001d40 <USART0_Init>:
//------------------------------------------------------------------------------------


void USART0_Init(unsigned int baud) {
	// Установка скорости связи 
	UBRR0H = (unsigned char)(baud>>8);
    1d40:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = (unsigned char)baud;
    1d44:	89 b9       	out	0x09, r24	; 9
	// Разрешение работы передатчика и приемника 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1d46:	88 e1       	ldi	r24, 0x18	; 24
    1d48:	8a b9       	out	0x0a, r24	; 10
	// Установка формата посылки: 8 бит данных, 1 стоп-бита 
	//UCSR0C = (3<<UCSZ0);
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1d4a:	86 e0       	ldi	r24, 0x06	; 6
    1d4c:	80 93 95 00 	sts	0x0095, r24
	//UCSR0B=0xd8;
	//UCSR0C=0x86;
}
    1d50:	08 95       	ret

00001d52 <USART0_Int_Init>:
//------------------------------------------------------------------------------------

void USART0_Int_Init(unsigned int baud) {
	// Установка скорости связи 
	UBRR0H = (unsigned char)(baud>>8);
    1d52:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = (unsigned char)baud;
    1d56:	89 b9       	out	0x09, r24	; 9
	// Разрешение работы передатчика и приемника 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1d58:	88 e1       	ldi	r24, 0x18	; 24
    1d5a:	8a b9       	out	0x0a, r24	; 10
	// Установка формата посылки: 8 бит данных, 1 стоп-бита 
	//UCSR0C = (3<<UCSZ0);
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1d5c:	86 e0       	ldi	r24, 0x06	; 6
    1d5e:	80 93 95 00 	sts	0x0095, r24
	//Однако прерывание не будет вызываться, если микроконтроллеру этого не указать. 
	//В нашем случае для этого используется бит RXCIE в регистре UCSRB
	UCSR0B |= (1 << RXCIE0);
    1d62:	57 9a       	sbi	0x0a, 7	; 10
}
    1d64:	08 95       	ret

00001d66 <USART1_Init>:
//------------------------------------------------------------------------------------


void USART1_Init(unsigned int baud) {
	// Установка скорости связи 
	UBRR1H = (unsigned char)(baud>>8);
    1d66:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)baud;
    1d6a:	80 93 99 00 	sts	0x0099, r24
	// Разрешение работы передатчика и приемника 
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    1d6e:	88 e1       	ldi	r24, 0x18	; 24
    1d70:	80 93 9a 00 	sts	0x009A, r24
	// Установка формата посылки: 8 бит данных, 1 стоп-бита 
	//UCSR1C = (3<<UCSZ0);
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
    1d74:	86 e0       	ldi	r24, 0x06	; 6
    1d76:	80 93 9d 00 	sts	0x009D, r24
	//UCSR1B=0xd8;
	//UCSR1C=0x86;
}
    1d7a:	08 95       	ret

00001d7c <USART0_Transmit>:


// Передать байт в модем
void USART0_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика
	while ( !( UCSR0A & (1<<UDRE0)) );
    1d7c:	5d 9b       	sbis	0x0b, 5	; 11
    1d7e:	fe cf       	rjmp	.-4      	; 0x1d7c <USART0_Transmit>
	//Помещение данных в буфер, отправка данных 
	UDR0 = data;
    1d80:	8c b9       	out	0x0c, r24	; 12
}
    1d82:	08 95       	ret

00001d84 <USART1_Transmit>:
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
    1d84:	98 2f       	mov	r25, r24
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    1d86:	80 91 9b 00 	lds	r24, 0x009B
    1d8a:	85 ff       	sbrs	r24, 5
    1d8c:	fc cf       	rjmp	.-8      	; 0x1d86 <USART1_Transmit+0x2>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    1d8e:	90 93 9c 00 	sts	0x009C, r25
}
    1d92:	08 95       	ret

00001d94 <PutModemChar>:


// Передать байт в модем
void USART0_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика
	while ( !( UCSR0A & (1<<UDRE0)) );
    1d94:	5d 9b       	sbis	0x0b, 5	; 11
    1d96:	fe cf       	rjmp	.-4      	; 0x1d94 <PutModemChar>
	//Помещение данных в буфер, отправка данных 
	UDR0 = data;
    1d98:	8c b9       	out	0x0c, r24	; 12
//------------------------------------------------------------------------------------

// Вывод символа в модем
void PutModemChar(char ValChar) {
	USART0_Transmit(ValChar);
}
    1d9a:	08 95       	ret

00001d9c <PutPCChar>:
//------------------------------------------------------------------------------------
// Вывод символа в PC
void PutPCChar(char ValChar) {
    1d9c:	98 2f       	mov	r25, r24
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    1d9e:	80 91 9b 00 	lds	r24, 0x009B
    1da2:	85 ff       	sbrs	r24, 5
    1da4:	fc cf       	rjmp	.-8      	; 0x1d9e <PutPCChar+0x2>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    1da6:	90 93 9c 00 	sts	0x009C, r25
}
//------------------------------------------------------------------------------------
// Вывод символа в PC
void PutPCChar(char ValChar) {
	USART1_Transmit(ValChar);
}
    1daa:	08 95       	ret

00001dac <PutPC>:
		str++;
	}
}
//------------------------------------------------------------------------------------
// Вывод строки в PC
void PutPC(char *str) {
    1dac:	fc 01       	movw	r30, r24
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <PutPC+0x12>
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    1db0:	80 91 9b 00 	lds	r24, 0x009B
    1db4:	85 ff       	sbrs	r24, 5
    1db6:	fc cf       	rjmp	.-8      	; 0x1db0 <PutPC+0x4>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    1db8:	90 93 9c 00 	sts	0x009C, r25
//------------------------------------------------------------------------------------
// Вывод строки в PC
void PutPC(char *str) {
	while (*str) {
		USART1_Transmit(*str);
		str++;
    1dbc:	31 96       	adiw	r30, 0x01	; 1
	}
}
//------------------------------------------------------------------------------------
// Вывод строки в PC
void PutPC(char *str) {
	while (*str) {
    1dbe:	90 81       	ld	r25, Z
    1dc0:	99 23       	and	r25, r25
    1dc2:	b1 f7       	brne	.-20     	; 0x1db0 <PutPC+0x4>
		USART1_Transmit(*str);
		str++;
	}
}
    1dc4:	08 95       	ret

00001dc6 <PutModem>:
	USART1_Transmit(ValChar);
}
//------------------------------------------------------------------------------------

// Вывод строки в модем
void PutModem(char *str) {
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
	PutPC("To Modem->");
    1dcc:	85 e5       	ldi	r24, 0x55	; 85
    1dce:	96 e0       	ldi	r25, 0x06	; 6
    1dd0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
	PutPC(str);
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <PutModem+0x1e>


// Передать байт в модем
void USART0_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика
	while ( !( UCSR0A & (1<<UDRE0)) );
    1ddc:	5d 9b       	sbis	0x0b, 5	; 11
    1dde:	fe cf       	rjmp	.-4      	; 0x1ddc <PutModem+0x16>
	//Помещение данных в буфер, отправка данных 
	UDR0 = data;
    1de0:	8c b9       	out	0x0c, r24	; 12
void PutModem(char *str) {
	PutPC("To Modem->");
	PutPC(str);
	while (*str) {
		USART0_Transmit(*str);
		str++;
    1de2:	21 96       	adiw	r28, 0x01	; 1

// Вывод строки в модем
void PutModem(char *str) {
	PutPC("To Modem->");
	PutPC(str);
	while (*str) {
    1de4:	88 81       	ld	r24, Y
    1de6:	88 23       	and	r24, r24
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <PutModem+0x16>
		USART0_Transmit(*str);
		str++;
	}
}
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <USART0_Receive>:
}
//------------------------------------------------------------------------------------

// Получить байт с модема без ожидания 
//unsigned char USART0_Receive(unsigned char *data) {
char USART0_Receive(char *data) {
    1df0:	fc 01       	movw	r30, r24
	//Ожидание окончания приема данных 
	if ( !(UCSR0A & (1<<RXC0)) ) { // нет данных в буфере чтения
    1df2:	5f 99       	sbic	0x0b, 7	; 11
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <USART0_Receive+0xa>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	08 95       	ret
		return 0;
	}else{
		//Загрузка принятых данных из буфера 
		*data = UDR0;
    1dfa:	8c b1       	in	r24, 0x0c	; 12
    1dfc:	80 83       	st	Z, r24
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	//return 0;
}
    1e00:	08 95       	ret

00001e02 <USART1_Receive>:
//------------------------------------------------------------------------------------

// Получить байт с PC без ожидания 
//unsigned char USART1_Receive(unsigned char *data) {
char USART1_Receive(char *data) {
    1e02:	fc 01       	movw	r30, r24
	//Ожидание окончания приема данных 
	if ( !(UCSR1A & (1<<RXC1)) ) { // нет данных в буфере чтения
    1e04:	80 91 9b 00 	lds	r24, 0x009B
    1e08:	87 fd       	sbrc	r24, 7
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <USART1_Receive+0xe>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	08 95       	ret
		return 0;
	}else{
		//Загрузка принятых данных из буфера 
		*data = UDR1;
    1e10:	80 91 9c 00 	lds	r24, 0x009C
    1e14:	80 83       	st	Z, r24
    1e16:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	//return 0;
}
    1e18:	08 95       	ret

00001e1a <Wait>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
    1e1a:	1f 93       	push	r17
    1e1c:	a0 91 19 0d 	lds	r26, 0x0D19
    1e20:	b0 91 1a 0d 	lds	r27, 0x0D1A
    1e24:	20 91 1b 0d 	lds	r18, 0x0D1B
    1e28:	30 91 1c 0d 	lds	r19, 0x0D1C
    1e2c:	40 91 17 0d 	lds	r20, 0x0D17
    1e30:	50 91 18 0d 	lds	r21, 0x0D18
    1e34:	e0 e0       	ldi	r30, 0x00	; 0
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	1a c0       	rjmp	.+52     	; 0x1e6e <Wait+0x54>
	for(i=0;i<n;i++){
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <Wait+0x32>
		for(j=0;j<100;j++){
			for(k=0;k<65000;k++){
				l = k; l = l / 2;
    1e44:	d9 01       	movw	r26, r18
    1e46:	b6 95       	lsr	r27
    1e48:	a7 95       	ror	r26
    1e4a:	9b 01       	movw	r18, r22
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	6f 5f       	subi	r22, 0xFF	; 255
    1e50:	7f 4f       	sbci	r23, 0xFF	; 255

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
	for(i=0;i<n;i++){
		for(j=0;j<100;j++){
			for(k=0;k<65000;k++){
    1e52:	1d ef       	ldi	r17, 0xFD	; 253
    1e54:	69 3e       	cpi	r22, 0xE9	; 233
    1e56:	71 07       	cpc	r23, r17
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <Wait+0x2a>
    1e5a:	4f 5f       	subi	r20, 0xFF	; 255
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
//------------------------------------------------------------------------------------

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
	for(i=0;i<n;i++){
		for(j=0;j<100;j++){
    1e5e:	44 36       	cpi	r20, 0x64	; 100
    1e60:	51 05       	cpc	r21, r1
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <Wait+0x24>
    1e64:	31 96       	adiw	r30, 0x01	; 1
    1e66:	44 e6       	ldi	r20, 0x64	; 100
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	28 ee       	ldi	r18, 0xE8	; 232
    1e6c:	3d ef       	ldi	r19, 0xFD	; 253
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

unsigned int	i, j, k, l;
void Wait(unsigned int n) {
	for(i=0;i<n;i++){
    1e6e:	e8 17       	cp	r30, r24
    1e70:	f9 07       	cpc	r31, r25
    1e72:	18 f3       	brcs	.-58     	; 0x1e3a <Wait+0x20>
    1e74:	b0 93 1a 0d 	sts	0x0D1A, r27
    1e78:	a0 93 19 0d 	sts	0x0D19, r26
    1e7c:	30 93 1c 0d 	sts	0x0D1C, r19
    1e80:	20 93 1b 0d 	sts	0x0D1B, r18
    1e84:	50 93 18 0d 	sts	0x0D18, r21
    1e88:	40 93 17 0d 	sts	0x0D17, r20
    1e8c:	f0 93 1e 0d 	sts	0x0D1E, r31
    1e90:	e0 93 1d 0d 	sts	0x0D1D, r30
			for(k=0;k<65000;k++){
				l = k; l = l / 2;
			}
		}
	}
}
    1e94:	1f 91       	pop	r17
    1e96:	08 95       	ret

00001e98 <MDelay>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

int CountTimes;
void MDelay(int ms) {
    1e98:	af 92       	push	r10
    1e9a:	bf 92       	push	r11
    1e9c:	cf 92       	push	r12
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
//	CountTimes = ms / 500;
//	for (i=0; i<CountTimes; i++) {
		//_delay_ms(10000);
		_delay_ms(ms);
    1ea8:	aa 27       	eor	r26, r26
    1eaa:	97 fd       	sbrc	r25, 7
    1eac:	a0 95       	com	r26
    1eae:	ba 2f       	mov	r27, r26
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__floatsisf>
    1eb8:	5b 01       	movw	r10, r22
    1eba:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	26 e6       	ldi	r18, 0x66	; 102
    1ebe:	36 e6       	ldi	r19, 0x66	; 102
    1ec0:	46 ee       	ldi	r20, 0xE6	; 230
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__mulsf3>
    1ec8:	7b 01       	movw	r14, r22
    1eca:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	1c f4       	brge	.+6      	; 0x1ee2 <MDelay+0x4a>
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	24 c0       	rjmp	.+72     	; 0x1f2a <MDelay+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	b7 01       	movw	r22, r14
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	b4 f4       	brge	.+44     	; 0x1f22 <MDelay+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	c6 01       	movw	r24, r12
    1ef8:	b5 01       	movw	r22, r10
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e2       	ldi	r20, 0x20	; 32
    1f00:	51 e4       	ldi	r21, 0x41	; 65
    1f02:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__mulsf3>
    1f06:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0a:	88 eb       	ldi	r24, 0xB8	; 184
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	05 c0       	rjmp	.+10     	; 0x1f1a <MDelay+0x82>
    1f10:	fc 01       	movw	r30, r24
    1f12:	31 97       	sbiw	r30, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <MDelay+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	61 50       	subi	r22, 0x01	; 1
    1f18:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	61 15       	cp	r22, r1
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	c1 f7       	brne	.-16     	; 0x1f10 <MDelay+0x78>
    1f20:	07 c0       	rjmp	.+14     	; 0x1f30 <MDelay+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	c8 01       	movw	r24, r16
    1f24:	b7 01       	movw	r22, r14
    1f26:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fixunssfsi>
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <MDelay+0x94>
//	}
}
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	df 90       	pop	r13
    1f3a:	cf 90       	pop	r12
    1f3c:	bf 90       	pop	r11
    1f3e:	af 90       	pop	r10
    1f40:	08 95       	ret

00001f42 <InitInsOuts>:
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

void InitInsOuts(void) {
	//DDRG = 0xFF; // весь порт на вывод
	DDRG = 0b00011110; // младший бит на ввод  // для работы отладочного режима
    1f42:	8e e1       	ldi	r24, 0x1E	; 30
    1f44:	80 93 64 00 	sts	0x0064, r24
	DDRD = 0xFF; // весь порт на вывод
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x00; // весь порт на ввод
    1f4c:	12 b8       	out	0x02, r1	; 2
	DDRF = 0x00; // весь порт на ввод
    1f4e:	10 92 61 00 	sts	0x0061, r1
	PORTG = 0b00000010;  // для работы отладочного режима 2-й бит всегда 1
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	80 93 65 00 	sts	0x0065, r24
	PORTD = 0xF0;
    1f58:	80 ef       	ldi	r24, 0xF0	; 240
    1f5a:	82 bb       	out	0x12, r24	; 18
	PORTE = 0x00;
    1f5c:	13 b8       	out	0x03, r1	; 3
}
    1f5e:	08 95       	ret

00001f60 <ModemOnOff>:
// Выключение модема
void ModemOnOff(void) {
//	PORTD = PORTD & 0b11111110;
//	MDelay(500);
	//PORTD = PORTD | 0x01;
	DOuts = DOuts | 0x01;
    1f60:	80 91 69 02 	lds	r24, 0x0269
    1f64:	81 60       	ori	r24, 0x01	; 1
    1f66:	80 93 69 02 	sts	0x0269, r24
void DOut(void) {
	//PORTD = (PORTD&0b00001111) | (DOuts<<4);
	//PORTD = ((PORTD&0x0F) | (DOuts<<4));
	//PORTD = (PIND&0x0F) | ((~(DOuts<<4)) & 0b11110000);
	//PORTD = (PORTD&0x0F) | (DOuts&0xF0);
	PORTD = DOuts;
    1f6a:	82 bb       	out	0x12, r24	; 18
//	PORTD = PORTD & 0b11111110;
//	MDelay(500);
	//PORTD = PORTD | 0x01;
	DOuts = DOuts | 0x01;
	DOut();
	MDelay(1500);
    1f6c:	8c ed       	ldi	r24, 0xDC	; 220
    1f6e:	95 e0       	ldi	r25, 0x05	; 5
    1f70:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDelay>
	//PORTD = PORTD & (~0x01);
	DOuts = DOuts & (~0x01);
    1f74:	80 91 69 02 	lds	r24, 0x0269
    1f78:	8e 7f       	andi	r24, 0xFE	; 254
    1f7a:	80 93 69 02 	sts	0x0269, r24
void DOut(void) {
	//PORTD = (PORTD&0b00001111) | (DOuts<<4);
	//PORTD = ((PORTD&0x0F) | (DOuts<<4));
	//PORTD = (PIND&0x0F) | ((~(DOuts<<4)) & 0b11110000);
	//PORTD = (PORTD&0x0F) | (DOuts&0xF0);
	PORTD = DOuts;
    1f7e:	82 bb       	out	0x12, r24	; 18
	DOuts = DOuts & (~0x01);
	DOut();
//	MDelay(1000);
//	PORTD = PORTD | 0x01;
//	PORTD = PORTD & 0b11111110;
}
    1f80:	08 95       	ret

00001f82 <DIn>:

//------------------------------------------------------------------------------------

void DIn(void) {
	//DIns = ~((PORTE>>4)&0b00001111);
	DIns = (~PINE)&0b11110000;
    1f82:	81 b1       	in	r24, 0x01	; 1
	DIns = DIns^Settings.DInInversion;
    1f84:	80 95       	com	r24
    1f86:	80 7f       	andi	r24, 0xF0	; 240
    1f88:	90 91 e7 08 	lds	r25, 0x08E7
    1f8c:	89 27       	eor	r24, r25
    1f8e:	80 93 11 0d 	sts	0x0D11, r24
}
    1f92:	08 95       	ret

00001f94 <DOut>:
void DOut(void) {
	//PORTD = (PORTD&0b00001111) | (DOuts<<4);
	//PORTD = ((PORTD&0x0F) | (DOuts<<4));
	//PORTD = (PIND&0x0F) | ((~(DOuts<<4)) & 0b11110000);
	//PORTD = (PORTD&0x0F) | (DOuts&0xF0);
	PORTD = DOuts;
    1f94:	80 91 69 02 	lds	r24, 0x0269
    1f98:	82 bb       	out	0x12, r24	; 18
}
    1f9a:	08 95       	ret

00001f9c <OutInd>:
//------------------------------------------------------------------------------------

// реально вывод значений в физический порт
void OutInd(void) {
	//PORTG = ~(IndSate<<3);
	PORTG = ~((IndSate<<3)|1);
    1f9c:	80 91 10 0d 	lds	r24, 0x0D10
    1fa0:	88 0f       	add	r24, r24
    1fa2:	88 0f       	add	r24, r24
    1fa4:	88 0f       	add	r24, r24
    1fa6:	81 60       	ori	r24, 0x01	; 1
    1fa8:	80 95       	com	r24
    1faa:	80 93 65 00 	sts	0x0065, r24
	//PORTG = PORTG | 0b00000010; // для работы отладочного режима 2-й бит всегда 1
	//PORTG&(~((0b00000011&IndSate)<<3));
}
    1fae:	08 95       	ret

00001fb0 <OnIndBit>:
//!!!! ТРЕБУЕТСЯ ПОМНИТЬ, ЧТО ИНДИКАТОРЫ ПОДЖИГАЮТСЯ НИЗКИМ УРОВНЕМ НА ДИСКРЕТНОМ ВЫХОДЕ !!!!
// производит установку соответствующих битов в 1.
// OnBitState принимает значение от 0b00 до 0b11 - в двоичной системе
// если какой-то разряд OnBitState == 0, то установка соответствующего бита не производится
void OnIndBit(unsigned char OnBitState) {
	IndSate = IndSate|(OnBitState);
    1fb0:	90 91 10 0d 	lds	r25, 0x0D10
    1fb4:	98 2b       	or	r25, r24
    1fb6:	90 93 10 0d 	sts	0x0D10, r25
}
    1fba:	08 95       	ret

00001fbc <OffIndBit>:
// производит сброс соответствующих битов в 0.
// OnBitState принимает значение от 0b00 до 0b11 - в двоичной системе
// если какой-то разряд OnBitState == 0, то сброс соответствующего бита не производится
void OffIndBit(unsigned char OffBitState) {
	IndSate = IndSate&(~(OffBitState));
    1fbc:	80 95       	com	r24
    1fbe:	90 91 10 0d 	lds	r25, 0x0D10
    1fc2:	98 23       	and	r25, r24
    1fc4:	90 93 10 0d 	sts	0x0D10, r25
}
    1fc8:	08 95       	ret

00001fca <SetIndBits>:
void SetIndBits(unsigned char NewState) {
	IndSate = NewState;
    1fca:	80 93 10 0d 	sts	0x0D10, r24
}
    1fce:	08 95       	ret

00001fd0 <IsDebug>:
	//if (tmpDIns&0b00010000) return 1; // если включен дискретный вход
	return 1;
	char tmpDIns = PING&0x01;
	if (tmpDIns) return 1; // если включен дискретный вход
	else  return 0;
}
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	08 95       	ret

00001fd4 <MarkDelay>:
	}
	return RetValWaitAnswer;
}
//------------------------------------------------------------------------------------

void MarkDelay(TTime *pDoCommandTimer, int *pswAlgDoCommand, int ValSwOK) {
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	8c 01       	movw	r16, r24
    1fe2:	6b 01       	movw	r12, r22
    1fe4:	7a 01       	movw	r14, r20
	*pDoCommandTimer = GetTime();
    1fe6:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    1fea:	f8 01       	movw	r30, r16
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
	*pswAlgDoCommand = ValSwOK;
    1ff0:	f6 01       	movw	r30, r12
    1ff2:	f1 82       	std	Z+1, r15	; 0x01
    1ff4:	e0 82       	st	Z, r14
}
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	08 95       	ret

00002004 <DoCommand>:
	if (strstr(Str, "OK") == NULL) return 0; // нет такой буквы в этом слове :)
	return 1; // нашли вхождение!
}
//------------------------------------------------------------------------------------

char DoCommand(TTime *pDoCommandTimer, char *DoCommandCmd, int *pswAlgDoCommand, int ValSwOK) {
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	6c 01       	movw	r12, r24
    2012:	cb 01       	movw	r24, r22
    2014:	7a 01       	movw	r14, r20
    2016:	89 01       	movw	r16, r18
	PutModem(DoCommandCmd);
    2018:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <PutModem>
	*pDoCommandTimer = GetTime();
    201c:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2020:	f6 01       	movw	r30, r12
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
	*pswAlgDoCommand = ValSwOK;
    2026:	f7 01       	movw	r30, r14
    2028:	11 83       	std	Z+1, r17	; 0x01
    202a:	00 83       	st	Z, r16
	return 1;
}
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	df 90       	pop	r13
    2038:	cf 90       	pop	r12
    203a:	08 95       	ret

0000203c <WaitDelayAndGoTo>:
void MarkDelay(TTime *pDoCommandTimer, int *pswAlgDoCommand, int ValSwOK) {
	*pDoCommandTimer = GetTime();
	*pswAlgDoCommand = ValSwOK;
}

void WaitDelayAndGoTo(TTime DoCommandTimer, TTime TimeOut, int *pswAlgDoCommand, int ValSwOK) {
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	8c 01       	movw	r16, r24
    2056:	6b 01       	movw	r12, r22
    2058:	4a 01       	movw	r8, r20
    205a:	e9 01       	movw	r28, r18
	if ((GetTime() - DoCommandTimer) >= Ticks(TimeOut)) {
    205c:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2060:	5c 01       	movw	r10, r24
    2062:	ee 24       	eor	r14, r14
    2064:	ff 24       	eor	r15, r15
    2066:	c7 01       	movw	r24, r14
    2068:	b6 01       	movw	r22, r12
    206a:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
    206e:	a0 1a       	sub	r10, r16
    2070:	b1 0a       	sbc	r11, r17
    2072:	a8 16       	cp	r10, r24
    2074:	b9 06       	cpc	r11, r25
    2076:	18 f0       	brcs	.+6      	; 0x207e <WaitDelayAndGoTo+0x42>
		*pswAlgDoCommand = ValSwOK;
    2078:	f4 01       	movw	r30, r8
    207a:	d1 83       	std	Z+1, r29	; 0x01
    207c:	c0 83       	st	Z, r28
	}
}
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	ef 90       	pop	r14
    208a:	df 90       	pop	r13
    208c:	cf 90       	pop	r12
    208e:	bf 90       	pop	r11
    2090:	af 90       	pop	r10
    2092:	9f 90       	pop	r9
    2094:	8f 90       	pop	r8
    2096:	08 95       	ret

00002098 <WaitAnswer>:
	PutModem(DoCommandCmd);
	*pDoCommandTimer = GetTime();
	*pswAlgDoCommand = ValSwOK;
	return 1;
}
char WaitAnswer(TTime DoCommandTimer, char *Answer, TTime TimeOut, int *pswAlgDoCommand, int ValSwOK, int ValSwNoOK) {
    2098:	4f 92       	push	r4
    209a:	5f 92       	push	r5
    209c:	6f 92       	push	r6
    209e:	7f 92       	push	r7
    20a0:	8f 92       	push	r8
    20a2:	9f 92       	push	r9
    20a4:	af 92       	push	r10
    20a6:	bf 92       	push	r11
    20a8:	cf 92       	push	r12
    20aa:	df 92       	push	r13
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	6c 01       	movw	r12, r24
    20ba:	3b 01       	movw	r6, r22
    20bc:	4a 01       	movw	r8, r20
    20be:	e9 01       	movw	r28, r18
    20c0:	28 01       	movw	r4, r16
	char RetValWaitAnswer = 0; // еще работает
	if ((GetTime() - DoCommandTimer) >= Ticks(TimeOut)) {
    20c2:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    20c6:	8c 01       	movw	r16, r24
    20c8:	aa 24       	eor	r10, r10
    20ca:	bb 24       	eor	r11, r11
    20cc:	c5 01       	movw	r24, r10
    20ce:	b4 01       	movw	r22, r8
    20d0:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
    20d4:	0c 19       	sub	r16, r12
    20d6:	1d 09       	sbc	r17, r13
    20d8:	08 17       	cp	r16, r24
    20da:	19 07       	cpc	r17, r25
    20dc:	20 f0       	brcs	.+8      	; 0x20e6 <WaitAnswer+0x4e>
		RetValWaitAnswer = 4; // время прошло, а ответа от модема нет!
		*pswAlgDoCommand = ValSwNoOK;
    20de:	f9 82       	std	Y+1, r15	; 0x01
    20e0:	e8 82       	st	Y, r14
    20e2:	84 e0       	ldi	r24, 0x04	; 4
    20e4:	10 c0       	rjmp	.+32     	; 0x2106 <WaitAnswer+0x6e>
	} else
	if (flIsReaded != 0) {
    20e6:	80 91 83 09 	lds	r24, 0x0983
    20ea:	88 23       	and	r24, r24
    20ec:	59 f0       	breq	.+22     	; 0x2104 <WaitAnswer+0x6c>
		if (strstr(FromModemBuf, Answer)) {
    20ee:	8a e7       	ldi	r24, 0x7A	; 122
    20f0:	9c e0       	ldi	r25, 0x0C	; 12
    20f2:	b3 01       	movw	r22, r6
    20f4:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <strstr>
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	21 f0       	breq	.+8      	; 0x2104 <WaitAnswer+0x6c>
			RetValWaitAnswer = 1; // все хорошо
			*pswAlgDoCommand = ValSwOK;
    20fc:	59 82       	std	Y+1, r5	; 0x01
    20fe:	48 82       	st	Y, r4
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <WaitAnswer+0x6e>
    2104:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return RetValWaitAnswer;
}
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	bf 90       	pop	r11
    2118:	af 90       	pop	r10
    211a:	9f 90       	pop	r9
    211c:	8f 90       	pop	r8
    211e:	7f 90       	pop	r7
    2120:	6f 90       	pop	r6
    2122:	5f 90       	pop	r5
    2124:	4f 90       	pop	r4
    2126:	08 95       	ret

00002128 <IsNewOK>:
	return 1; // нашли вхождение!
}

char IsNewOK(char *Str) {
	//if (strlen(Str) < 2) return 0; // не может быть строка, содержащая СМС
	if (strstr(Str, "OK") == NULL) return 0; // нет такой буквы в этом слове :)
    2128:	60 e6       	ldi	r22, 0x60	; 96
    212a:	76 e0       	ldi	r23, 0x06	; 6
    212c:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <strstr>
    2130:	9c 01       	movw	r18, r24
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	23 2b       	or	r18, r19
    2136:	09 f0       	breq	.+2      	; 0x213a <IsNewOK+0x12>
    2138:	81 e0       	ldi	r24, 0x01	; 1
	return 1; // нашли вхождение!
}
    213a:	08 95       	ret

0000213c <IsNewSMS>:

// Определение является ли строка Str сигналом о том, что пришло новое сообщение.
// +CMTI:"SM",
char IsNewSMS(char *Str) {
	//if (strlen(Str) < 12) return 0; // не может быть строка, содержащая СМС
	if (strstr(Str, "+CMTI:\"SM\"") == NULL) return 0; // нет такой буквы в этом слове :)
    213c:	63 e6       	ldi	r22, 0x63	; 99
    213e:	76 e0       	ldi	r23, 0x06	; 6
    2140:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <strstr>
    2144:	9c 01       	movw	r18, r24
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	23 2b       	or	r18, r19
    214a:	09 f0       	breq	.+2      	; 0x214e <IsNewSMS+0x12>
    214c:	81 e0       	ldi	r24, 0x01	; 1
	return 1; // нашли вхождение!
}
    214e:	08 95       	ret

00002150 <ReadStringModem>:

// Получить байт с модема без ожидания 
//unsigned char USART0_Receive(unsigned char *data) {
char USART0_Receive(char *data) {
	//Ожидание окончания приема данных 
	if ( !(UCSR0A & (1<<RXC0)) ) { // нет данных в буфере чтения
    2150:	5f 99       	sbic	0x0b, 7	; 11
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <ReadStringModem+0x8>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	08 95       	ret
		return 0;
	}else{
		//Загрузка принятых данных из буфера 
		*data = UDR0;
    2158:	9c b1       	in	r25, 0x0c	; 12
    215a:	90 93 e6 08 	sts	0x08E6, r25
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    215e:	80 91 9b 00 	lds	r24, 0x009B
    2162:	85 ff       	sbrs	r24, 5
    2164:	fc cf       	rjmp	.-8      	; 0x215e <ReadStringModem+0xe>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2166:	90 93 9c 00 	sts	0x009C, r25
char ReadStringModem(void) {
	char RetValReadStringModem = 1; // ни один символ не прочитан
	if (USART0_Receive(&ResCharM)) { // получили символ из порта от модема
		USART1_Transmit(ResCharM); //!!!!! тут только для отладки !!!!!
		//USART1_Transmit("2"); //!skjdhaskdh
		if (tmpFromModemBufLen >= (MAX_BUF-5)) {
    216a:	40 91 e2 0b 	lds	r20, 0x0BE2
    216e:	50 91 e3 0b 	lds	r21, 0x0BE3
    2172:	41 39       	cpi	r20, 0x91	; 145
    2174:	51 05       	cpc	r21, r1
    2176:	6c f0       	brlt	.+26     	; 0x2192 <ReadStringModem+0x42>
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    2178:	80 91 9b 00 	lds	r24, 0x009B
    217c:	85 ff       	sbrs	r24, 5
    217e:	fc cf       	rjmp	.-8      	; 0x2178 <ReadStringModem+0x28>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2180:	89 e3       	ldi	r24, 0x39	; 57
    2182:	80 93 9c 00 	sts	0x009C, r24
		USART1_Transmit(ResCharM); //!!!!! тут только для отладки !!!!!
		//USART1_Transmit("2"); //!skjdhaskdh
		if (tmpFromModemBufLen >= (MAX_BUF-5)) {
			RetValReadStringModem = 10; // переполнение буфера, а строка до сих пор не прочитана
			USART1_Transmit('9'); //!skjdhaskdh
			tmpFromModemBufLen = 0; // так себе заглушка
    2186:	10 92 e3 0b 	sts	0x0BE3, r1
    218a:	10 92 e2 0b 	sts	0x0BE2, r1
    218e:	8a e0       	ldi	r24, 0x0A	; 10
    2190:	08 95       	ret
		}
		else {
			RetValReadStringModem = 2;
			tmpFromModemBuf[tmpFromModemBufLen] = ResCharM;
    2192:	fa 01       	movw	r30, r20
    2194:	ec 57       	subi	r30, 0x7C	; 124
    2196:	f6 4f       	sbci	r31, 0xF6	; 246
    2198:	90 83       	st	Z, r25
			if (tmpFromModemBufLen >= 1) {
    219a:	14 16       	cp	r1, r20
    219c:	15 06       	cpc	r1, r21
    219e:	1c f5       	brge	.+70     	; 0x21e6 <ReadStringModem+0x96>
				if ((tmpFromModemBuf[tmpFromModemBufLen-1]==0x0D) && (tmpFromModemBuf[tmpFromModemBufLen]==0x0A)) {
    21a0:	9a 01       	movw	r18, r20
    21a2:	21 50       	subi	r18, 0x01	; 1
    21a4:	30 40       	sbci	r19, 0x00	; 0
    21a6:	f9 01       	movw	r30, r18
    21a8:	ec 57       	subi	r30, 0x7C	; 124
    21aa:	f6 4f       	sbci	r31, 0xF6	; 246
    21ac:	80 81       	ld	r24, Z
    21ae:	8d 30       	cpi	r24, 0x0D	; 13
    21b0:	d1 f4       	brne	.+52     	; 0x21e6 <ReadStringModem+0x96>
    21b2:	9a 30       	cpi	r25, 0x0A	; 10
    21b4:	c1 f4       	brne	.+48     	; 0x21e6 <ReadStringModem+0x96>
					
					tmpFromModemBufLen -= 1; // переопределили длину строки
    21b6:	30 93 e3 0b 	sts	0x0BE3, r19
    21ba:	20 93 e2 0b 	sts	0x0BE2, r18
					tmpFromModemBuf[tmpFromModemBufLen] = 0; // нам в строке не нужны "црлф" - насильно закончили строку
    21be:	10 82       	st	Z, r1
					//USART1_Transmit('5'); //!skjdhaskdh
					FromModemBufLen = tmpFromModemBufLen;
    21c0:	30 93 13 0d 	sts	0x0D13, r19
    21c4:	20 93 12 0d 	sts	0x0D12, r18
					strncpy(FromModemBuf, tmpFromModemBuf, FromModemBufLen+1);
    21c8:	8a e7       	ldi	r24, 0x7A	; 122
    21ca:	9c e0       	ldi	r25, 0x0C	; 12
    21cc:	64 e8       	ldi	r22, 0x84	; 132
    21ce:	79 e0       	ldi	r23, 0x09	; 9
    21d0:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
					tmpFromModemBufLen = 0;
    21d4:	10 92 e3 0b 	sts	0x0BE3, r1
    21d8:	10 92 e2 0b 	sts	0x0BE2, r1
					flIsReaded = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	80 93 83 09 	sts	0x0983, r24
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	08 95       	ret
					RetValReadStringModem = 0; // наконец-то прочли строку до конца! 
					return RetValReadStringModem;
				}
			}
			tmpFromModemBufLen++;
    21e6:	4f 5f       	subi	r20, 0xFF	; 255
    21e8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ea:	50 93 e3 0b 	sts	0x0BE3, r21
    21ee:	40 93 e2 0b 	sts	0x0BE2, r20
    21f2:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return RetValReadStringModem;
}
    21f4:	08 95       	ret

000021f6 <__vector_18>:



//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
ISR(USART0_RX_vect) {
    21f6:	1f 92       	push	r1
    21f8:	0f 92       	push	r0
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	0f 92       	push	r0
    21fe:	0b b6       	in	r0, 0x3b	; 59
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	2f 93       	push	r18
    2206:	3f 93       	push	r19
    2208:	4f 93       	push	r20
    220a:	5f 93       	push	r21
    220c:	6f 93       	push	r22
    220e:	7f 93       	push	r23
    2210:	8f 93       	push	r24
    2212:	9f 93       	push	r25
    2214:	af 93       	push	r26
    2216:	bf 93       	push	r27
    2218:	ef 93       	push	r30
    221a:	ff 93       	push	r31
	// Получаем данные
	char IntResCharM = UDR0;
    221c:	2c b1       	in	r18, 0x0c	; 12
	// Тут мы их обрабатываем
	tmpFromModemBuf[tmpFromModemBufLen++] = IntResCharM; // прочитали символ
    221e:	80 91 e2 0b 	lds	r24, 0x0BE2
    2222:	90 91 e3 0b 	lds	r25, 0x0BE3
    2226:	fc 01       	movw	r30, r24
    2228:	ec 57       	subi	r30, 0x7C	; 124
    222a:	f6 4f       	sbci	r31, 0xF6	; 246
    222c:	20 83       	st	Z, r18
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	90 93 e3 0b 	sts	0x0BE3, r25
    2234:	80 93 e2 0b 	sts	0x0BE2, r24
	// строку считаем готовой если: или 0х0А, или закончился буфер чтения
	if ((tmpFromModemBufLen >= (MAX_BUF-5)) || (tmpFromModemBuf[tmpFromModemBufLen-1]==0x0A)) {
    2238:	81 39       	cpi	r24, 0x91	; 145
    223a:	91 05       	cpc	r25, r1
    223c:	2c f4       	brge	.+10     	; 0x2248 <__vector_18+0x52>
    223e:	2a 30       	cpi	r18, 0x0A	; 10
    2240:	e9 f4       	brne	.+58     	; 0x227c <__vector_18+0x86>
		if (tmpFromModemBufLen > 3) { // незачем нам пустые строчки
    2242:	84 30       	cpi	r24, 0x04	; 4
    2244:	91 05       	cpc	r25, r1
    2246:	b4 f0       	brlt	.+44     	; 0x2274 <__vector_18+0x7e>
			//tmpFromModemBufLen -= 1; // переопределили длину строки
			tmpFromModemBuf[tmpFromModemBufLen-2] = 0; // нам в строке не нужны "црлф" - насильно закончили строку
    2248:	fc 01       	movw	r30, r24
    224a:	ee 57       	subi	r30, 0x7E	; 126
    224c:	f6 4f       	sbci	r31, 0xF6	; 246
    224e:	10 82       	st	Z, r1
			if (tmpFromModemBuf[tmpFromModemBufLen-3] == 0x0D) tmpFromModemBuf[tmpFromModemBufLen-3] = 0; // нам в строке не нужны "црлф" - насильно закончили строку
    2250:	fc 01       	movw	r30, r24
    2252:	ef 57       	subi	r30, 0x7F	; 127
    2254:	f6 4f       	sbci	r31, 0xF6	; 246
    2256:	80 81       	ld	r24, Z
    2258:	8d 30       	cpi	r24, 0x0D	; 13
    225a:	09 f4       	brne	.+2      	; 0x225e <__vector_18+0x68>
    225c:	10 82       	st	Z, r1
			strncpy(PromFromModemBuf, tmpFromModemBuf, MAX_BUF-1);
    225e:	84 ee       	ldi	r24, 0xE4	; 228
    2260:	9b e0       	ldi	r25, 0x0B	; 11
    2262:	64 e8       	ldi	r22, 0x84	; 132
    2264:	79 e0       	ldi	r23, 0x09	; 9
    2266:	45 e9       	ldi	r20, 0x95	; 149
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
			tmp_flIsReaded = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	80 93 14 0d 	sts	0x0D14, r24
		}
		tmpFromModemBufLen = 0;
    2274:	10 92 e3 0b 	sts	0x0BE3, r1
    2278:	10 92 e2 0b 	sts	0x0BE2, r1
	}
}
    227c:	ff 91       	pop	r31
    227e:	ef 91       	pop	r30
    2280:	bf 91       	pop	r27
    2282:	af 91       	pop	r26
    2284:	9f 91       	pop	r25
    2286:	8f 91       	pop	r24
    2288:	7f 91       	pop	r23
    228a:	6f 91       	pop	r22
    228c:	5f 91       	pop	r21
    228e:	4f 91       	pop	r20
    2290:	3f 91       	pop	r19
    2292:	2f 91       	pop	r18
    2294:	0f 90       	pop	r0
    2296:	0b be       	out	0x3b, r0	; 59
    2298:	0f 90       	pop	r0
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	0f 90       	pop	r0
    229e:	1f 90       	pop	r1
    22a0:	18 95       	reti

000022a2 <PutNumsAndSets>:
	IndSate = NewState;
}
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
void PutNumsAndSets(void) {
    22a2:	8f 92       	push	r8
    22a4:	9f 92       	push	r9
    22a6:	af 92       	push	r10
    22a8:	bf 92       	push	r11
    22aa:	cf 92       	push	r12
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	c0 5a       	subi	r28, 0xA0	; 160
    22c0:	d0 40       	sbci	r29, 0x00	; 0
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
	char tmpCh[MAX_BUF];
	char tmpStr[10];

		strncpy(tmpCh, "Setts: ", MAX_BUF-1);
    22cc:	8e 01       	movw	r16, r28
    22ce:	05 5f       	subi	r16, 0xF5	; 245
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	c8 01       	movw	r24, r16
    22d4:	6e e6       	ldi	r22, 0x6E	; 110
    22d6:	76 e0       	ldi	r23, 0x06	; 6
    22d8:	45 e9       	ldi	r20, 0x95	; 149
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
		itoa(Settings.AlarmTime_s, tmpStr, 10);
    22e0:	80 91 e8 08 	lds	r24, 0x08E8
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	7e 01       	movw	r14, r28
    22e8:	08 94       	sec
    22ea:	e1 1c       	adc	r14, r1
    22ec:	f1 1c       	adc	r15, r1
    22ee:	b7 01       	movw	r22, r14
    22f0:	4a e0       	ldi	r20, 0x0A	; 10
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    22f8:	c8 01       	movw	r24, r16
    22fa:	b7 01       	movw	r22, r14
    22fc:	45 e9       	ldi	r20, 0x95	; 149
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    2304:	c8 01       	movw	r24, r16
    2306:	66 e7       	ldi	r22, 0x76	; 118
    2308:	76 e0       	ldi	r23, 0x06	; 6
    230a:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		itoa(Settings.DInInversion, tmpStr, 10);
    230e:	80 91 e7 08 	lds	r24, 0x08E7
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	b7 01       	movw	r22, r14
    2316:	4a e0       	ldi	r20, 0x0A	; 10
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    231e:	c8 01       	movw	r24, r16
    2320:	b7 01       	movw	r22, r14
    2322:	45 e9       	ldi	r20, 0x95	; 149
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    232a:	c8 01       	movw	r24, r16
    232c:	69 e7       	ldi	r22, 0x79	; 121
    232e:	76 e0       	ldi	r23, 0x06	; 6
    2330:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		PutPC(tmpCh);
    2334:	c8 01       	movw	r24, r16
    2336:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
    233a:	51 e2       	ldi	r21, 0x21	; 33
    233c:	c5 2e       	mov	r12, r21
    233e:	5b e0       	ldi	r21, 0x0B	; 11
    2340:	d5 2e       	mov	r13, r21
    2342:	46 e0       	ldi	r20, 0x06	; 6
    2344:	a4 2e       	mov	r10, r20
    2346:	b1 2c       	mov	r11, r1

	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
		strncpy(tmpCh, PhoneNumber[CellNumber-cSettings].Number, MAX_BUF-1);
    2348:	36 e2       	ldi	r19, 0x26	; 38
    234a:	83 2e       	mov	r8, r19
    234c:	91 2c       	mov	r9, r1
    234e:	a8 9c       	mul	r10, r8
    2350:	b0 01       	movw	r22, r0
    2352:	a9 9c       	mul	r10, r9
    2354:	70 0d       	add	r23, r0
    2356:	b8 9c       	mul	r11, r8
    2358:	70 0d       	add	r23, r0
    235a:	11 24       	eor	r1, r1
    235c:	66 5e       	subi	r22, 0xE6	; 230
    235e:	75 4f       	sbci	r23, 0xF5	; 245
    2360:	c8 01       	movw	r24, r16
    2362:	45 e9       	ldi	r20, 0x95	; 149
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    236a:	c8 01       	movw	r24, r16
    236c:	66 e7       	ldi	r22, 0x76	; 118
    236e:	76 e0       	ldi	r23, 0x06	; 6
    2370:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		itoa(PhoneNumber[CellNumber-cSettings].IsActive, tmpStr, 10);
    2374:	f6 01       	movw	r30, r12
    2376:	80 81       	ld	r24, Z
    2378:	99 27       	eor	r25, r25
    237a:	87 fd       	sbrc	r24, 7
    237c:	90 95       	com	r25
    237e:	b7 01       	movw	r22, r14
    2380:	4a e0       	ldi	r20, 0x0A	; 10
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    2388:	c8 01       	movw	r24, r16
    238a:	b7 01       	movw	r22, r14
    238c:	45 e9       	ldi	r20, 0x95	; 149
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    2394:	c8 01       	movw	r24, r16
    2396:	66 e7       	ldi	r22, 0x76	; 118
    2398:	76 e0       	ldi	r23, 0x06	; 6
    239a:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		itoa(PhoneNumber[CellNumber-cSettings].Privilege, tmpStr, 10);
    239e:	f6 01       	movw	r30, r12
    23a0:	81 81       	ldd	r24, Z+1	; 0x01
    23a2:	99 27       	eor	r25, r25
    23a4:	87 fd       	sbrc	r24, 7
    23a6:	90 95       	com	r25
    23a8:	b7 01       	movw	r22, r14
    23aa:	4a e0       	ldi	r20, 0x0A	; 10
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    23b2:	c8 01       	movw	r24, r16
    23b4:	b7 01       	movw	r22, r14
    23b6:	45 e9       	ldi	r20, 0x95	; 149
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    23be:	c8 01       	movw	r24, r16
    23c0:	66 e7       	ldi	r22, 0x76	; 118
    23c2:	76 e0       	ldi	r23, 0x06	; 6
    23c4:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		itoa(PhoneNumber[CellNumber-cSettings].Zones, tmpStr, 10);
    23c8:	f6 01       	movw	r30, r12
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	99 27       	eor	r25, r25
    23ce:	87 fd       	sbrc	r24, 7
    23d0:	90 95       	com	r25
    23d2:	b7 01       	movw	r22, r14
    23d4:	4a e0       	ldi	r20, 0x0A	; 10
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    23dc:	c8 01       	movw	r24, r16
    23de:	b7 01       	movw	r22, r14
    23e0:	45 e9       	ldi	r20, 0x95	; 149
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    23e8:	c8 01       	movw	r24, r16
    23ea:	66 e7       	ldi	r22, 0x76	; 118
    23ec:	76 e0       	ldi	r23, 0x06	; 6
    23ee:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    23f2:	c8 01       	movw	r24, r16
    23f4:	69 e7       	ldi	r22, 0x79	; 121
    23f6:	76 e0       	ldi	r23, 0x06	; 6
    23f8:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		PutPC(tmpCh);
    23fc:	c8 01       	movw	r24, r16
    23fe:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
    2402:	08 94       	sec
    2404:	a1 1c       	adc	r10, r1
    2406:	b1 1c       	adc	r11, r1
    2408:	86 e2       	ldi	r24, 0x26	; 38
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	c8 0e       	add	r12, r24
    240e:	d9 1e       	adc	r13, r25
		itoa(Settings.DInInversion, tmpStr, 10);
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
		PutPC(tmpCh);

	for (int CellNumber=cNumber01; CellNumber<cLast; ++CellNumber) {
    2410:	9c e0       	ldi	r25, 0x0C	; 12
    2412:	a9 16       	cp	r10, r25
    2414:	b1 04       	cpc	r11, r1
    2416:	09 f0       	breq	.+2      	; 0x241a <PutNumsAndSets+0x178>
    2418:	9a cf       	rjmp	.-204    	; 0x234e <PutNumsAndSets+0xac>
		strncat(tmpCh, ", ",  MAX_BUF-1);
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
		PutPC(tmpCh);
	}

		strncpy(tmpCh, "MinMaxT1: ", MAX_BUF-1);
    241a:	c8 01       	movw	r24, r16
    241c:	6c e7       	ldi	r22, 0x7C	; 124
    241e:	76 e0       	ldi	r23, 0x06	; 6
    2420:	45 e9       	ldi	r20, 0x95	; 149
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
		itoa(Terms[0].MINLim, tmpStr, 10);
    2428:	80 91 d0 0d 	lds	r24, 0x0DD0
    242c:	90 91 d1 0d 	lds	r25, 0x0DD1
    2430:	b7 01       	movw	r22, r14
    2432:	4a e0       	ldi	r20, 0x0A	; 10
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    243a:	c8 01       	movw	r24, r16
    243c:	b7 01       	movw	r22, r14
    243e:	45 e9       	ldi	r20, 0x95	; 149
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    2446:	c8 01       	movw	r24, r16
    2448:	66 e7       	ldi	r22, 0x76	; 118
    244a:	76 e0       	ldi	r23, 0x06	; 6
    244c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		itoa(Terms[0].MAXLim, tmpStr, 10);
    2450:	80 91 d2 0d 	lds	r24, 0x0DD2
    2454:	90 91 d3 0d 	lds	r25, 0x0DD3
    2458:	b7 01       	movw	r22, r14
    245a:	4a e0       	ldi	r20, 0x0A	; 10
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    2462:	c8 01       	movw	r24, r16
    2464:	b7 01       	movw	r22, r14
    2466:	45 e9       	ldi	r20, 0x95	; 149
    2468:	50 e0       	ldi	r21, 0x00	; 0
    246a:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    246e:	c8 01       	movw	r24, r16
    2470:	69 e7       	ldi	r22, 0x79	; 121
    2472:	76 e0       	ldi	r23, 0x06	; 6
    2474:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		PutPC(tmpCh);
    2478:	c8 01       	movw	r24, r16
    247a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
		strncpy(tmpCh, "MinMaxT2: ", MAX_BUF-1);
    247e:	c8 01       	movw	r24, r16
    2480:	67 e8       	ldi	r22, 0x87	; 135
    2482:	76 e0       	ldi	r23, 0x06	; 6
    2484:	45 e9       	ldi	r20, 0x95	; 149
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strncpy>
		itoa(Terms[1].MINLim, tmpStr, 10);
    248c:	80 91 10 0e 	lds	r24, 0x0E10
    2490:	90 91 11 0e 	lds	r25, 0x0E11
    2494:	b7 01       	movw	r22, r14
    2496:	4a e0       	ldi	r20, 0x0A	; 10
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    249e:	c8 01       	movw	r24, r16
    24a0:	b7 01       	movw	r22, r14
    24a2:	45 e9       	ldi	r20, 0x95	; 149
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, ", ",  MAX_BUF-1);
    24aa:	c8 01       	movw	r24, r16
    24ac:	66 e7       	ldi	r22, 0x76	; 118
    24ae:	76 e0       	ldi	r23, 0x06	; 6
    24b0:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		itoa(Terms[1].MAXLim, tmpStr, 10);
    24b4:	80 91 12 0e 	lds	r24, 0x0E12
    24b8:	90 91 13 0e 	lds	r25, 0x0E13
    24bc:	b7 01       	movw	r22, r14
    24be:	4a e0       	ldi	r20, 0x0A	; 10
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strncat(tmpCh, tmpStr,  MAX_BUF-1);
    24c6:	c8 01       	movw	r24, r16
    24c8:	b7 01       	movw	r22, r14
    24ca:	45 e9       	ldi	r20, 0x95	; 149
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <strncat>
		strncat(tmpCh, "\n\r",  MAX_BUF-1);
    24d2:	c8 01       	movw	r24, r16
    24d4:	69 e7       	ldi	r22, 0x79	; 121
    24d6:	76 e0       	ldi	r23, 0x06	; 6
    24d8:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		PutPC(tmpCh);
    24dc:	c8 01       	movw	r24, r16
    24de:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>

}
    24e2:	c0 56       	subi	r28, 0x60	; 96
    24e4:	df 4f       	sbci	r29, 0xFF	; 255
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	ff 90       	pop	r15
    24fa:	ef 90       	pop	r14
    24fc:	df 90       	pop	r13
    24fe:	cf 90       	pop	r12
    2500:	bf 90       	pop	r11
    2502:	af 90       	pop	r10
    2504:	9f 90       	pop	r9
    2506:	8f 90       	pop	r8
    2508:	08 95       	ret

0000250a <ProcessKey>:

//------------------------------------------------------------------------------------
//unsigned char RetVal = 0;
char ProcessKey(char Key) {
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	volatile char RetProcessKey = 0;
    2514:	19 82       	std	Y+1, r1	; 0x01
	switch (Key) {
    2516:	86 33       	cpi	r24, 0x36	; 54
    2518:	91 f0       	breq	.+36     	; 0x253e <ProcessKey+0x34>
    251a:	87 33       	cpi	r24, 0x37	; 55
    251c:	44 f4       	brge	.+16     	; 0x252e <ProcessKey+0x24>
    251e:	8d 32       	cpi	r24, 0x2D	; 45
    2520:	59 f0       	breq	.+22     	; 0x2538 <ProcessKey+0x2e>
    2522:	81 33       	cpi	r24, 0x31	; 49
    2524:	f9 f1       	breq	.+126    	; 0x25a4 <ProcessKey+0x9a>
    2526:	8a 32       	cpi	r24, 0x2A	; 42
    2528:	09 f0       	breq	.+2      	; 0x252c <ProcessKey+0x22>
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <ProcessKey+0xa0>
    252c:	18 c0       	rjmp	.+48     	; 0x255e <ProcessKey+0x54>
    252e:	87 33       	cpi	r24, 0x37	; 55
    2530:	61 f0       	breq	.+24     	; 0x254a <ProcessKey+0x40>
    2532:	80 36       	cpi	r24, 0x60	; 96
    2534:	d1 f5       	brne	.+116    	; 0x25aa <ProcessKey+0xa0>
    2536:	31 c0       	rjmp	.+98     	; 0x259a <ProcessKey+0x90>
		case '-': 
			PutNumsAndSets();
    2538:	0e 94 51 11 	call	0x22a2	; 0x22a2 <PutNumsAndSets>
    253c:	36 c0       	rjmp	.+108    	; 0x25aa <ProcessKey+0xa0>
					PutPC("\n\r");
*/
		break;
		
		case '6':
			otlTerm--;
    253e:	80 91 c6 06 	lds	r24, 0x06C6
    2542:	90 91 c7 06 	lds	r25, 0x06C7
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <ProcessKey+0x4a>
		break;
		case '7':
			otlTerm++;
    254a:	80 91 c6 06 	lds	r24, 0x06C6
    254e:	90 91 c7 06 	lds	r25, 0x06C7
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	90 93 c7 06 	sts	0x06C7, r25
    2558:	80 93 c6 06 	sts	0x06C6, r24
    255c:	26 c0       	rjmp	.+76     	; 0x25aa <ProcessKey+0xa0>
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
    255e:	90 91 ce 0d 	lds	r25, 0x0DCE
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    2562:	80 91 9b 00 	lds	r24, 0x009B
    2566:	85 ff       	sbrs	r24, 5
    2568:	fc cf       	rjmp	.-8      	; 0x2562 <ProcessKey+0x58>
		case '7':
			otlTerm++;
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
    256a:	90 5d       	subi	r25, 0xD0	; 208
// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    256c:	90 93 9c 00 	sts	0x009C, r25
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    2570:	80 91 9b 00 	lds	r24, 0x009B
    2574:	85 ff       	sbrs	r24, 5
    2576:	fc cf       	rjmp	.-8      	; 0x2570 <ProcessKey+0x66>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2578:	80 e2       	ldi	r24, 0x20	; 32
    257a:	80 93 9c 00 	sts	0x009C, r24
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
			PutPCChar(0x20);
			PutPCChar(Terms[1].swTermAlg+0x30);
    257e:	90 91 0e 0e 	lds	r25, 0x0E0E
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    2582:	80 91 9b 00 	lds	r24, 0x009B
    2586:	85 ff       	sbrs	r24, 5
    2588:	fc cf       	rjmp	.-8      	; 0x2582 <ProcessKey+0x78>
		break;
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
			PutPCChar(0x20);
			PutPCChar(Terms[1].swTermAlg+0x30);
    258a:	90 5d       	subi	r25, 0xD0	; 208
// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    258c:	90 93 9c 00 	sts	0x009C, r25
		
		case '*':
			PutPCChar(Terms[0].swTermAlg+0x30);
			PutPCChar(0x20);
			PutPCChar(Terms[1].swTermAlg+0x30);
			PutPC("\n\r");
    2590:	89 e7       	ldi	r24, 0x79	; 121
    2592:	96 e0       	ldi	r25, 0x06	; 6
    2594:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <PutPC>
    2598:	08 c0       	rjmp	.+16     	; 0x25aa <ProcessKey+0xa0>
		case '5': PutModem("at+ipr=115200"); RetProcessKey = 1;
		break;
		case '9': //ModemOn(); RetProcessKey = 1;
		break;
		*/
		case '`': ModemOnOff(); RetProcessKey = 1;
    259a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ModemOnOff>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <ProcessKey+0xa0>
		break;
		case '1': 
			flIsReaded = 2;
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	80 93 83 09 	sts	0x0983, r24
		break;
	}
	return RetProcessKey;
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <PutPCCharsN>:
		str++;
	}
}
//------------------------------------------------------------------------------------

void PutPCCharsN(char *str, int Count) {
    25b4:	8f 92       	push	r8
    25b6:	9f 92       	push	r9
    25b8:	af 92       	push	r10
    25ba:	bf 92       	push	r11
    25bc:	cf 92       	push	r12
    25be:	df 92       	push	r13
    25c0:	ef 92       	push	r14
    25c2:	ff 92       	push	r15
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <PutPCCharsN+0x1a>
    25ce:	0f 92       	push	r0
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	6b 01       	movw	r12, r22
    25d6:	7c 01       	movw	r14, r24
    25d8:	00 e0       	ldi	r16, 0x00	; 0
    25da:	10 e0       	ldi	r17, 0x00	; 0
	char tmpCH1[3];
	for (int i_PutPCCharsN=0; i_PutPCCharsN<Count; ++i_PutPCCharsN) {
		sprintf(tmpCH1, "%02X", str[i_PutPCCharsN]);
    25dc:	4e 01       	movw	r8, r28
    25de:	08 94       	sec
    25e0:	81 1c       	adc	r8, r1
    25e2:	91 1c       	adc	r9, r1
    25e4:	62 e9       	ldi	r22, 0x92	; 146
    25e6:	a6 2e       	mov	r10, r22
    25e8:	66 e0       	ldi	r22, 0x06	; 6
    25ea:	b6 2e       	mov	r11, r22
    25ec:	34 c0       	rjmp	.+104    	; 0x2656 <PutPCCharsN+0xa2>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <PutPCCharsN+0x3c>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <PutPCCharsN+0x3e>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <PutPCCharsN+0x40>
    25f4:	ed b7       	in	r30, 0x3d	; 61
    25f6:	fe b7       	in	r31, 0x3e	; 62
    25f8:	31 96       	adiw	r30, 0x01	; 1
    25fa:	ad b7       	in	r26, 0x3d	; 61
    25fc:	be b7       	in	r27, 0x3e	; 62
    25fe:	12 96       	adiw	r26, 0x02	; 2
    2600:	9c 92       	st	X, r9
    2602:	8e 92       	st	-X, r8
    2604:	11 97       	sbiw	r26, 0x01	; 1
    2606:	b3 82       	std	Z+3, r11	; 0x03
    2608:	a2 82       	std	Z+2, r10	; 0x02
    260a:	d7 01       	movw	r26, r14
    260c:	8c 91       	ld	r24, X
    260e:	99 27       	eor	r25, r25
    2610:	87 fd       	sbrc	r24, 7
    2612:	90 95       	com	r25
    2614:	95 83       	std	Z+5, r25	; 0x05
    2616:	84 83       	std	Z+4, r24	; 0x04
    2618:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <sprintf>
		USART1_Transmit(tmpCH1[0]);
    261c:	99 81       	ldd	r25, Y+1	; 0x01
    261e:	2d b7       	in	r18, 0x3d	; 61
    2620:	3e b7       	in	r19, 0x3e	; 62
    2622:	2a 5f       	subi	r18, 0xFA	; 250
    2624:	3f 4f       	sbci	r19, 0xFF	; 255
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	3e bf       	out	0x3e, r19	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	2d bf       	out	0x3d, r18	; 61
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    2630:	80 91 9b 00 	lds	r24, 0x009B
    2634:	85 ff       	sbrs	r24, 5
    2636:	fc cf       	rjmp	.-8      	; 0x2630 <PutPCCharsN+0x7c>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2638:	90 93 9c 00 	sts	0x009C, r25
void PutPCCharsN(char *str, int Count) {
	char tmpCH1[3];
	for (int i_PutPCCharsN=0; i_PutPCCharsN<Count; ++i_PutPCCharsN) {
		sprintf(tmpCH1, "%02X", str[i_PutPCCharsN]);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    263e:	80 91 9b 00 	lds	r24, 0x009B
    2642:	85 ff       	sbrs	r24, 5
    2644:	fc cf       	rjmp	.-8      	; 0x263e <PutPCCharsN+0x8a>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    2646:	90 93 9c 00 	sts	0x009C, r25
}
//------------------------------------------------------------------------------------

void PutPCCharsN(char *str, int Count) {
	char tmpCH1[3];
	for (int i_PutPCCharsN=0; i_PutPCCharsN<Count; ++i_PutPCCharsN) {
    264a:	0f 5f       	subi	r16, 0xFF	; 255
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	e8 0e       	add	r14, r24
    2654:	f9 1e       	adc	r15, r25
    2656:	0c 15       	cp	r16, r12
    2658:	1d 05       	cpc	r17, r13
    265a:	4c f2       	brlt	.-110    	; 0x25ee <PutPCCharsN+0x3a>
		sprintf(tmpCH1, "%02X", str[i_PutPCCharsN]);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
		str++;
	}
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	ff 90       	pop	r15
    266c:	ef 90       	pop	r14
    266e:	df 90       	pop	r13
    2670:	cf 90       	pop	r12
    2672:	bf 90       	pop	r11
    2674:	af 90       	pop	r10
    2676:	9f 90       	pop	r9
    2678:	8f 90       	pop	r8
    267a:	08 95       	ret

0000267c <PutPCChars>:
		USART1_Transmit(*str);
		str++;
	}
}

void PutPCChars(char *str) {
    267c:	cf 92       	push	r12
    267e:	df 92       	push	r13
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <PutPCChars+0x12>
    268e:	0f 92       	push	r0
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	8c 01       	movw	r16, r24
	char tmpCH1[3];
	while (*str) {
		sprintf(tmpCH1, "%02X", *str);
    2696:	6e 01       	movw	r12, r28
    2698:	08 94       	sec
    269a:	c1 1c       	adc	r12, r1
    269c:	d1 1c       	adc	r13, r1
    269e:	72 e9       	ldi	r23, 0x92	; 146
    26a0:	e7 2e       	mov	r14, r23
    26a2:	76 e0       	ldi	r23, 0x06	; 6
    26a4:	f7 2e       	mov	r15, r23
    26a6:	2d c0       	rjmp	.+90     	; 0x2702 <PutPCChars+0x86>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <PutPCChars+0x2e>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <PutPCChars+0x30>
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <PutPCChars+0x32>
    26ae:	ed b7       	in	r30, 0x3d	; 61
    26b0:	fe b7       	in	r31, 0x3e	; 62
    26b2:	31 96       	adiw	r30, 0x01	; 1
    26b4:	ad b7       	in	r26, 0x3d	; 61
    26b6:	be b7       	in	r27, 0x3e	; 62
    26b8:	12 96       	adiw	r26, 0x02	; 2
    26ba:	dc 92       	st	X, r13
    26bc:	ce 92       	st	-X, r12
    26be:	11 97       	sbiw	r26, 0x01	; 1
    26c0:	f3 82       	std	Z+3, r15	; 0x03
    26c2:	e2 82       	std	Z+2, r14	; 0x02
    26c4:	99 27       	eor	r25, r25
    26c6:	87 fd       	sbrc	r24, 7
    26c8:	90 95       	com	r25
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04
    26ce:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <sprintf>
		USART1_Transmit(tmpCH1[0]);
    26d2:	99 81       	ldd	r25, Y+1	; 0x01
    26d4:	ed b7       	in	r30, 0x3d	; 61
    26d6:	fe b7       	in	r31, 0x3e	; 62
    26d8:	36 96       	adiw	r30, 0x06	; 6
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	fe bf       	out	0x3e, r31	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	ed bf       	out	0x3d, r30	; 61
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    26e4:	80 91 9b 00 	lds	r24, 0x009B
    26e8:	85 ff       	sbrs	r24, 5
    26ea:	fc cf       	rjmp	.-8      	; 0x26e4 <PutPCChars+0x68>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    26ec:	90 93 9c 00 	sts	0x009C, r25
void PutPCChars(char *str) {
	char tmpCH1[3];
	while (*str) {
		sprintf(tmpCH1, "%02X", *str);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
//------------------------------------------------------------------------------------

// Передать байт в РС
void USART1_Transmit( char data ) {
	//Ожидание освобождения буфера передатчика  
	while ( !( UCSR1A & (1<<UDRE1)) );
    26f2:	80 91 9b 00 	lds	r24, 0x009B
    26f6:	85 ff       	sbrs	r24, 5
    26f8:	fc cf       	rjmp	.-8      	; 0x26f2 <PutPCChars+0x76>
	//Помещение данных в буфер, отправка данных 
	UDR1 = data;
    26fa:	90 93 9c 00 	sts	0x009C, r25
	char tmpCH1[3];
	while (*str) {
		sprintf(tmpCH1, "%02X", *str);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
		str++;
    26fe:	0f 5f       	subi	r16, 0xFF	; 255
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void PutPCChars(char *str) {
	char tmpCH1[3];
	while (*str) {
    2702:	d8 01       	movw	r26, r16
    2704:	8c 91       	ld	r24, X
    2706:	88 23       	and	r24, r24
    2708:	79 f6       	brne	.-98     	; 0x26a8 <PutPCChars+0x2c>
		sprintf(tmpCH1, "%02X", *str);
		USART1_Transmit(tmpCH1[0]);
		USART1_Transmit(tmpCH1[1]);
		str++;
	}
}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	cf 90       	pop	r12
    2720:	08 95       	ret

00002722 <therm_reset>:

//------------------------------------------------------------------------------------

uint8_t therm_reset(char TermNum) {
	uint8_t Ret;
	if (TermNum==0) {
    2722:	88 23       	and	r24, r24
    2724:	71 f5       	brne	.+92     	; 0x2782 <therm_reset+0x60>
		//Pull line low and wait for 480uS
		THERM_LOW0();
    2726:	80 91 62 00 	lds	r24, 0x0062
    272a:	8e 7f       	andi	r24, 0xFE	; 254
    272c:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE0();
    2730:	80 91 61 00 	lds	r24, 0x0061
    2734:	81 60       	ori	r24, 0x01	; 1
    2736:	80 93 61 00 	sts	0x0061, r24
    273a:	8a eb       	ldi	r24, 0xBA	; 186
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <therm_reset+0x20>

//extern inline __attribute__((gnu_inline)) void therm_delay(uint16_t delay);
//extern inline __attribute__((always_inline)) void therm_delay(uint16_t delay);

inline __attribute__((always_inline)) void therm_delay(uint16_t delay) {
	while (delay--) asm volatile("nop");
    2740:	00 00       	nop
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	2f ef       	ldi	r18, 0xFF	; 255
    2746:	8f 3f       	cpi	r24, 0xFF	; 255
    2748:	92 07       	cpc	r25, r18
    274a:	d1 f7       	brne	.-12     	; 0x2740 <therm_reset+0x1e>
		therm_delay(us(480));
		//Release line and wait for 60uS
		THERM_INPUT_MODE0();
    274c:	80 91 61 00 	lds	r24, 0x0061
    2750:	8e 7f       	andi	r24, 0xFE	; 254
    2752:	80 93 61 00 	sts	0x0061, r24
    2756:	87 e3       	ldi	r24, 0x37	; 55
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	01 c0       	rjmp	.+2      	; 0x275e <therm_reset+0x3c>
    275c:	00 00       	nop
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	2f ef       	ldi	r18, 0xFF	; 255
    2762:	8f 3f       	cpi	r24, 0xFF	; 255
    2764:	92 07       	cpc	r25, r18
    2766:	d1 f7       	brne	.-12     	; 0x275c <therm_reset+0x3a>
		therm_delay(us(60));
		//Store line value and wait until the completion of 480uS period
		Ret=(THERM_PIN & (1<<THERM_DQ0));
    2768:	80 b1       	in	r24, 0x00	; 0
    276a:	23 e8       	ldi	r18, 0x83	; 131
    276c:	31 e0       	ldi	r19, 0x01	; 1
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <therm_reset+0x50>
    2770:	00 00       	nop
    2772:	21 50       	subi	r18, 0x01	; 1
    2774:	30 40       	sbci	r19, 0x00	; 0
    2776:	9f ef       	ldi	r25, 0xFF	; 255
    2778:	2f 3f       	cpi	r18, 0xFF	; 255
    277a:	39 07       	cpc	r19, r25
    277c:	c9 f7       	brne	.-14     	; 0x2770 <therm_reset+0x4e>
    277e:	81 70       	andi	r24, 0x01	; 1
    2780:	08 95       	ret
		therm_delay(us(420));
	}
	else {
		//Pull line low and wait for 480uS
		THERM_LOW1();
    2782:	80 91 62 00 	lds	r24, 0x0062
    2786:	8d 7f       	andi	r24, 0xFD	; 253
    2788:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE1();
    278c:	80 91 61 00 	lds	r24, 0x0061
    2790:	82 60       	ori	r24, 0x02	; 2
    2792:	80 93 61 00 	sts	0x0061, r24
    2796:	8a eb       	ldi	r24, 0xBA	; 186
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	01 c0       	rjmp	.+2      	; 0x279e <therm_reset+0x7c>
    279c:	00 00       	nop
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	2f ef       	ldi	r18, 0xFF	; 255
    27a2:	8f 3f       	cpi	r24, 0xFF	; 255
    27a4:	92 07       	cpc	r25, r18
    27a6:	d1 f7       	brne	.-12     	; 0x279c <therm_reset+0x7a>
		therm_delay(us(480));
		//Release line and wait for 60uS
		THERM_INPUT_MODE1();
    27a8:	80 91 61 00 	lds	r24, 0x0061
    27ac:	8d 7f       	andi	r24, 0xFD	; 253
    27ae:	80 93 61 00 	sts	0x0061, r24
    27b2:	87 e3       	ldi	r24, 0x37	; 55
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	01 c0       	rjmp	.+2      	; 0x27ba <therm_reset+0x98>
    27b8:	00 00       	nop
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	2f ef       	ldi	r18, 0xFF	; 255
    27be:	8f 3f       	cpi	r24, 0xFF	; 255
    27c0:	92 07       	cpc	r25, r18
    27c2:	d1 f7       	brne	.-12     	; 0x27b8 <therm_reset+0x96>
		therm_delay(us(60));
		//Store line value and wait until the completion of 480uS period
		Ret=(THERM_PIN & (1<<THERM_DQ1));
    27c4:	80 b1       	in	r24, 0x00	; 0
    27c6:	23 e8       	ldi	r18, 0x83	; 131
    27c8:	31 e0       	ldi	r19, 0x01	; 1
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <therm_reset+0xac>
    27cc:	00 00       	nop
    27ce:	21 50       	subi	r18, 0x01	; 1
    27d0:	30 40       	sbci	r19, 0x00	; 0
    27d2:	9f ef       	ldi	r25, 0xFF	; 255
    27d4:	2f 3f       	cpi	r18, 0xFF	; 255
    27d6:	39 07       	cpc	r19, r25
    27d8:	c9 f7       	brne	.-14     	; 0x27cc <therm_reset+0xaa>
    27da:	82 70       	andi	r24, 0x02	; 2
		therm_delay(us(420));
	}
	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return Ret;
}
    27dc:	08 95       	ret

000027de <therm_write_bit>:
//------------------------------------------------------------------------------------

void therm_write_bit(uint8_t bit, char TermNum) {
    27de:	98 2f       	mov	r25, r24
	if (TermNum==0) {
    27e0:	66 23       	and	r22, r22
    27e2:	f1 f4       	brne	.+60     	; 0x2820 <therm_write_bit+0x42>
		//Pull line low for 1uS
		THERM_LOW0();
    27e4:	80 91 62 00 	lds	r24, 0x0062
    27e8:	8e 7f       	andi	r24, 0xFE	; 254
    27ea:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE0();
    27ee:	80 91 61 00 	lds	r24, 0x0061
    27f2:	81 60       	ori	r24, 0x01	; 1
    27f4:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//If we want to write 1, release the line (if not will keep low)
		if(bit) THERM_INPUT_MODE0();
    27f8:	99 23       	and	r25, r25
    27fa:	29 f0       	breq	.+10     	; 0x2806 <therm_write_bit+0x28>
    27fc:	80 91 61 00 	lds	r24, 0x0061
    2800:	8e 7f       	andi	r24, 0xFE	; 254
    2802:	80 93 61 00 	sts	0x0061, r24
    2806:	87 e3       	ldi	r24, 0x37	; 55
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	01 c0       	rjmp	.+2      	; 0x280e <therm_write_bit+0x30>
    280c:	00 00       	nop
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	2f ef       	ldi	r18, 0xFF	; 255
    2812:	8f 3f       	cpi	r24, 0xFF	; 255
    2814:	92 07       	cpc	r25, r18
    2816:	d1 f7       	brne	.-12     	; 0x280c <therm_write_bit+0x2e>
		//Wait for 60uS and release the line
		therm_delay(us(60));
		THERM_INPUT_MODE0();
    2818:	80 91 61 00 	lds	r24, 0x0061
    281c:	8e 7f       	andi	r24, 0xFE	; 254
    281e:	1d c0       	rjmp	.+58     	; 0x285a <therm_write_bit+0x7c>
	}
	else {
		//Pull line low for 1uS
		THERM_LOW1();
    2820:	80 91 62 00 	lds	r24, 0x0062
    2824:	8d 7f       	andi	r24, 0xFD	; 253
    2826:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE1();
    282a:	80 91 61 00 	lds	r24, 0x0061
    282e:	82 60       	ori	r24, 0x02	; 2
    2830:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//If we want to write 1, release the line (if not will keep low)
		if(bit) THERM_INPUT_MODE1();
    2834:	99 23       	and	r25, r25
    2836:	29 f0       	breq	.+10     	; 0x2842 <therm_write_bit+0x64>
    2838:	80 91 61 00 	lds	r24, 0x0061
    283c:	8d 7f       	andi	r24, 0xFD	; 253
    283e:	80 93 61 00 	sts	0x0061, r24
    2842:	87 e3       	ldi	r24, 0x37	; 55
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	01 c0       	rjmp	.+2      	; 0x284a <therm_write_bit+0x6c>
    2848:	00 00       	nop
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	2f ef       	ldi	r18, 0xFF	; 255
    284e:	8f 3f       	cpi	r24, 0xFF	; 255
    2850:	92 07       	cpc	r25, r18
    2852:	d1 f7       	brne	.-12     	; 0x2848 <therm_write_bit+0x6a>
		//Wait for 60uS and release the line
		therm_delay(us(60));
		THERM_INPUT_MODE1();
    2854:	80 91 61 00 	lds	r24, 0x0061
    2858:	8d 7f       	andi	r24, 0xFD	; 253
    285a:	80 93 61 00 	sts	0x0061, r24
    285e:	08 95       	ret

00002860 <therm_read_bit>:
}
//------------------------------------------------------------------------------------

uint8_t therm_read_bit(char TermNum) {
	uint8_t bit=0;
	if (TermNum==0) {
    2860:	88 23       	and	r24, r24
    2862:	29 f5       	brne	.+74     	; 0x28ae <therm_read_bit+0x4e>
		//Pull line low for 1uS
		THERM_LOW0();
    2864:	80 91 62 00 	lds	r24, 0x0062
    2868:	8e 7f       	andi	r24, 0xFE	; 254
    286a:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE0();
    286e:	80 91 61 00 	lds	r24, 0x0061
    2872:	81 60       	ori	r24, 0x01	; 1
    2874:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//Release line and wait for 14uS
		THERM_INPUT_MODE0();
    2878:	80 91 61 00 	lds	r24, 0x0061
    287c:	8e 7f       	andi	r24, 0xFE	; 254
    287e:	80 93 61 00 	sts	0x0061, r24
    2882:	8c e0       	ldi	r24, 0x0C	; 12
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	01 c0       	rjmp	.+2      	; 0x288a <therm_read_bit+0x2a>
    2888:	00 00       	nop
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	2f ef       	ldi	r18, 0xFF	; 255
    288e:	8f 3f       	cpi	r24, 0xFF	; 255
    2890:	92 07       	cpc	r25, r18
    2892:	d1 f7       	brne	.-12     	; 0x2888 <therm_read_bit+0x28>
		therm_delay(us(14));
		//Read line value
		if(THERM_PIN&(1<<THERM_DQ0)) bit=1;
    2894:	80 b1       	in	r24, 0x00	; 0
    2896:	29 e2       	ldi	r18, 0x29	; 41
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	01 c0       	rjmp	.+2      	; 0x289e <therm_read_bit+0x3e>
    289c:	00 00       	nop
    289e:	21 50       	subi	r18, 0x01	; 1
    28a0:	30 40       	sbci	r19, 0x00	; 0
    28a2:	9f ef       	ldi	r25, 0xFF	; 255
    28a4:	2f 3f       	cpi	r18, 0xFF	; 255
    28a6:	39 07       	cpc	r19, r25
    28a8:	c9 f7       	brne	.-14     	; 0x289c <therm_read_bit+0x3c>
    28aa:	81 70       	andi	r24, 0x01	; 1
    28ac:	08 95       	ret
		//Wait for 45uS to end and return read value
		therm_delay(us(45));
	}
	else {
		//Pull line low for 1uS
		THERM_LOW1();
    28ae:	80 91 62 00 	lds	r24, 0x0062
    28b2:	8d 7f       	andi	r24, 0xFD	; 253
    28b4:	80 93 62 00 	sts	0x0062, r24
		THERM_OUTPUT_MODE1();
    28b8:	80 91 61 00 	lds	r24, 0x0061
    28bc:	82 60       	ori	r24, 0x02	; 2
    28be:	80 93 61 00 	sts	0x0061, r24
		therm_delay(us(1));
		//Release line and wait for 14uS
		THERM_INPUT_MODE1();
    28c2:	80 91 61 00 	lds	r24, 0x0061
    28c6:	8d 7f       	andi	r24, 0xFD	; 253
    28c8:	80 93 61 00 	sts	0x0061, r24
    28cc:	8c e0       	ldi	r24, 0x0C	; 12
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <therm_read_bit+0x74>
    28d2:	00 00       	nop
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	2f ef       	ldi	r18, 0xFF	; 255
    28d8:	8f 3f       	cpi	r24, 0xFF	; 255
    28da:	92 07       	cpc	r25, r18
    28dc:	d1 f7       	brne	.-12     	; 0x28d2 <therm_read_bit+0x72>
		therm_delay(us(14));
		//Read line value
		if(THERM_PIN&(1<<THERM_DQ1)) bit=1;
    28de:	80 b1       	in	r24, 0x00	; 0
    28e0:	29 e2       	ldi	r18, 0x29	; 41
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	01 c0       	rjmp	.+2      	; 0x28e8 <therm_read_bit+0x88>
    28e6:	00 00       	nop
    28e8:	21 50       	subi	r18, 0x01	; 1
    28ea:	30 40       	sbci	r19, 0x00	; 0
    28ec:	9f ef       	ldi	r25, 0xFF	; 255
    28ee:	2f 3f       	cpi	r18, 0xFF	; 255
    28f0:	39 07       	cpc	r19, r25
    28f2:	c9 f7       	brne	.-14     	; 0x28e6 <therm_read_bit+0x86>
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	96 95       	lsr	r25
    28f8:	87 95       	ror	r24
    28fa:	81 70       	andi	r24, 0x01	; 1
		//Wait for 45uS to end and return read value
		therm_delay(us(45));
	}
	return bit;
}
    28fc:	08 95       	ret

000028fe <therm_read_byte>:
//------------------------------------------------------------------------------------

uint8_t therm_read_byte(char TermNum) {
    28fe:	ff 92       	push	r15
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	f8 2e       	mov	r15, r24
    2906:	08 e0       	ldi	r16, 0x08	; 8
    2908:	10 e0       	ldi	r17, 0x00	; 0
    290a:	0a c0       	rjmp	.+20     	; 0x2920 <therm_read_byte+0x22>
	uint8_t i=8, n=0;
	while(i--){
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit(TermNum)<<7);
    290c:	8f 2d       	mov	r24, r15
    290e:	0e 94 30 14 	call	0x2860	; 0x2860 <therm_read_bit>
    2912:	91 2f       	mov	r25, r17
    2914:	96 95       	lsr	r25
    2916:	18 2f       	mov	r17, r24
    2918:	17 95       	ror	r17
    291a:	11 27       	eor	r17, r17
    291c:	17 95       	ror	r17
    291e:	19 2b       	or	r17, r25
}
//------------------------------------------------------------------------------------

uint8_t therm_read_byte(char TermNum) {
	uint8_t i=8, n=0;
	while(i--){
    2920:	01 50       	subi	r16, 0x01	; 1
    2922:	a0 f7       	brcc	.-24     	; 0x290c <therm_read_byte+0xe>
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit(TermNum)<<7);
	}
	return n;
}
    2924:	81 2f       	mov	r24, r17
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	ff 90       	pop	r15
    292c:	08 95       	ret

0000292e <therm_write_byte>:
//------------------------------------------------------------------------------------

void therm_write_byte(uint8_t byte, char TermNum) {
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	08 2f       	mov	r16, r24
    2936:	f6 2e       	mov	r15, r22
    2938:	18 e0       	ldi	r17, 0x08	; 8
    293a:	06 c0       	rjmp	.+12     	; 0x2948 <therm_write_byte+0x1a>
	uint8_t i=8;
	while(i--){
		//Write actual bit and shift one position right to make
		//the next bit ready
		therm_write_bit(byte&1, TermNum);
    293c:	80 2f       	mov	r24, r16
    293e:	81 70       	andi	r24, 0x01	; 1
    2940:	6f 2d       	mov	r22, r15
    2942:	0e 94 ef 13 	call	0x27de	; 0x27de <therm_write_bit>
		byte>>=1;
    2946:	06 95       	lsr	r16
}
//------------------------------------------------------------------------------------

void therm_write_byte(uint8_t byte, char TermNum) {
	uint8_t i=8;
	while(i--){
    2948:	11 50       	subi	r17, 0x01	; 1
    294a:	c0 f7       	brcc	.-16     	; 0x293c <therm_write_byte+0xe>
		//Write actual bit and shift one position right to make
		//the next bit ready
		therm_write_bit(byte&1, TermNum);
		byte>>=1;
	}
}
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	08 95       	ret

00002954 <TermSirenaOn>:
*/
//------------------------------------------------------------------------------------

// включить сирену термометра
void TermSirenaOn(void) {
	DOuts = DOuts & 0b10111111; 
    2954:	80 91 69 02 	lds	r24, 0x0269
    2958:	8f 7b       	andi	r24, 0xBF	; 191
    295a:	80 93 69 02 	sts	0x0269, r24
}
    295e:	08 95       	ret

00002960 <TermSirenaOff>:
//------------------------------------------------------------------------------------

// выключить сирену термометра
void TermSirenaOff(void) {
	DOuts = DOuts | 0b01000000; 
    2960:	80 91 69 02 	lds	r24, 0x0269
    2964:	80 64       	ori	r24, 0x40	; 64
    2966:	80 93 69 02 	sts	0x0269, r24
}
    296a:	08 95       	ret

0000296c <TermInit>:
		break;
	}
}
//------------------------------------------------------------------------------------

void TermInit (void) {
    296c:	ee ec       	ldi	r30, 0xCE	; 206
    296e:	fd e0       	ldi	r31, 0x0D	; 13
    2970:	df 01       	movw	r26, r30
    2972:	9b 96       	adiw	r26, 0x2b	; 43
		Terms[i].flOtkaz = 0;
		Terms[i].OtkazCount = 0;
		Terms[i].OldOtkazCount = 0;
		Terms[i].CRCOtkazCount = 0;
		Terms[i].OldCRCOtkazCount = 0;
		Terms[i].MINLim = 23;
    2974:	27 e1       	ldi	r18, 0x17	; 23
    2976:	30 e0       	ldi	r19, 0x00	; 0
		Terms[i].MAXLim = 25;
    2978:	89 e1       	ldi	r24, 0x19	; 25
    297a:	90 e0       	ldi	r25, 0x00	; 0
		Terms[i].trigMINLim = 0;
		Terms[i].trigMAXLim = 0;
		Terms[i].trigOtkaz = 0;
		Terms[i].trigCRCOtkaz = 0;
		Terms[i].flEnable = 1;
    297c:	41 e0       	ldi	r20, 0x01	; 1
}
//------------------------------------------------------------------------------------

void TermInit (void) {
	for (int i=0; i<THERM_COUNT; ++i) {
		Terms[i].swTermAlg = cswIdle;
    297e:	11 82       	std	Z+1, r1	; 0x01
    2980:	10 82       	st	Z, r1
		Terms[i].flIsMINLim = 0;
    2982:	17 82       	std	Z+7, r1	; 0x07
		Terms[i].flIsMAXLim = 0;
    2984:	10 86       	std	Z+8, r1	; 0x08
		Terms[i].flOldIsMINLim = 0;
    2986:	11 86       	std	Z+9, r1	; 0x09
		Terms[i].flOldIsMAXLim = 0;
    2988:	12 86       	std	Z+10, r1	; 0x0a
		Terms[i].flOtkaz = 0;
    298a:	1c 92       	st	X, r1
		Terms[i].OtkazCount = 0;
    298c:	12 96       	adiw	r26, 0x02	; 2
    298e:	1c 92       	st	X, r1
    2990:	12 97       	sbiw	r26, 0x02	; 2
		Terms[i].OldOtkazCount = 0;
    2992:	13 96       	adiw	r26, 0x03	; 3
    2994:	1c 92       	st	X, r1
    2996:	13 97       	sbiw	r26, 0x03	; 3
		Terms[i].CRCOtkazCount = 0;
    2998:	14 96       	adiw	r26, 0x04	; 4
    299a:	1c 92       	st	X, r1
    299c:	14 97       	sbiw	r26, 0x04	; 4
		Terms[i].OldCRCOtkazCount = 0;
    299e:	15 96       	adiw	r26, 0x05	; 5
    29a0:	1c 92       	st	X, r1
    29a2:	15 97       	sbiw	r26, 0x05	; 5
		Terms[i].MINLim = 23;
    29a4:	33 83       	std	Z+3, r19	; 0x03
    29a6:	22 83       	std	Z+2, r18	; 0x02
		Terms[i].MAXLim = 25;
    29a8:	95 83       	std	Z+5, r25	; 0x05
    29aa:	84 83       	std	Z+4, r24	; 0x04
		Terms[i].trigMINLim = 0;
    29ac:	13 86       	std	Z+11, r1	; 0x0b
		Terms[i].trigMAXLim = 0;
    29ae:	14 86       	std	Z+12, r1	; 0x0c
		Terms[i].trigOtkaz = 0;
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	1c 92       	st	X, r1
    29b4:	11 97       	sbiw	r26, 0x01	; 1
		Terms[i].trigCRCOtkaz = 0;
    29b6:	17 96       	adiw	r26, 0x07	; 7
    29b8:	1c 92       	st	X, r1
    29ba:	17 97       	sbiw	r26, 0x07	; 7
		Terms[i].flEnable = 1;
    29bc:	46 83       	std	Z+6, r20	; 0x06
    29be:	e0 5c       	subi	r30, 0xC0	; 192
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	a0 5c       	subi	r26, 0xC0	; 192
    29c4:	bf 4f       	sbci	r27, 0xFF	; 255
	}
}
//------------------------------------------------------------------------------------

void TermInit (void) {
	for (int i=0; i<THERM_COUNT; ++i) {
    29c6:	5e e0       	ldi	r21, 0x0E	; 14
    29c8:	ee 34       	cpi	r30, 0x4E	; 78
    29ca:	f5 07       	cpc	r31, r21
    29cc:	c1 f6       	brne	.-80     	; 0x297e <TermInit+0x12>
		Terms[i].trigMAXLim = 0;
		Terms[i].trigOtkaz = 0;
		Terms[i].trigCRCOtkaz = 0;
		Terms[i].flEnable = 1;
	}
}
    29ce:	08 95       	ret

000029d0 <crc8>:
//------------------------------------------------------------------------------------
#define CRC8INIT	0x00
#define CRC8POLY	0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t crc8( uint8_t *data_in, uint16_t number_of_bytes_to_read ) {
    29d0:	dc 01       	movw	r26, r24
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	50 e0       	ldi	r21, 0x00	; 0
	for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
		data = data_in[loop_count];
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ data) & 0x01;
			if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
    29d8:	98 e1       	ldi	r25, 0x18	; 24
    29da:	15 c0       	rjmp	.+42     	; 0x2a06 <crc8+0x36>
	uint8_t  data;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
	for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
		data = data_in[loop_count];
    29dc:	fd 01       	movw	r30, r26
    29de:	e4 0f       	add	r30, r20
    29e0:	f5 1f       	adc	r31, r21
    29e2:	e0 81       	ld	r30, Z
    29e4:	38 e0       	ldi	r19, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ data) & 0x01;
    29e6:	8e 2f       	mov	r24, r30
    29e8:	82 27       	eor	r24, r18
			if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
    29ea:	f8 2f       	mov	r31, r24
    29ec:	f1 70       	andi	r31, 0x01	; 1
    29ee:	80 fd       	sbrc	r24, 0
    29f0:	29 27       	eor	r18, r25
			crc = (crc >> 1) & 0x7F;
    29f2:	26 95       	lsr	r18
			if ( feedback_bit == 0x01 ) crc = crc | 0x80;
    29f4:	f1 30       	cpi	r31, 0x01	; 1
    29f6:	09 f4       	brne	.+2      	; 0x29fa <crc8+0x2a>
    29f8:	20 68       	ori	r18, 0x80	; 128
			data = data >> 1;
			bit_counter--;
    29fa:	31 50       	subi	r19, 0x01	; 1
		} while (bit_counter > 0);
    29fc:	11 f0       	breq	.+4      	; 0x2a02 <crc8+0x32>
		do {
			feedback_bit = (crc ^ data) & 0x01;
			if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
			crc = (crc >> 1) & 0x7F;
			if ( feedback_bit == 0x01 ) crc = crc | 0x80;
			data = data >> 1;
    29fe:	e6 95       	lsr	r30
    2a00:	f2 cf       	rjmp	.-28     	; 0x29e6 <crc8+0x16>
	uint8_t  bit_counter;
	uint8_t  data;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
	for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
    2a02:	4f 5f       	subi	r20, 0xFF	; 255
    2a04:	5f 4f       	sbci	r21, 0xFF	; 255
    2a06:	46 17       	cp	r20, r22
    2a08:	57 07       	cpc	r21, r23
    2a0a:	41 f7       	brne	.-48     	; 0x29dc <crc8+0xc>
			data = data >> 1;
			bit_counter--;
		} while (bit_counter > 0);
	}
	return crc;
}
    2a0c:	82 2f       	mov	r24, r18
    2a0e:	08 95       	ret

00002a10 <MakeTerm>:
	return RetVal;
}
//------------------------------------------------------------------------------------


void MakeTerm(char *ResStr) {
    2a10:	6f 92       	push	r6
    2a12:	7f 92       	push	r7
    2a14:	8f 92       	push	r8
    2a16:	9f 92       	push	r9
    2a18:	af 92       	push	r10
    2a1a:	bf 92       	push	r11
    2a1c:	cf 92       	push	r12
    2a1e:	df 92       	push	r13
    2a20:	ef 92       	push	r14
    2a22:	ff 92       	push	r15
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	ca 5a       	subi	r28, 0xAA	; 170
    2a32:	d0 40       	sbci	r29, 0x00	; 0
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	4c 01       	movw	r8, r24
	char tmpStr2[160];
	char tmpStr3[10];
	//memset(tmpStr2, 0, 160);
	tmpStr2[0] = 0;
    2a40:	1b 86       	std	Y+11, r1	; 0x0b
    2a42:	54 ed       	ldi	r21, 0xD4	; 212
    2a44:	e5 2e       	mov	r14, r21
    2a46:	5d e0       	ldi	r21, 0x0D	; 13
    2a48:	f5 2e       	mov	r15, r21
    2a4a:	45 e2       	ldi	r20, 0x25	; 37
    2a4c:	a4 2e       	mov	r10, r20
    2a4e:	b1 2c       	mov	r11, r1
    2a50:	ae 0c       	add	r10, r14
    2a52:	bf 1c       	adc	r11, r15
    2a54:	cc 24       	eor	r12, r12
    2a56:	dd 24       	eor	r13, r13
	for (int i=0; i<THERM_COUNT; ++i) {
		if (!Terms[i].flEnable) continue;
		strcat(tmpStr2, "t");
    2a58:	8e 01       	movw	r16, r28
    2a5a:	05 5f       	subi	r16, 0xF5	; 245
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
		itoa(i+1, tmpStr3, 10);
    2a5e:	3e 01       	movw	r6, r28
    2a60:	08 94       	sec
    2a62:	61 1c       	adc	r6, r1
    2a64:	71 1c       	adc	r7, r1
	char tmpStr2[160];
	char tmpStr3[10];
	//memset(tmpStr2, 0, 160);
	tmpStr2[0] = 0;
	for (int i=0; i<THERM_COUNT; ++i) {
		if (!Terms[i].flEnable) continue;
    2a66:	f7 01       	movw	r30, r14
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <MakeTerm+0x60>
    2a6e:	4c c0       	rjmp	.+152    	; 0x2b08 <MakeTerm+0xf8>
		strcat(tmpStr2, "t");
    2a70:	c8 01       	movw	r24, r16
    2a72:	67 e9       	ldi	r22, 0x97	; 151
    2a74:	76 e0       	ldi	r23, 0x06	; 6
    2a76:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		itoa(i+1, tmpStr3, 10);
    2a7a:	c6 01       	movw	r24, r12
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	b3 01       	movw	r22, r6
    2a80:	4a e0       	ldi	r20, 0x0A	; 10
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <itoa>
		strcat(tmpStr2, tmpStr3);
    2a88:	c8 01       	movw	r24, r16
    2a8a:	b3 01       	movw	r22, r6
    2a8c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		strcat(tmpStr2, "=");
    2a90:	c8 01       	movw	r24, r16
    2a92:	69 e9       	ldi	r22, 0x99	; 153
    2a94:	76 e0       	ldi	r23, 0x06	; 6
    2a96:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		if (Terms[i].flOtkaz == 1) strcat(tmpStr2, "ErrNON");
    2a9a:	f5 01       	movw	r30, r10
    2a9c:	80 81       	ld	r24, Z
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	21 f4       	brne	.+8      	; 0x2aaa <MakeTerm+0x9a>
    2aa2:	c8 01       	movw	r24, r16
    2aa4:	6b e9       	ldi	r22, 0x9B	; 155
    2aa6:	76 e0       	ldi	r23, 0x06	; 6
    2aa8:	11 c0       	rjmp	.+34     	; 0x2acc <MakeTerm+0xbc>
		else if (Terms[i].flCRCOtkaz == 1) strcat(tmpStr2, "ErrCRC");
    2aaa:	f5 01       	movw	r30, r10
    2aac:	86 81       	ldd	r24, Z+6	; 0x06
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	21 f4       	brne	.+8      	; 0x2aba <MakeTerm+0xaa>
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	62 ea       	ldi	r22, 0xA2	; 162
    2ab6:	76 e0       	ldi	r23, 0x06	; 6
    2ab8:	09 c0       	rjmp	.+18     	; 0x2acc <MakeTerm+0xbc>
		else strcat(tmpStr2, Terms[i].StrTherm);
    2aba:	b6 01       	movw	r22, r12
    2abc:	36 e0       	ldi	r19, 0x06	; 6
    2abe:	66 0f       	add	r22, r22
    2ac0:	77 1f       	adc	r23, r23
    2ac2:	3a 95       	dec	r19
    2ac4:	e1 f7       	brne	.-8      	; 0x2abe <MakeTerm+0xae>
    2ac6:	65 52       	subi	r22, 0x25	; 37
    2ac8:	72 4f       	sbci	r23, 0xF2	; 242
    2aca:	c8 01       	movw	r24, r16
    2acc:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		strcat(tmpStr2, "; "); 
    2ad0:	c8 01       	movw	r24, r16
    2ad2:	69 ea       	ldi	r22, 0xA9	; 169
    2ad4:	76 e0       	ldi	r23, 0x06	; 6
    2ad6:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		
		if (Terms[i].flIsMINLim==1) strcat(tmpStr2, "MIN!!!; ");
    2ada:	f7 01       	movw	r30, r14
    2adc:	81 81       	ldd	r24, Z+1	; 0x01
    2ade:	81 30       	cpi	r24, 0x01	; 1
    2ae0:	29 f4       	brne	.+10     	; 0x2aec <MakeTerm+0xdc>
    2ae2:	c8 01       	movw	r24, r16
    2ae4:	6c ea       	ldi	r22, 0xAC	; 172
    2ae6:	76 e0       	ldi	r23, 0x06	; 6
    2ae8:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		if (Terms[i].flIsMAXLim==1) strcat(tmpStr2, "MAX!!!; ");
    2aec:	f7 01       	movw	r30, r14
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	29 f4       	brne	.+10     	; 0x2afe <MakeTerm+0xee>
    2af4:	c8 01       	movw	r24, r16
    2af6:	65 eb       	ldi	r22, 0xB5	; 181
    2af8:	76 e0       	ldi	r23, 0x06	; 6
    2afa:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
		
		strcat(tmpStr2, "#");
    2afe:	c8 01       	movw	r24, r16
    2b00:	6e eb       	ldi	r22, 0xBE	; 190
    2b02:	76 e0       	ldi	r23, 0x06	; 6
    2b04:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <strcat>
void MakeTerm(char *ResStr) {
	char tmpStr2[160];
	char tmpStr3[10];
	//memset(tmpStr2, 0, 160);
	tmpStr2[0] = 0;
	for (int i=0; i<THERM_COUNT; ++i) {
    2b08:	08 94       	sec
    2b0a:	c1 1c       	adc	r12, r1
    2b0c:	d1 1c       	adc	r13, r1
    2b0e:	80 e4       	ldi	r24, 0x40	; 64
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	e8 0e       	add	r14, r24
    2b14:	f9 1e       	adc	r15, r25
    2b16:	a8 0e       	add	r10, r24
    2b18:	b9 1e       	adc	r11, r25
    2b1a:	92 e0       	ldi	r25, 0x02	; 2
    2b1c:	c9 16       	cp	r12, r25
    2b1e:	d1 04       	cpc	r13, r1
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <MakeTerm+0x114>
    2b22:	a1 cf       	rjmp	.-190    	; 0x2a66 <MakeTerm+0x56>
		if (Terms[i].flIsMINLim==1) strcat(tmpStr2, "MIN!!!; ");
		if (Terms[i].flIsMAXLim==1) strcat(tmpStr2, "MAX!!!; ");
		
		strcat(tmpStr2, "#");
	}
	strcpy(ResStr, tmpStr2);
    2b24:	c4 01       	movw	r24, r8
    2b26:	be 01       	movw	r22, r28
    2b28:	65 5f       	subi	r22, 0xF5	; 245
    2b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
}
    2b30:	c6 55       	subi	r28, 0x56	; 86
    2b32:	df 4f       	sbci	r29, 0xFF	; 255
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
    2b4e:	bf 90       	pop	r11
    2b50:	af 90       	pop	r10
    2b52:	9f 90       	pop	r9
    2b54:	8f 90       	pop	r8
    2b56:	7f 90       	pop	r7
    2b58:	6f 90       	pop	r6
    2b5a:	08 95       	ret

00002b5c <AlgTermSirena>:
}
//------------------------------------------------------------------------------------

TTime TAlgSirena;
int swAlgTermSirena = cswIdle;
void AlgTermSirena(void) {
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
	switch (swAlgTermSirena) {
    2b60:	80 91 f6 07 	lds	r24, 0x07F6
    2b64:	90 91 f7 07 	lds	r25, 0x07F7
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	19 f0       	breq	.+6      	; 0x2b74 <AlgTermSirena+0x18>
    2b6e:	85 97       	sbiw	r24, 0x25	; 37
    2b70:	71 f5       	brne	.+92     	; 0x2bce <AlgTermSirena+0x72>
    2b72:	12 c0       	rjmp	.+36     	; 0x2b98 <AlgTermSirena+0x3c>
		case cswIdle:
		break;

		case cswStart:
			TAlgSirena = GetTime();
    2b74:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2b78:	90 93 42 0e 	sts	0x0E42, r25
    2b7c:	80 93 41 0e 	sts	0x0E41, r24
*/
//------------------------------------------------------------------------------------

// включить сирену термометра
void TermSirenaOn(void) {
	DOuts = DOuts & 0b10111111; 
    2b80:	80 91 69 02 	lds	r24, 0x0269
    2b84:	8f 7b       	andi	r24, 0xBF	; 191
    2b86:	80 93 69 02 	sts	0x0269, r24
		break;

		case cswStart:
			TAlgSirena = GetTime();
			TermSirenaOn();
			swAlgTermSirena = csw010;
    2b8a:	85 e2       	ldi	r24, 0x25	; 37
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	90 93 f7 07 	sts	0x07F7, r25
    2b92:	80 93 f6 07 	sts	0x07F6, r24
    2b96:	1b c0       	rjmp	.+54     	; 0x2bce <AlgTermSirena+0x72>
		break;

		case csw010:
			if ((GetTime() - TAlgSirena) >= Ticks(15000)) { // 15 sec
    2b98:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2b9c:	20 91 41 0e 	lds	r18, 0x0E41
    2ba0:	30 91 42 0e 	lds	r19, 0x0E42
    2ba4:	8c 01       	movw	r16, r24
    2ba6:	02 1b       	sub	r16, r18
    2ba8:	13 0b       	sbc	r17, r19
    2baa:	68 e9       	ldi	r22, 0x98	; 152
    2bac:	7a e3       	ldi	r23, 0x3A	; 58
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
    2bb6:	08 17       	cp	r16, r24
    2bb8:	19 07       	cpc	r17, r25
    2bba:	48 f0       	brcs	.+18     	; 0x2bce <AlgTermSirena+0x72>
}
//------------------------------------------------------------------------------------

// выключить сирену термометра
void TermSirenaOff(void) {
	DOuts = DOuts | 0b01000000; 
    2bbc:	80 91 69 02 	lds	r24, 0x0269
    2bc0:	80 64       	ori	r24, 0x40	; 64
    2bc2:	80 93 69 02 	sts	0x0269, r24
		break;

		case csw010:
			if ((GetTime() - TAlgSirena) >= Ticks(15000)) { // 15 sec
				TermSirenaOff();
				swAlgTermSirena = cswIdle; //
    2bc6:	10 92 f7 07 	sts	0x07F7, r1
    2bca:	10 92 f6 07 	sts	0x07F6, r1
			}
		break;
	}
}
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

00002bd4 <TermAlg>:
//TTime TTermAlg;
//int swTermAlg = cswIdle;
int otlTerm = 23;
int Byte_index;
char tmpStr2[160];
char TermAlg(int TermNum) {
    2bd4:	cf 92       	push	r12
    2bd6:	df 92       	push	r13
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	7c 01       	movw	r14, r24
	
	char RetVal = 0;
	uint8_t ResCRC;
	
	switch (Terms[TermNum].swTermAlg) {
    2be6:	6c 01       	movw	r12, r24
    2be8:	76 e0       	ldi	r23, 0x06	; 6
    2bea:	cc 0c       	add	r12, r12
    2bec:	dd 1c       	adc	r13, r13
    2bee:	7a 95       	dec	r23
    2bf0:	e1 f7       	brne	.-8      	; 0x2bea <TermAlg+0x16>
    2bf2:	e6 01       	movw	r28, r12
    2bf4:	cf 53       	subi	r28, 0x3F	; 63
    2bf6:	d2 4f       	sbci	r29, 0xF2	; 242
    2bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfc:	86 32       	cpi	r24, 0x26	; 38
    2bfe:	91 05       	cpc	r25, r1
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <TermAlg+0x30>
    2c02:	68 c0       	rjmp	.+208    	; 0x2cd4 <TermAlg+0x100>
    2c04:	87 32       	cpi	r24, 0x27	; 39
    2c06:	91 05       	cpc	r25, r1
    2c08:	3c f4       	brge	.+14     	; 0x2c18 <TermAlg+0x44>
    2c0a:	81 30       	cpi	r24, 0x01	; 1
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	81 f0       	breq	.+32     	; 0x2c30 <TermAlg+0x5c>
    2c10:	85 97       	sbiw	r24, 0x25	; 37
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <TermAlg+0x42>
    2c14:	6d c1       	rjmp	.+730    	; 0x2ef0 <TermAlg+0x31c>
    2c16:	1e c0       	rjmp	.+60     	; 0x2c54 <TermAlg+0x80>
    2c18:	88 32       	cpi	r24, 0x28	; 40
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <TermAlg+0x4c>
    2c1e:	d7 c0       	rjmp	.+430    	; 0x2dce <TermAlg+0x1fa>
    2c20:	88 32       	cpi	r24, 0x28	; 40
    2c22:	91 05       	cpc	r25, r1
    2c24:	0c f4       	brge	.+2      	; 0x2c28 <TermAlg+0x54>
    2c26:	96 c0       	rjmp	.+300    	; 0x2d54 <TermAlg+0x180>
    2c28:	89 97       	sbiw	r24, 0x29	; 41
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <TermAlg+0x5a>
    2c2c:	61 c1       	rjmp	.+706    	; 0x2ef0 <TermAlg+0x31c>
    2c2e:	4e c1       	rjmp	.+668    	; 0x2ecc <TermAlg+0x2f8>
		case cswIdle:
		break;
		
		case cswStart:
			//Reset, skip ROM and start temperature conversion
			therm_reset(TermNum);
    2c30:	8e 2d       	mov	r24, r14
    2c32:	0e 94 91 13 	call	0x2722	; 0x2722 <therm_reset>
			therm_write_byte(THERM_CMD_SKIPROM, TermNum);
    2c36:	8c ec       	ldi	r24, 0xCC	; 204
    2c38:	6e 2d       	mov	r22, r14
    2c3a:	0e 94 97 14 	call	0x292e	; 0x292e <therm_write_byte>
			therm_write_byte(THERM_CMD_CONVERTTEMP, TermNum);
    2c3e:	84 e4       	ldi	r24, 0x44	; 68
    2c40:	6e 2d       	mov	r22, r14
    2c42:	0e 94 97 14 	call	0x292e	; 0x292e <therm_write_byte>
			Terms[TermNum].TTermAlg = GetTime();
    2c46:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2c4a:	9c 87       	std	Y+12, r25	; 0x0c
    2c4c:	8b 87       	std	Y+11, r24	; 0x0b
			Terms[TermNum].swTermAlg = csw010;
    2c4e:	85 e2       	ldi	r24, 0x25	; 37
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	94 c0       	rjmp	.+296    	; 0x2d7c <TermAlg+0x1a8>
		break;
		
		case csw010:
			if (therm_read_bit(TermNum)) {
    2c54:	8e 2d       	mov	r24, r14
    2c56:	0e 94 30 14 	call	0x2860	; 0x2860 <therm_read_bit>
    2c5a:	88 23       	and	r24, r24
    2c5c:	31 f0       	breq	.+12     	; 0x2c6a <TermAlg+0x96>
				Terms[TermNum].OldOtkazCount = 0;
    2c5e:	1b ae       	std	Y+59, r1	; 0x3b
				Terms[TermNum].OtkazCount = 0;
    2c60:	1a ae       	std	Y+58, r1	; 0x3a
				Terms[TermNum].flOtkaz = 0;
    2c62:	18 ae       	std	Y+56, r1	; 0x38
				Terms[TermNum].swTermAlg = csw020;
    2c64:	86 e2       	ldi	r24, 0x26	; 38
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	89 c0       	rjmp	.+274    	; 0x2d7c <TermAlg+0x1a8>
			} 
			else {
				if ((GetTime() - Terms[TermNum].TTermAlg) > Ticks(100)) { // в течении 100 мс
    2c6a:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2c6e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c70:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c72:	8c 01       	movw	r16, r24
    2c74:	02 1b       	sub	r16, r18
    2c76:	13 0b       	sbc	r17, r19
    2c78:	64 e6       	ldi	r22, 0x64	; 100
    2c7a:	70 e0       	ldi	r23, 0x00	; 0
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
    2c84:	80 17       	cp	r24, r16
    2c86:	91 07       	cpc	r25, r17
    2c88:	08 f0       	brcs	.+2      	; 0x2c8c <TermAlg+0xb8>
    2c8a:	32 c1       	rjmp	.+612    	; 0x2ef0 <TermAlg+0x31c>
					RetVal = 1; // не появился ответ на линии
					Terms[TermNum].swTermAlg = cswIdle;
    2c8c:	1e 86       	std	Y+14, r1	; 0x0e
    2c8e:	1d 86       	std	Y+13, r1	; 0x0d
					if (Terms[TermNum].OtkazCount >= MAX_OTKAZ_COUNT) {
    2c90:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c92:	94 31       	cpi	r25, 0x14	; 20
    2c94:	d4 f0       	brlt	.+52     	; 0x2cca <TermAlg+0xf6>
						if (Terms[TermNum].OtkazCount != Terms[TermNum].OldOtkazCount) {
    2c96:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c98:	98 17       	cp	r25, r24
    2c9a:	61 f0       	breq	.+24     	; 0x2cb4 <TermAlg+0xe0>
							Terms[TermNum].flOtkaz = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	88 af       	std	Y+56, r24	; 0x38
							Terms[TermNum].trigOtkaz = 1;
    2ca0:	89 af       	std	Y+57, r24	; 0x39
							Terms[TermNum].flIsMINLim = 0; // не может быть минимального лимита при отказе датчика
    2ca2:	1c 8a       	std	Y+20, r1	; 0x14
							Terms[TermNum].flIsMAXLim = 0; // не может быть максимального лимита при отказе датчика
    2ca4:	1d 8a       	std	Y+21, r1	; 0x15
							strcpy(Terms[TermNum].StrTherm, "?");
    2ca6:	c6 01       	movw	r24, r12
    2ca8:	85 52       	subi	r24, 0x25	; 37
    2caa:	92 4f       	sbci	r25, 0xF2	; 242
    2cac:	60 ec       	ldi	r22, 0xC0	; 192
    2cae:	76 e0       	ldi	r23, 0x06	; 6
    2cb0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
						}
						Terms[TermNum].OldOtkazCount = Terms[TermNum].OtkazCount;
    2cb4:	f7 01       	movw	r30, r14
    2cb6:	66 e0       	ldi	r22, 0x06	; 6
    2cb8:	ee 0f       	add	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	6a 95       	dec	r22
    2cbe:	e1 f7       	brne	.-8      	; 0x2cb8 <TermAlg+0xe4>
    2cc0:	ef 53       	subi	r30, 0x3F	; 63
    2cc2:	f2 4f       	sbci	r31, 0xF2	; 242
    2cc4:	82 ad       	ldd	r24, Z+58	; 0x3a
    2cc6:	83 af       	std	Z+59, r24	; 0x3b
    2cc8:	03 c0       	rjmp	.+6      	; 0x2cd0 <TermAlg+0xfc>
					}
					else {
						Terms[TermNum].OldOtkazCount = Terms[TermNum].OtkazCount;
    2cca:	9b af       	std	Y+59, r25	; 0x3b
						Terms[TermNum].OtkazCount++;
    2ccc:	9f 5f       	subi	r25, 0xFF	; 255
    2cce:	9a af       	std	Y+58, r25	; 0x3a
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0f c1       	rjmp	.+542    	; 0x2ef2 <TermAlg+0x31e>
				}
			}
		break;
		
		case csw020:
			therm_reset(TermNum);
    2cd4:	de 2c       	mov	r13, r14
    2cd6:	8e 2d       	mov	r24, r14
    2cd8:	0e 94 91 13 	call	0x2722	; 0x2722 <therm_reset>
			therm_write_byte(THERM_CMD_SKIPROM, TermNum);
    2cdc:	8c ec       	ldi	r24, 0xCC	; 204
    2cde:	6e 2d       	mov	r22, r14
    2ce0:	0e 94 97 14 	call	0x292e	; 0x292e <therm_write_byte>
			therm_write_byte(THERM_CMD_RSCRATCHPAD, TermNum);
    2ce4:	8e eb       	ldi	r24, 0xBE	; 190
    2ce6:	6e 2d       	mov	r22, r14
    2ce8:	0e 94 97 14 	call	0x292e	; 0x292e <therm_write_byte>
			//Read Scratchpad (only 2 first bytes)
			Terms[TermNum].Temper.InByte[0] = therm_read_byte(TermNum); // младший байт
    2cec:	8e 2d       	mov	r24, r14
    2cee:	0e 94 7f 14 	call	0x28fe	; 0x28fe <therm_read_byte>
    2cf2:	88 83       	st	Y, r24
			Terms[TermNum].Temper.InByte[1] = therm_read_byte(TermNum); // старший байт
    2cf4:	8e 2d       	mov	r24, r14
    2cf6:	0e 94 7f 14 	call	0x28fe	; 0x28fe <therm_read_byte>
    2cfa:	89 83       	std	Y+1, r24	; 0x01
			Terms[TermNum].Packet[0] = Terms[TermNum].Temper.InByte[0];
    2cfc:	f7 01       	movw	r30, r14
    2cfe:	56 e0       	ldi	r21, 0x06	; 6
    2d00:	ee 0f       	add	r30, r30
    2d02:	ff 1f       	adc	r31, r31
    2d04:	5a 95       	dec	r21
    2d06:	e1 f7       	brne	.-8      	; 0x2d00 <TermAlg+0x12c>
    2d08:	ed 53       	subi	r30, 0x3D	; 61
    2d0a:	f2 4f       	sbci	r31, 0xF2	; 242
    2d0c:	98 81       	ld	r25, Y
    2d0e:	90 83       	st	Z, r25
			Terms[TermNum].Packet[1] = Terms[TermNum].Temper.InByte[1];
    2d10:	8b 83       	std	Y+3, r24	; 0x03
    2d12:	87 01       	movw	r16, r14
    2d14:	46 e0       	ldi	r20, 0x06	; 6
    2d16:	00 0f       	add	r16, r16
    2d18:	11 1f       	adc	r17, r17
    2d1a:	4a 95       	dec	r20
    2d1c:	e1 f7       	brne	.-8      	; 0x2d16 <TermAlg+0x142>
    2d1e:	0b 53       	subi	r16, 0x3B	; 59
    2d20:	12 4f       	sbci	r17, 0xF2	; 242
    2d22:	c2 e0       	ldi	r28, 0x02	; 2
    2d24:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i=2; i<=8; ++i) Terms[TermNum].Packet[i] = therm_read_byte(TermNum);
    2d26:	8d 2d       	mov	r24, r13
    2d28:	0e 94 7f 14 	call	0x28fe	; 0x28fe <therm_read_byte>
    2d2c:	d8 01       	movw	r26, r16
    2d2e:	8d 93       	st	X+, r24
    2d30:	8d 01       	movw	r16, r26
    2d32:	21 96       	adiw	r28, 0x01	; 1
    2d34:	c9 30       	cpi	r28, 0x09	; 9
    2d36:	d1 05       	cpc	r29, r1
    2d38:	b1 f7       	brne	.-20     	; 0x2d26 <TermAlg+0x152>
			Terms[TermNum].swTermAlg = csw025;
    2d3a:	36 e0       	ldi	r19, 0x06	; 6
    2d3c:	ee 0c       	add	r14, r14
    2d3e:	ff 1c       	adc	r15, r15
    2d40:	3a 95       	dec	r19
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <TermAlg+0x168>
    2d44:	e1 ec       	ldi	r30, 0xC1	; 193
    2d46:	fd e0       	ldi	r31, 0x0D	; 13
    2d48:	ee 0e       	add	r14, r30
    2d4a:	ff 1e       	adc	r15, r31
    2d4c:	87 e2       	ldi	r24, 0x27	; 39
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	d7 01       	movw	r26, r14
    2d52:	b7 c0       	rjmp	.+366    	; 0x2ec2 <TermAlg+0x2ee>
			
		break;

		case csw025:
			ResCRC = crc8(Terms[TermNum].Packet, 8);
    2d54:	c7 01       	movw	r24, r14
    2d56:	26 e0       	ldi	r18, 0x06	; 6
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	2a 95       	dec	r18
    2d5e:	e1 f7       	brne	.-8      	; 0x2d58 <TermAlg+0x184>
    2d60:	8d 53       	subi	r24, 0x3D	; 61
    2d62:	92 4f       	sbci	r25, 0xF2	; 242
    2d64:	68 e0       	ldi	r22, 0x08	; 8
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <crc8>
			if (ResCRC == Terms[TermNum].Packet[8]) { // crc совпала
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	89 17       	cp	r24, r25
    2d70:	41 f4       	brne	.+16     	; 0x2d82 <TermAlg+0x1ae>
				Terms[TermNum].OldCRCOtkazCount = 0;
    2d72:	1d ae       	std	Y+61, r1	; 0x3d
				Terms[TermNum].CRCOtkazCount = 0;
    2d74:	1c ae       	std	Y+60, r1	; 0x3c
				Terms[TermNum].flCRCOtkaz = 0;
    2d76:	1e ae       	std	Y+62, r1	; 0x3e
				Terms[TermNum].swTermAlg = csw030;
    2d78:	88 e2       	ldi	r24, 0x28	; 40
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9e 87       	std	Y+14, r25	; 0x0e
    2d7e:	8d 87       	std	Y+13, r24	; 0x0d
    2d80:	b7 c0       	rjmp	.+366    	; 0x2ef0 <TermAlg+0x31c>
			}
			else { // crc не совпала
				strcpy(Terms[TermNum].StrTherm, "?");
    2d82:	c6 01       	movw	r24, r12
    2d84:	85 52       	subi	r24, 0x25	; 37
    2d86:	92 4f       	sbci	r25, 0xF2	; 242
    2d88:	60 ec       	ldi	r22, 0xC0	; 192
    2d8a:	76 e0       	ldi	r23, 0x06	; 6
    2d8c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strcpy>
				RetVal = 2; // не совпала CRC
				Terms[TermNum].swTermAlg = cswIdle;
    2d90:	1e 86       	std	Y+14, r1	; 0x0e
    2d92:	1d 86       	std	Y+13, r1	; 0x0d
				if (Terms[TermNum].CRCOtkazCount >= MAX_OTKAZ_COUNT) {
    2d94:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d96:	fe 01       	movw	r30, r28
    2d98:	fd 96       	adiw	r30, 0x3d	; 61
    2d9a:	94 31       	cpi	r25, 0x14	; 20
    2d9c:	9c f0       	brlt	.+38     	; 0x2dc4 <TermAlg+0x1f0>
					if (Terms[TermNum].CRCOtkazCount != Terms[TermNum].OldCRCOtkazCount) {
    2d9e:	80 81       	ld	r24, Z
    2da0:	98 17       	cp	r25, r24
    2da2:	29 f0       	breq	.+10     	; 0x2dae <TermAlg+0x1da>
						Terms[TermNum].flCRCOtkaz = 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	8e af       	std	Y+62, r24	; 0x3e
						Terms[TermNum].trigCRCOtkaz = 1;
    2da8:	8f af       	std	Y+63, r24	; 0x3f
						Terms[TermNum].flIsMINLim = 0; // не может быть минимального лимита при отказе датчика
    2daa:	1c 8a       	std	Y+20, r1	; 0x14
						Terms[TermNum].flIsMAXLim = 0; // не может быть максимального лимита при отказе датчика
    2dac:	1d 8a       	std	Y+21, r1	; 0x15
					}
					Terms[TermNum].OldCRCOtkazCount = Terms[TermNum].CRCOtkazCount;
    2dae:	f7 01       	movw	r30, r14
    2db0:	06 e0       	ldi	r16, 0x06	; 6
    2db2:	ee 0f       	add	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	0a 95       	dec	r16
    2db8:	e1 f7       	brne	.-8      	; 0x2db2 <TermAlg+0x1de>
    2dba:	ef 53       	subi	r30, 0x3F	; 63
    2dbc:	f2 4f       	sbci	r31, 0xF2	; 242
    2dbe:	84 ad       	ldd	r24, Z+60	; 0x3c
    2dc0:	85 af       	std	Z+61, r24	; 0x3d
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <TermAlg+0x1f6>
				}
				else {
					Terms[TermNum].OldCRCOtkazCount = Terms[TermNum].CRCOtkazCount;
    2dc4:	90 83       	st	Z, r25
					Terms[TermNum].CRCOtkazCount++;
    2dc6:	9f 5f       	subi	r25, 0xFF	; 255
    2dc8:	9c af       	std	Y+60, r25	; 0x3c
    2dca:	82 e0       	ldi	r24, 0x02	; 2
    2dcc:	92 c0       	rjmp	.+292    	; 0x2ef2 <TermAlg+0x31e>
				}
			}
		break;

		case csw030:
			Terms[TermNum].Temper.Value = Terms[TermNum].Temper.Value >> 4;
    2dce:	28 81       	ld	r18, Y
    2dd0:	39 81       	ldd	r19, Y+1	; 0x01
    2dd2:	14 e0       	ldi	r17, 0x04	; 4
    2dd4:	35 95       	asr	r19
    2dd6:	27 95       	ror	r18
    2dd8:	1a 95       	dec	r17
    2dda:	e1 f7       	brne	.-8      	; 0x2dd4 <TermAlg+0x200>
    2ddc:	39 83       	std	Y+1, r19	; 0x01
    2dde:	28 83       	st	Y, r18
			//Terms[TermNum].Temper.Value = otlTerm; //!!!!!
			Terms[TermNum].flOldIsMINLim = Terms[TermNum].flIsMINLim;
    2de0:	8c 89       	ldd	r24, Y+20	; 0x14
    2de2:	8e 8b       	std	Y+22, r24	; 0x16
			Terms[TermNum].flOldIsMAXLim = Terms[TermNum].flIsMAXLim;
    2de4:	8d 89       	ldd	r24, Y+21	; 0x15
    2de6:	8f 8b       	std	Y+23, r24	; 0x17
			if (Terms[TermNum].Temper.Value < Terms[TermNum].MINLim) Terms[TermNum].flIsMINLim = 1;
    2de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dea:	98 89       	ldd	r25, Y+16	; 0x10
    2dec:	28 17       	cp	r18, r24
    2dee:	39 07       	cpc	r19, r25
    2df0:	1c f4       	brge	.+6      	; 0x2df8 <TermAlg+0x224>
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	8c 8b       	std	Y+20, r24	; 0x14
    2df6:	01 c0       	rjmp	.+2      	; 0x2dfa <TermAlg+0x226>
			else Terms[TermNum].flIsMINLim = 0;
    2df8:	1c 8a       	std	Y+20, r1	; 0x14
			if (Terms[TermNum].Temper.Value > Terms[TermNum].MAXLim) Terms[TermNum].flIsMAXLim = 1;
    2dfa:	f7 01       	movw	r30, r14
    2dfc:	b6 e0       	ldi	r27, 0x06	; 6
    2dfe:	ee 0f       	add	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	ba 95       	dec	r27
    2e04:	e1 f7       	brne	.-8      	; 0x2dfe <TermAlg+0x22a>
    2e06:	ef 53       	subi	r30, 0x3F	; 63
    2e08:	f2 4f       	sbci	r31, 0xF2	; 242
    2e0a:	20 81       	ld	r18, Z
    2e0c:	31 81       	ldd	r19, Z+1	; 0x01
    2e0e:	81 89       	ldd	r24, Z+17	; 0x11
    2e10:	92 89       	ldd	r25, Z+18	; 0x12
    2e12:	82 17       	cp	r24, r18
    2e14:	93 07       	cpc	r25, r19
    2e16:	1c f4       	brge	.+6      	; 0x2e1e <TermAlg+0x24a>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	85 8b       	std	Z+21, r24	; 0x15
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <TermAlg+0x24c>
			else Terms[TermNum].flIsMAXLim = 0;
    2e1e:	15 8a       	std	Z+21, r1	; 0x15
			// если есть тригер по какой-либо границе - запускаем сирену
			if ((Terms[TermNum].flOldIsMINLim==0) && (Terms[TermNum].flIsMINLim==1)) Terms[TermNum].trigMINLim = 1;
    2e20:	f7 01       	movw	r30, r14
    2e22:	a6 e0       	ldi	r26, 0x06	; 6
    2e24:	ee 0f       	add	r30, r30
    2e26:	ff 1f       	adc	r31, r31
    2e28:	aa 95       	dec	r26
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <TermAlg+0x250>
    2e2c:	ef 53       	subi	r30, 0x3F	; 63
    2e2e:	f2 4f       	sbci	r31, 0xF2	; 242
    2e30:	86 89       	ldd	r24, Z+22	; 0x16
    2e32:	88 23       	and	r24, r24
    2e34:	21 f4       	brne	.+8      	; 0x2e3e <TermAlg+0x26a>
    2e36:	84 89       	ldd	r24, Z+20	; 0x14
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <TermAlg+0x26a>
    2e3c:	80 8f       	std	Z+24, r24	; 0x18
			if ((Terms[TermNum].flOldIsMAXLim==0) && (Terms[TermNum].flIsMAXLim==1)) Terms[TermNum].trigMAXLim = 1;
    2e3e:	f7 01       	movw	r30, r14
    2e40:	76 e0       	ldi	r23, 0x06	; 6
    2e42:	ee 0f       	add	r30, r30
    2e44:	ff 1f       	adc	r31, r31
    2e46:	7a 95       	dec	r23
    2e48:	e1 f7       	brne	.-8      	; 0x2e42 <TermAlg+0x26e>
    2e4a:	ef 53       	subi	r30, 0x3F	; 63
    2e4c:	f2 4f       	sbci	r31, 0xF2	; 242
    2e4e:	87 89       	ldd	r24, Z+23	; 0x17
    2e50:	88 23       	and	r24, r24
    2e52:	21 f4       	brne	.+8      	; 0x2e5c <TermAlg+0x288>
    2e54:	85 89       	ldd	r24, Z+21	; 0x15
    2e56:	81 30       	cpi	r24, 0x01	; 1
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <TermAlg+0x288>
    2e5a:	81 8f       	std	Z+25, r24	; 0x19
			
			sprintf(Terms[TermNum].StrTherm, "%dC", Terms[TermNum].Temper.Value);
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <TermAlg+0x28a>
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <TermAlg+0x28c>
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <TermAlg+0x28e>
    2e62:	ed b7       	in	r30, 0x3d	; 61
    2e64:	fe b7       	in	r31, 0x3e	; 62
    2e66:	31 96       	adiw	r30, 0x01	; 1
    2e68:	87 01       	movw	r16, r14
    2e6a:	66 e0       	ldi	r22, 0x06	; 6
    2e6c:	00 0f       	add	r16, r16
    2e6e:	11 1f       	adc	r17, r17
    2e70:	6a 95       	dec	r22
    2e72:	e1 f7       	brne	.-8      	; 0x2e6c <TermAlg+0x298>
    2e74:	c8 01       	movw	r24, r16
    2e76:	85 52       	subi	r24, 0x25	; 37
    2e78:	92 4f       	sbci	r25, 0xF2	; 242
    2e7a:	ad b7       	in	r26, 0x3d	; 61
    2e7c:	be b7       	in	r27, 0x3e	; 62
    2e7e:	12 96       	adiw	r26, 0x02	; 2
    2e80:	9c 93       	st	X, r25
    2e82:	8e 93       	st	-X, r24
    2e84:	11 97       	sbiw	r26, 0x01	; 1
    2e86:	82 ec       	ldi	r24, 0xC2	; 194
    2e88:	96 e0       	ldi	r25, 0x06	; 6
    2e8a:	93 83       	std	Z+3, r25	; 0x03
    2e8c:	82 83       	std	Z+2, r24	; 0x02
    2e8e:	0f 53       	subi	r16, 0x3F	; 63
    2e90:	12 4f       	sbci	r17, 0xF2	; 242
    2e92:	d8 01       	movw	r26, r16
    2e94:	8d 91       	ld	r24, X+
    2e96:	9c 91       	ld	r25, X
    2e98:	95 83       	std	Z+5, r25	; 0x05
    2e9a:	84 83       	std	Z+4, r24	; 0x04
    2e9c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <sprintf>
			Terms[TermNum].TTermAlg = GetTime();
    2ea0:	ed b7       	in	r30, 0x3d	; 61
    2ea2:	fe b7       	in	r31, 0x3e	; 62
    2ea4:	36 96       	adiw	r30, 0x06	; 6
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	fe bf       	out	0x3e, r31	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	ed bf       	out	0x3d, r30	; 61
    2eb0:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2eb4:	d8 01       	movw	r26, r16
    2eb6:	1c 96       	adiw	r26, 0x0c	; 12
    2eb8:	9c 93       	st	X, r25
    2eba:	8e 93       	st	-X, r24
    2ebc:	1b 97       	sbiw	r26, 0x0b	; 11
			Terms[TermNum].swTermAlg = csw040;
    2ebe:	89 e2       	ldi	r24, 0x29	; 41
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	1e 96       	adiw	r26, 0x0e	; 14
    2ec4:	9c 93       	st	X, r25
    2ec6:	8e 93       	st	-X, r24
    2ec8:	1d 97       	sbiw	r26, 0x0d	; 13
    2eca:	12 c0       	rjmp	.+36     	; 0x2ef0 <TermAlg+0x31c>
		break;

		case csw040:
			if ((GetTime() - Terms[TermNum].TTermAlg) > Ticks(5000)) Terms[TermNum].swTermAlg = cswIdle; // 5 сек.
    2ecc:	0e 94 90 00 	call	0x120	; 0x120 <GetTime>
    2ed0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ed2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ed4:	8c 01       	movw	r16, r24
    2ed6:	02 1b       	sub	r16, r18
    2ed8:	13 0b       	sbc	r17, r19
    2eda:	68 e8       	ldi	r22, 0x88	; 136
    2edc:	73 e1       	ldi	r23, 0x13	; 19
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	0e 94 99 00 	call	0x132	; 0x132 <Ticks>
    2ee6:	80 17       	cp	r24, r16
    2ee8:	91 07       	cpc	r25, r17
    2eea:	10 f4       	brcc	.+4      	; 0x2ef0 <TermAlg+0x31c>
    2eec:	1e 86       	std	Y+14, r1	; 0x0e
    2eee:	1d 86       	std	Y+13, r1	; 0x0d
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return RetVal;
}
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    2f02:	08 95       	ret

00002f04 <__fixunssfsi>:
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	0f 93       	push	r16
    2f0a:	1f 93       	push	r17
    2f0c:	7b 01       	movw	r14, r22
    2f0e:	8c 01       	movw	r16, r24
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	5f e4       	ldi	r21, 0x4F	; 79
    2f18:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	8c f0       	brlt	.+34     	; 0x2f42 <__fixunssfsi+0x3e>
    2f20:	c8 01       	movw	r24, r16
    2f22:	b7 01       	movw	r22, r14
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e0       	ldi	r20, 0x00	; 0
    2f2a:	5f e4       	ldi	r21, 0x4F	; 79
    2f2c:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__subsf3>
    2f30:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixsfsi>
    2f34:	9b 01       	movw	r18, r22
    2f36:	ac 01       	movw	r20, r24
    2f38:	20 50       	subi	r18, 0x00	; 0
    2f3a:	30 40       	sbci	r19, 0x00	; 0
    2f3c:	40 40       	sbci	r20, 0x00	; 0
    2f3e:	50 48       	sbci	r21, 0x80	; 128
    2f40:	06 c0       	rjmp	.+12     	; 0x2f4e <__fixunssfsi+0x4a>
    2f42:	c8 01       	movw	r24, r16
    2f44:	b7 01       	movw	r22, r14
    2f46:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixsfsi>
    2f4a:	9b 01       	movw	r18, r22
    2f4c:	ac 01       	movw	r20, r24
    2f4e:	b9 01       	movw	r22, r18
    2f50:	ca 01       	movw	r24, r20
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	08 95       	ret

00002f5c <_fpadd_parts>:
    2f5c:	a0 e0       	ldi	r26, 0x00	; 0
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e4 eb       	ldi	r30, 0xB4	; 180
    2f62:	f7 e1       	ldi	r31, 0x17	; 23
    2f64:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__prologue_saves__>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	2b 01       	movw	r4, r22
    2f6c:	fa 01       	movw	r30, r20
    2f6e:	9c 91       	ld	r25, X
    2f70:	92 30       	cpi	r25, 0x02	; 2
    2f72:	08 f4       	brcc	.+2      	; 0x2f76 <_fpadd_parts+0x1a>
    2f74:	39 c1       	rjmp	.+626    	; 0x31e8 <_fpadd_parts+0x28c>
    2f76:	eb 01       	movw	r28, r22
    2f78:	88 81       	ld	r24, Y
    2f7a:	82 30       	cpi	r24, 0x02	; 2
    2f7c:	08 f4       	brcc	.+2      	; 0x2f80 <_fpadd_parts+0x24>
    2f7e:	33 c1       	rjmp	.+614    	; 0x31e6 <_fpadd_parts+0x28a>
    2f80:	94 30       	cpi	r25, 0x04	; 4
    2f82:	69 f4       	brne	.+26     	; 0x2f9e <_fpadd_parts+0x42>
    2f84:	84 30       	cpi	r24, 0x04	; 4
    2f86:	09 f0       	breq	.+2      	; 0x2f8a <_fpadd_parts+0x2e>
    2f88:	2f c1       	rjmp	.+606    	; 0x31e8 <_fpadd_parts+0x28c>
    2f8a:	11 96       	adiw	r26, 0x01	; 1
    2f8c:	9c 91       	ld	r25, X
    2f8e:	11 97       	sbiw	r26, 0x01	; 1
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	98 17       	cp	r25, r24
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <_fpadd_parts+0x3c>
    2f96:	28 c1       	rjmp	.+592    	; 0x31e8 <_fpadd_parts+0x28c>
    2f98:	a8 ec       	ldi	r26, 0xC8	; 200
    2f9a:	b6 e0       	ldi	r27, 0x06	; 6
    2f9c:	25 c1       	rjmp	.+586    	; 0x31e8 <_fpadd_parts+0x28c>
    2f9e:	84 30       	cpi	r24, 0x04	; 4
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <_fpadd_parts+0x48>
    2fa2:	21 c1       	rjmp	.+578    	; 0x31e6 <_fpadd_parts+0x28a>
    2fa4:	82 30       	cpi	r24, 0x02	; 2
    2fa6:	a9 f4       	brne	.+42     	; 0x2fd2 <_fpadd_parts+0x76>
    2fa8:	92 30       	cpi	r25, 0x02	; 2
    2faa:	09 f0       	breq	.+2      	; 0x2fae <_fpadd_parts+0x52>
    2fac:	1d c1       	rjmp	.+570    	; 0x31e8 <_fpadd_parts+0x28c>
    2fae:	9a 01       	movw	r18, r20
    2fb0:	ad 01       	movw	r20, r26
    2fb2:	88 e0       	ldi	r24, 0x08	; 8
    2fb4:	ea 01       	movw	r28, r20
    2fb6:	09 90       	ld	r0, Y+
    2fb8:	ae 01       	movw	r20, r28
    2fba:	e9 01       	movw	r28, r18
    2fbc:	09 92       	st	Y+, r0
    2fbe:	9e 01       	movw	r18, r28
    2fc0:	81 50       	subi	r24, 0x01	; 1
    2fc2:	c1 f7       	brne	.-16     	; 0x2fb4 <_fpadd_parts+0x58>
    2fc4:	e2 01       	movw	r28, r4
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	11 96       	adiw	r26, 0x01	; 1
    2fca:	9c 91       	ld	r25, X
    2fcc:	89 23       	and	r24, r25
    2fce:	81 83       	std	Z+1, r24	; 0x01
    2fd0:	08 c1       	rjmp	.+528    	; 0x31e2 <_fpadd_parts+0x286>
    2fd2:	92 30       	cpi	r25, 0x02	; 2
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <_fpadd_parts+0x7c>
    2fd6:	07 c1       	rjmp	.+526    	; 0x31e6 <_fpadd_parts+0x28a>
    2fd8:	12 96       	adiw	r26, 0x02	; 2
    2fda:	2d 90       	ld	r2, X+
    2fdc:	3c 90       	ld	r3, X
    2fde:	13 97       	sbiw	r26, 0x03	; 3
    2fe0:	eb 01       	movw	r28, r22
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe6:	14 96       	adiw	r26, 0x04	; 4
    2fe8:	ad 90       	ld	r10, X+
    2fea:	bd 90       	ld	r11, X+
    2fec:	cd 90       	ld	r12, X+
    2fee:	dc 90       	ld	r13, X
    2ff0:	17 97       	sbiw	r26, 0x07	; 7
    2ff2:	ec 80       	ldd	r14, Y+4	; 0x04
    2ff4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff6:	0e 81       	ldd	r16, Y+6	; 0x06
    2ff8:	1f 81       	ldd	r17, Y+7	; 0x07
    2ffa:	91 01       	movw	r18, r2
    2ffc:	28 1b       	sub	r18, r24
    2ffe:	39 0b       	sbc	r19, r25
    3000:	b9 01       	movw	r22, r18
    3002:	37 ff       	sbrs	r19, 7
    3004:	04 c0       	rjmp	.+8      	; 0x300e <_fpadd_parts+0xb2>
    3006:	66 27       	eor	r22, r22
    3008:	77 27       	eor	r23, r23
    300a:	62 1b       	sub	r22, r18
    300c:	73 0b       	sbc	r23, r19
    300e:	60 32       	cpi	r22, 0x20	; 32
    3010:	71 05       	cpc	r23, r1
    3012:	0c f0       	brlt	.+2      	; 0x3016 <_fpadd_parts+0xba>
    3014:	61 c0       	rjmp	.+194    	; 0x30d8 <_fpadd_parts+0x17c>
    3016:	12 16       	cp	r1, r18
    3018:	13 06       	cpc	r1, r19
    301a:	6c f5       	brge	.+90     	; 0x3076 <_fpadd_parts+0x11a>
    301c:	37 01       	movw	r6, r14
    301e:	48 01       	movw	r8, r16
    3020:	06 2e       	mov	r0, r22
    3022:	04 c0       	rjmp	.+8      	; 0x302c <_fpadd_parts+0xd0>
    3024:	96 94       	lsr	r9
    3026:	87 94       	ror	r8
    3028:	77 94       	ror	r7
    302a:	67 94       	ror	r6
    302c:	0a 94       	dec	r0
    302e:	d2 f7       	brpl	.-12     	; 0x3024 <_fpadd_parts+0xc8>
    3030:	21 e0       	ldi	r18, 0x01	; 1
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <_fpadd_parts+0xe6>
    303a:	22 0f       	add	r18, r18
    303c:	33 1f       	adc	r19, r19
    303e:	44 1f       	adc	r20, r20
    3040:	55 1f       	adc	r21, r21
    3042:	6a 95       	dec	r22
    3044:	d2 f7       	brpl	.-12     	; 0x303a <_fpadd_parts+0xde>
    3046:	21 50       	subi	r18, 0x01	; 1
    3048:	30 40       	sbci	r19, 0x00	; 0
    304a:	40 40       	sbci	r20, 0x00	; 0
    304c:	50 40       	sbci	r21, 0x00	; 0
    304e:	2e 21       	and	r18, r14
    3050:	3f 21       	and	r19, r15
    3052:	40 23       	and	r20, r16
    3054:	51 23       	and	r21, r17
    3056:	21 15       	cp	r18, r1
    3058:	31 05       	cpc	r19, r1
    305a:	41 05       	cpc	r20, r1
    305c:	51 05       	cpc	r21, r1
    305e:	21 f0       	breq	.+8      	; 0x3068 <_fpadd_parts+0x10c>
    3060:	21 e0       	ldi	r18, 0x01	; 1
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	79 01       	movw	r14, r18
    306a:	8a 01       	movw	r16, r20
    306c:	e6 28       	or	r14, r6
    306e:	f7 28       	or	r15, r7
    3070:	08 29       	or	r16, r8
    3072:	19 29       	or	r17, r9
    3074:	3c c0       	rjmp	.+120    	; 0x30ee <_fpadd_parts+0x192>
    3076:	23 2b       	or	r18, r19
    3078:	d1 f1       	breq	.+116    	; 0x30ee <_fpadd_parts+0x192>
    307a:	26 0e       	add	r2, r22
    307c:	37 1e       	adc	r3, r23
    307e:	35 01       	movw	r6, r10
    3080:	46 01       	movw	r8, r12
    3082:	06 2e       	mov	r0, r22
    3084:	04 c0       	rjmp	.+8      	; 0x308e <_fpadd_parts+0x132>
    3086:	96 94       	lsr	r9
    3088:	87 94       	ror	r8
    308a:	77 94       	ror	r7
    308c:	67 94       	ror	r6
    308e:	0a 94       	dec	r0
    3090:	d2 f7       	brpl	.-12     	; 0x3086 <_fpadd_parts+0x12a>
    3092:	21 e0       	ldi	r18, 0x01	; 1
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e0       	ldi	r20, 0x00	; 0
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	04 c0       	rjmp	.+8      	; 0x30a4 <_fpadd_parts+0x148>
    309c:	22 0f       	add	r18, r18
    309e:	33 1f       	adc	r19, r19
    30a0:	44 1f       	adc	r20, r20
    30a2:	55 1f       	adc	r21, r21
    30a4:	6a 95       	dec	r22
    30a6:	d2 f7       	brpl	.-12     	; 0x309c <_fpadd_parts+0x140>
    30a8:	21 50       	subi	r18, 0x01	; 1
    30aa:	30 40       	sbci	r19, 0x00	; 0
    30ac:	40 40       	sbci	r20, 0x00	; 0
    30ae:	50 40       	sbci	r21, 0x00	; 0
    30b0:	2a 21       	and	r18, r10
    30b2:	3b 21       	and	r19, r11
    30b4:	4c 21       	and	r20, r12
    30b6:	5d 21       	and	r21, r13
    30b8:	21 15       	cp	r18, r1
    30ba:	31 05       	cpc	r19, r1
    30bc:	41 05       	cpc	r20, r1
    30be:	51 05       	cpc	r21, r1
    30c0:	21 f0       	breq	.+8      	; 0x30ca <_fpadd_parts+0x16e>
    30c2:	21 e0       	ldi	r18, 0x01	; 1
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e0       	ldi	r20, 0x00	; 0
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	59 01       	movw	r10, r18
    30cc:	6a 01       	movw	r12, r20
    30ce:	a6 28       	or	r10, r6
    30d0:	b7 28       	or	r11, r7
    30d2:	c8 28       	or	r12, r8
    30d4:	d9 28       	or	r13, r9
    30d6:	0b c0       	rjmp	.+22     	; 0x30ee <_fpadd_parts+0x192>
    30d8:	82 15       	cp	r24, r2
    30da:	93 05       	cpc	r25, r3
    30dc:	2c f0       	brlt	.+10     	; 0x30e8 <_fpadd_parts+0x18c>
    30de:	1c 01       	movw	r2, r24
    30e0:	aa 24       	eor	r10, r10
    30e2:	bb 24       	eor	r11, r11
    30e4:	65 01       	movw	r12, r10
    30e6:	03 c0       	rjmp	.+6      	; 0x30ee <_fpadd_parts+0x192>
    30e8:	ee 24       	eor	r14, r14
    30ea:	ff 24       	eor	r15, r15
    30ec:	87 01       	movw	r16, r14
    30ee:	11 96       	adiw	r26, 0x01	; 1
    30f0:	9c 91       	ld	r25, X
    30f2:	d2 01       	movw	r26, r4
    30f4:	11 96       	adiw	r26, 0x01	; 1
    30f6:	8c 91       	ld	r24, X
    30f8:	98 17       	cp	r25, r24
    30fa:	09 f4       	brne	.+2      	; 0x30fe <_fpadd_parts+0x1a2>
    30fc:	45 c0       	rjmp	.+138    	; 0x3188 <_fpadd_parts+0x22c>
    30fe:	99 23       	and	r25, r25
    3100:	39 f0       	breq	.+14     	; 0x3110 <_fpadd_parts+0x1b4>
    3102:	a8 01       	movw	r20, r16
    3104:	97 01       	movw	r18, r14
    3106:	2a 19       	sub	r18, r10
    3108:	3b 09       	sbc	r19, r11
    310a:	4c 09       	sbc	r20, r12
    310c:	5d 09       	sbc	r21, r13
    310e:	06 c0       	rjmp	.+12     	; 0x311c <_fpadd_parts+0x1c0>
    3110:	a6 01       	movw	r20, r12
    3112:	95 01       	movw	r18, r10
    3114:	2e 19       	sub	r18, r14
    3116:	3f 09       	sbc	r19, r15
    3118:	40 0b       	sbc	r20, r16
    311a:	51 0b       	sbc	r21, r17
    311c:	57 fd       	sbrc	r21, 7
    311e:	08 c0       	rjmp	.+16     	; 0x3130 <_fpadd_parts+0x1d4>
    3120:	11 82       	std	Z+1, r1	; 0x01
    3122:	33 82       	std	Z+3, r3	; 0x03
    3124:	22 82       	std	Z+2, r2	; 0x02
    3126:	24 83       	std	Z+4, r18	; 0x04
    3128:	35 83       	std	Z+5, r19	; 0x05
    312a:	46 83       	std	Z+6, r20	; 0x06
    312c:	57 83       	std	Z+7, r21	; 0x07
    312e:	1d c0       	rjmp	.+58     	; 0x316a <_fpadd_parts+0x20e>
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	81 83       	std	Z+1, r24	; 0x01
    3134:	33 82       	std	Z+3, r3	; 0x03
    3136:	22 82       	std	Z+2, r2	; 0x02
    3138:	88 27       	eor	r24, r24
    313a:	99 27       	eor	r25, r25
    313c:	dc 01       	movw	r26, r24
    313e:	82 1b       	sub	r24, r18
    3140:	93 0b       	sbc	r25, r19
    3142:	a4 0b       	sbc	r26, r20
    3144:	b5 0b       	sbc	r27, r21
    3146:	84 83       	std	Z+4, r24	; 0x04
    3148:	95 83       	std	Z+5, r25	; 0x05
    314a:	a6 83       	std	Z+6, r26	; 0x06
    314c:	b7 83       	std	Z+7, r27	; 0x07
    314e:	0d c0       	rjmp	.+26     	; 0x316a <_fpadd_parts+0x20e>
    3150:	22 0f       	add	r18, r18
    3152:	33 1f       	adc	r19, r19
    3154:	44 1f       	adc	r20, r20
    3156:	55 1f       	adc	r21, r21
    3158:	24 83       	std	Z+4, r18	; 0x04
    315a:	35 83       	std	Z+5, r19	; 0x05
    315c:	46 83       	std	Z+6, r20	; 0x06
    315e:	57 83       	std	Z+7, r21	; 0x07
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	93 83       	std	Z+3, r25	; 0x03
    3168:	82 83       	std	Z+2, r24	; 0x02
    316a:	24 81       	ldd	r18, Z+4	; 0x04
    316c:	35 81       	ldd	r19, Z+5	; 0x05
    316e:	46 81       	ldd	r20, Z+6	; 0x06
    3170:	57 81       	ldd	r21, Z+7	; 0x07
    3172:	da 01       	movw	r26, r20
    3174:	c9 01       	movw	r24, r18
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	a1 09       	sbc	r26, r1
    317a:	b1 09       	sbc	r27, r1
    317c:	8f 5f       	subi	r24, 0xFF	; 255
    317e:	9f 4f       	sbci	r25, 0xFF	; 255
    3180:	af 4f       	sbci	r26, 0xFF	; 255
    3182:	bf 43       	sbci	r27, 0x3F	; 63
    3184:	28 f3       	brcs	.-54     	; 0x3150 <_fpadd_parts+0x1f4>
    3186:	0b c0       	rjmp	.+22     	; 0x319e <_fpadd_parts+0x242>
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	33 82       	std	Z+3, r3	; 0x03
    318c:	22 82       	std	Z+2, r2	; 0x02
    318e:	ea 0c       	add	r14, r10
    3190:	fb 1c       	adc	r15, r11
    3192:	0c 1d       	adc	r16, r12
    3194:	1d 1d       	adc	r17, r13
    3196:	e4 82       	std	Z+4, r14	; 0x04
    3198:	f5 82       	std	Z+5, r15	; 0x05
    319a:	06 83       	std	Z+6, r16	; 0x06
    319c:	17 83       	std	Z+7, r17	; 0x07
    319e:	83 e0       	ldi	r24, 0x03	; 3
    31a0:	80 83       	st	Z, r24
    31a2:	24 81       	ldd	r18, Z+4	; 0x04
    31a4:	35 81       	ldd	r19, Z+5	; 0x05
    31a6:	46 81       	ldd	r20, Z+6	; 0x06
    31a8:	57 81       	ldd	r21, Z+7	; 0x07
    31aa:	57 ff       	sbrs	r21, 7
    31ac:	1a c0       	rjmp	.+52     	; 0x31e2 <_fpadd_parts+0x286>
    31ae:	c9 01       	movw	r24, r18
    31b0:	aa 27       	eor	r26, r26
    31b2:	97 fd       	sbrc	r25, 7
    31b4:	a0 95       	com	r26
    31b6:	ba 2f       	mov	r27, r26
    31b8:	81 70       	andi	r24, 0x01	; 1
    31ba:	90 70       	andi	r25, 0x00	; 0
    31bc:	a0 70       	andi	r26, 0x00	; 0
    31be:	b0 70       	andi	r27, 0x00	; 0
    31c0:	56 95       	lsr	r21
    31c2:	47 95       	ror	r20
    31c4:	37 95       	ror	r19
    31c6:	27 95       	ror	r18
    31c8:	82 2b       	or	r24, r18
    31ca:	93 2b       	or	r25, r19
    31cc:	a4 2b       	or	r26, r20
    31ce:	b5 2b       	or	r27, r21
    31d0:	84 83       	std	Z+4, r24	; 0x04
    31d2:	95 83       	std	Z+5, r25	; 0x05
    31d4:	a6 83       	std	Z+6, r26	; 0x06
    31d6:	b7 83       	std	Z+7, r27	; 0x07
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	93 83       	std	Z+3, r25	; 0x03
    31e0:	82 83       	std	Z+2, r24	; 0x02
    31e2:	df 01       	movw	r26, r30
    31e4:	01 c0       	rjmp	.+2      	; 0x31e8 <_fpadd_parts+0x28c>
    31e6:	d2 01       	movw	r26, r4
    31e8:	cd 01       	movw	r24, r26
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	e2 e1       	ldi	r30, 0x12	; 18
    31f0:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__epilogue_restores__>

000031f4 <__subsf3>:
    31f4:	a0 e2       	ldi	r26, 0x20	; 32
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e0 e0       	ldi	r30, 0x00	; 0
    31fa:	f9 e1       	ldi	r31, 0x19	; 25
    31fc:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__prologue_saves__+0x18>
    3200:	69 83       	std	Y+1, r22	; 0x01
    3202:	7a 83       	std	Y+2, r23	; 0x02
    3204:	8b 83       	std	Y+3, r24	; 0x03
    3206:	9c 83       	std	Y+4, r25	; 0x04
    3208:	2d 83       	std	Y+5, r18	; 0x05
    320a:	3e 83       	std	Y+6, r19	; 0x06
    320c:	4f 83       	std	Y+7, r20	; 0x07
    320e:	58 87       	std	Y+8, r21	; 0x08
    3210:	e9 e0       	ldi	r30, 0x09	; 9
    3212:	ee 2e       	mov	r14, r30
    3214:	f1 2c       	mov	r15, r1
    3216:	ec 0e       	add	r14, r28
    3218:	fd 1e       	adc	r15, r29
    321a:	ce 01       	movw	r24, r28
    321c:	01 96       	adiw	r24, 0x01	; 1
    321e:	b7 01       	movw	r22, r14
    3220:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    3224:	8e 01       	movw	r16, r28
    3226:	0f 5e       	subi	r16, 0xEF	; 239
    3228:	1f 4f       	sbci	r17, 0xFF	; 255
    322a:	ce 01       	movw	r24, r28
    322c:	05 96       	adiw	r24, 0x05	; 5
    322e:	b8 01       	movw	r22, r16
    3230:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    3234:	8a 89       	ldd	r24, Y+18	; 0x12
    3236:	91 e0       	ldi	r25, 0x01	; 1
    3238:	89 27       	eor	r24, r25
    323a:	8a 8b       	std	Y+18, r24	; 0x12
    323c:	c7 01       	movw	r24, r14
    323e:	b8 01       	movw	r22, r16
    3240:	ae 01       	movw	r20, r28
    3242:	47 5e       	subi	r20, 0xE7	; 231
    3244:	5f 4f       	sbci	r21, 0xFF	; 255
    3246:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_fpadd_parts>
    324a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__pack_f>
    324e:	a0 96       	adiw	r28, 0x20	; 32
    3250:	e6 e0       	ldi	r30, 0x06	; 6
    3252:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__epilogue_restores__+0x18>

00003256 <__addsf3>:
    3256:	a0 e2       	ldi	r26, 0x20	; 32
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e1 e3       	ldi	r30, 0x31	; 49
    325c:	f9 e1       	ldi	r31, 0x19	; 25
    325e:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__prologue_saves__+0x18>
    3262:	69 83       	std	Y+1, r22	; 0x01
    3264:	7a 83       	std	Y+2, r23	; 0x02
    3266:	8b 83       	std	Y+3, r24	; 0x03
    3268:	9c 83       	std	Y+4, r25	; 0x04
    326a:	2d 83       	std	Y+5, r18	; 0x05
    326c:	3e 83       	std	Y+6, r19	; 0x06
    326e:	4f 83       	std	Y+7, r20	; 0x07
    3270:	58 87       	std	Y+8, r21	; 0x08
    3272:	f9 e0       	ldi	r31, 0x09	; 9
    3274:	ef 2e       	mov	r14, r31
    3276:	f1 2c       	mov	r15, r1
    3278:	ec 0e       	add	r14, r28
    327a:	fd 1e       	adc	r15, r29
    327c:	ce 01       	movw	r24, r28
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	b7 01       	movw	r22, r14
    3282:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    3286:	8e 01       	movw	r16, r28
    3288:	0f 5e       	subi	r16, 0xEF	; 239
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	ce 01       	movw	r24, r28
    328e:	05 96       	adiw	r24, 0x05	; 5
    3290:	b8 01       	movw	r22, r16
    3292:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    3296:	c7 01       	movw	r24, r14
    3298:	b8 01       	movw	r22, r16
    329a:	ae 01       	movw	r20, r28
    329c:	47 5e       	subi	r20, 0xE7	; 231
    329e:	5f 4f       	sbci	r21, 0xFF	; 255
    32a0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_fpadd_parts>
    32a4:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__pack_f>
    32a8:	a0 96       	adiw	r28, 0x20	; 32
    32aa:	e6 e0       	ldi	r30, 0x06	; 6
    32ac:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__epilogue_restores__+0x18>

000032b0 <__mulsf3>:
    32b0:	a0 e2       	ldi	r26, 0x20	; 32
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	ee e5       	ldi	r30, 0x5E	; 94
    32b6:	f9 e1       	ldi	r31, 0x19	; 25
    32b8:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__prologue_saves__>
    32bc:	69 83       	std	Y+1, r22	; 0x01
    32be:	7a 83       	std	Y+2, r23	; 0x02
    32c0:	8b 83       	std	Y+3, r24	; 0x03
    32c2:	9c 83       	std	Y+4, r25	; 0x04
    32c4:	2d 83       	std	Y+5, r18	; 0x05
    32c6:	3e 83       	std	Y+6, r19	; 0x06
    32c8:	4f 83       	std	Y+7, r20	; 0x07
    32ca:	58 87       	std	Y+8, r21	; 0x08
    32cc:	ce 01       	movw	r24, r28
    32ce:	01 96       	adiw	r24, 0x01	; 1
    32d0:	be 01       	movw	r22, r28
    32d2:	67 5f       	subi	r22, 0xF7	; 247
    32d4:	7f 4f       	sbci	r23, 0xFF	; 255
    32d6:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    32da:	ce 01       	movw	r24, r28
    32dc:	05 96       	adiw	r24, 0x05	; 5
    32de:	be 01       	movw	r22, r28
    32e0:	6f 5e       	subi	r22, 0xEF	; 239
    32e2:	7f 4f       	sbci	r23, 0xFF	; 255
    32e4:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    32e8:	99 85       	ldd	r25, Y+9	; 0x09
    32ea:	92 30       	cpi	r25, 0x02	; 2
    32ec:	88 f0       	brcs	.+34     	; 0x3310 <__mulsf3+0x60>
    32ee:	89 89       	ldd	r24, Y+17	; 0x11
    32f0:	82 30       	cpi	r24, 0x02	; 2
    32f2:	c8 f0       	brcs	.+50     	; 0x3326 <__mulsf3+0x76>
    32f4:	94 30       	cpi	r25, 0x04	; 4
    32f6:	19 f4       	brne	.+6      	; 0x32fe <__mulsf3+0x4e>
    32f8:	82 30       	cpi	r24, 0x02	; 2
    32fa:	51 f4       	brne	.+20     	; 0x3310 <__mulsf3+0x60>
    32fc:	04 c0       	rjmp	.+8      	; 0x3306 <__mulsf3+0x56>
    32fe:	84 30       	cpi	r24, 0x04	; 4
    3300:	29 f4       	brne	.+10     	; 0x330c <__mulsf3+0x5c>
    3302:	92 30       	cpi	r25, 0x02	; 2
    3304:	81 f4       	brne	.+32     	; 0x3326 <__mulsf3+0x76>
    3306:	88 ec       	ldi	r24, 0xC8	; 200
    3308:	96 e0       	ldi	r25, 0x06	; 6
    330a:	c6 c0       	rjmp	.+396    	; 0x3498 <__mulsf3+0x1e8>
    330c:	92 30       	cpi	r25, 0x02	; 2
    330e:	49 f4       	brne	.+18     	; 0x3322 <__mulsf3+0x72>
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	8a 89       	ldd	r24, Y+18	; 0x12
    3316:	98 13       	cpse	r25, r24
    3318:	21 e0       	ldi	r18, 0x01	; 1
    331a:	2a 87       	std	Y+10, r18	; 0x0a
    331c:	ce 01       	movw	r24, r28
    331e:	09 96       	adiw	r24, 0x09	; 9
    3320:	bb c0       	rjmp	.+374    	; 0x3498 <__mulsf3+0x1e8>
    3322:	82 30       	cpi	r24, 0x02	; 2
    3324:	49 f4       	brne	.+18     	; 0x3338 <__mulsf3+0x88>
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	9a 85       	ldd	r25, Y+10	; 0x0a
    332a:	8a 89       	ldd	r24, Y+18	; 0x12
    332c:	98 13       	cpse	r25, r24
    332e:	21 e0       	ldi	r18, 0x01	; 1
    3330:	2a 8b       	std	Y+18, r18	; 0x12
    3332:	ce 01       	movw	r24, r28
    3334:	41 96       	adiw	r24, 0x11	; 17
    3336:	b0 c0       	rjmp	.+352    	; 0x3498 <__mulsf3+0x1e8>
    3338:	2d 84       	ldd	r2, Y+13	; 0x0d
    333a:	3e 84       	ldd	r3, Y+14	; 0x0e
    333c:	4f 84       	ldd	r4, Y+15	; 0x0f
    333e:	58 88       	ldd	r5, Y+16	; 0x10
    3340:	6d 88       	ldd	r6, Y+21	; 0x15
    3342:	7e 88       	ldd	r7, Y+22	; 0x16
    3344:	8f 88       	ldd	r8, Y+23	; 0x17
    3346:	98 8c       	ldd	r9, Y+24	; 0x18
    3348:	ee 24       	eor	r14, r14
    334a:	ff 24       	eor	r15, r15
    334c:	87 01       	movw	r16, r14
    334e:	aa 24       	eor	r10, r10
    3350:	bb 24       	eor	r11, r11
    3352:	65 01       	movw	r12, r10
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	50 e0       	ldi	r21, 0x00	; 0
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	e0 e0       	ldi	r30, 0x00	; 0
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	c1 01       	movw	r24, r2
    3362:	81 70       	andi	r24, 0x01	; 1
    3364:	90 70       	andi	r25, 0x00	; 0
    3366:	89 2b       	or	r24, r25
    3368:	e9 f0       	breq	.+58     	; 0x33a4 <__mulsf3+0xf4>
    336a:	e6 0c       	add	r14, r6
    336c:	f7 1c       	adc	r15, r7
    336e:	08 1d       	adc	r16, r8
    3370:	19 1d       	adc	r17, r9
    3372:	9a 01       	movw	r18, r20
    3374:	ab 01       	movw	r20, r22
    3376:	2a 0d       	add	r18, r10
    3378:	3b 1d       	adc	r19, r11
    337a:	4c 1d       	adc	r20, r12
    337c:	5d 1d       	adc	r21, r13
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	a0 e0       	ldi	r26, 0x00	; 0
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	e6 14       	cp	r14, r6
    3388:	f7 04       	cpc	r15, r7
    338a:	08 05       	cpc	r16, r8
    338c:	19 05       	cpc	r17, r9
    338e:	20 f4       	brcc	.+8      	; 0x3398 <__mulsf3+0xe8>
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	a0 e0       	ldi	r26, 0x00	; 0
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	ba 01       	movw	r22, r20
    339a:	a9 01       	movw	r20, r18
    339c:	48 0f       	add	r20, r24
    339e:	59 1f       	adc	r21, r25
    33a0:	6a 1f       	adc	r22, r26
    33a2:	7b 1f       	adc	r23, r27
    33a4:	aa 0c       	add	r10, r10
    33a6:	bb 1c       	adc	r11, r11
    33a8:	cc 1c       	adc	r12, r12
    33aa:	dd 1c       	adc	r13, r13
    33ac:	97 fe       	sbrs	r9, 7
    33ae:	08 c0       	rjmp	.+16     	; 0x33c0 <__mulsf3+0x110>
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	a0 e0       	ldi	r26, 0x00	; 0
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	a8 2a       	or	r10, r24
    33ba:	b9 2a       	or	r11, r25
    33bc:	ca 2a       	or	r12, r26
    33be:	db 2a       	or	r13, r27
    33c0:	31 96       	adiw	r30, 0x01	; 1
    33c2:	e0 32       	cpi	r30, 0x20	; 32
    33c4:	f1 05       	cpc	r31, r1
    33c6:	49 f0       	breq	.+18     	; 0x33da <__mulsf3+0x12a>
    33c8:	66 0c       	add	r6, r6
    33ca:	77 1c       	adc	r7, r7
    33cc:	88 1c       	adc	r8, r8
    33ce:	99 1c       	adc	r9, r9
    33d0:	56 94       	lsr	r5
    33d2:	47 94       	ror	r4
    33d4:	37 94       	ror	r3
    33d6:	27 94       	ror	r2
    33d8:	c3 cf       	rjmp	.-122    	; 0x3360 <__mulsf3+0xb0>
    33da:	fa 85       	ldd	r31, Y+10	; 0x0a
    33dc:	ea 89       	ldd	r30, Y+18	; 0x12
    33de:	2b 89       	ldd	r18, Y+19	; 0x13
    33e0:	3c 89       	ldd	r19, Y+20	; 0x14
    33e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    33e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    33e6:	28 0f       	add	r18, r24
    33e8:	39 1f       	adc	r19, r25
    33ea:	2e 5f       	subi	r18, 0xFE	; 254
    33ec:	3f 4f       	sbci	r19, 0xFF	; 255
    33ee:	17 c0       	rjmp	.+46     	; 0x341e <__mulsf3+0x16e>
    33f0:	ca 01       	movw	r24, r20
    33f2:	81 70       	andi	r24, 0x01	; 1
    33f4:	90 70       	andi	r25, 0x00	; 0
    33f6:	89 2b       	or	r24, r25
    33f8:	61 f0       	breq	.+24     	; 0x3412 <__mulsf3+0x162>
    33fa:	16 95       	lsr	r17
    33fc:	07 95       	ror	r16
    33fe:	f7 94       	ror	r15
    3400:	e7 94       	ror	r14
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e8       	ldi	r27, 0x80	; 128
    340a:	e8 2a       	or	r14, r24
    340c:	f9 2a       	or	r15, r25
    340e:	0a 2b       	or	r16, r26
    3410:	1b 2b       	or	r17, r27
    3412:	76 95       	lsr	r23
    3414:	67 95       	ror	r22
    3416:	57 95       	ror	r21
    3418:	47 95       	ror	r20
    341a:	2f 5f       	subi	r18, 0xFF	; 255
    341c:	3f 4f       	sbci	r19, 0xFF	; 255
    341e:	77 fd       	sbrc	r23, 7
    3420:	e7 cf       	rjmp	.-50     	; 0x33f0 <__mulsf3+0x140>
    3422:	0c c0       	rjmp	.+24     	; 0x343c <__mulsf3+0x18c>
    3424:	44 0f       	add	r20, r20
    3426:	55 1f       	adc	r21, r21
    3428:	66 1f       	adc	r22, r22
    342a:	77 1f       	adc	r23, r23
    342c:	17 fd       	sbrc	r17, 7
    342e:	41 60       	ori	r20, 0x01	; 1
    3430:	ee 0c       	add	r14, r14
    3432:	ff 1c       	adc	r15, r15
    3434:	00 1f       	adc	r16, r16
    3436:	11 1f       	adc	r17, r17
    3438:	21 50       	subi	r18, 0x01	; 1
    343a:	30 40       	sbci	r19, 0x00	; 0
    343c:	40 30       	cpi	r20, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	59 07       	cpc	r21, r25
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	69 07       	cpc	r22, r25
    3446:	90 e4       	ldi	r25, 0x40	; 64
    3448:	79 07       	cpc	r23, r25
    344a:	60 f3       	brcs	.-40     	; 0x3424 <__mulsf3+0x174>
    344c:	2b 8f       	std	Y+27, r18	; 0x1b
    344e:	3c 8f       	std	Y+28, r19	; 0x1c
    3450:	db 01       	movw	r26, r22
    3452:	ca 01       	movw	r24, r20
    3454:	8f 77       	andi	r24, 0x7F	; 127
    3456:	90 70       	andi	r25, 0x00	; 0
    3458:	a0 70       	andi	r26, 0x00	; 0
    345a:	b0 70       	andi	r27, 0x00	; 0
    345c:	80 34       	cpi	r24, 0x40	; 64
    345e:	91 05       	cpc	r25, r1
    3460:	a1 05       	cpc	r26, r1
    3462:	b1 05       	cpc	r27, r1
    3464:	61 f4       	brne	.+24     	; 0x347e <__mulsf3+0x1ce>
    3466:	47 fd       	sbrc	r20, 7
    3468:	0a c0       	rjmp	.+20     	; 0x347e <__mulsf3+0x1ce>
    346a:	e1 14       	cp	r14, r1
    346c:	f1 04       	cpc	r15, r1
    346e:	01 05       	cpc	r16, r1
    3470:	11 05       	cpc	r17, r1
    3472:	29 f0       	breq	.+10     	; 0x347e <__mulsf3+0x1ce>
    3474:	40 5c       	subi	r20, 0xC0	; 192
    3476:	5f 4f       	sbci	r21, 0xFF	; 255
    3478:	6f 4f       	sbci	r22, 0xFF	; 255
    347a:	7f 4f       	sbci	r23, 0xFF	; 255
    347c:	40 78       	andi	r20, 0x80	; 128
    347e:	1a 8e       	std	Y+26, r1	; 0x1a
    3480:	fe 17       	cp	r31, r30
    3482:	11 f0       	breq	.+4      	; 0x3488 <__mulsf3+0x1d8>
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	8a 8f       	std	Y+26, r24	; 0x1a
    3488:	4d 8f       	std	Y+29, r20	; 0x1d
    348a:	5e 8f       	std	Y+30, r21	; 0x1e
    348c:	6f 8f       	std	Y+31, r22	; 0x1f
    348e:	78 a3       	std	Y+32, r23	; 0x20
    3490:	83 e0       	ldi	r24, 0x03	; 3
    3492:	89 8f       	std	Y+25, r24	; 0x19
    3494:	ce 01       	movw	r24, r28
    3496:	49 96       	adiw	r24, 0x19	; 25
    3498:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__pack_f>
    349c:	a0 96       	adiw	r28, 0x20	; 32
    349e:	e2 e1       	ldi	r30, 0x12	; 18
    34a0:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__epilogue_restores__>

000034a4 <__gtsf2>:
    34a4:	a8 e1       	ldi	r26, 0x18	; 24
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e8 e5       	ldi	r30, 0x58	; 88
    34aa:	fa e1       	ldi	r31, 0x1A	; 26
    34ac:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__prologue_saves__+0x18>
    34b0:	69 83       	std	Y+1, r22	; 0x01
    34b2:	7a 83       	std	Y+2, r23	; 0x02
    34b4:	8b 83       	std	Y+3, r24	; 0x03
    34b6:	9c 83       	std	Y+4, r25	; 0x04
    34b8:	2d 83       	std	Y+5, r18	; 0x05
    34ba:	3e 83       	std	Y+6, r19	; 0x06
    34bc:	4f 83       	std	Y+7, r20	; 0x07
    34be:	58 87       	std	Y+8, r21	; 0x08
    34c0:	89 e0       	ldi	r24, 0x09	; 9
    34c2:	e8 2e       	mov	r14, r24
    34c4:	f1 2c       	mov	r15, r1
    34c6:	ec 0e       	add	r14, r28
    34c8:	fd 1e       	adc	r15, r29
    34ca:	ce 01       	movw	r24, r28
    34cc:	01 96       	adiw	r24, 0x01	; 1
    34ce:	b7 01       	movw	r22, r14
    34d0:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    34d4:	8e 01       	movw	r16, r28
    34d6:	0f 5e       	subi	r16, 0xEF	; 239
    34d8:	1f 4f       	sbci	r17, 0xFF	; 255
    34da:	ce 01       	movw	r24, r28
    34dc:	05 96       	adiw	r24, 0x05	; 5
    34de:	b8 01       	movw	r22, r16
    34e0:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    34e4:	89 85       	ldd	r24, Y+9	; 0x09
    34e6:	82 30       	cpi	r24, 0x02	; 2
    34e8:	40 f0       	brcs	.+16     	; 0x34fa <__gtsf2+0x56>
    34ea:	89 89       	ldd	r24, Y+17	; 0x11
    34ec:	82 30       	cpi	r24, 0x02	; 2
    34ee:	28 f0       	brcs	.+10     	; 0x34fa <__gtsf2+0x56>
    34f0:	c7 01       	movw	r24, r14
    34f2:	b8 01       	movw	r22, r16
    34f4:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__fpcmp_parts_f>
    34f8:	01 c0       	rjmp	.+2      	; 0x34fc <__gtsf2+0x58>
    34fa:	8f ef       	ldi	r24, 0xFF	; 255
    34fc:	68 96       	adiw	r28, 0x18	; 24
    34fe:	e6 e0       	ldi	r30, 0x06	; 6
    3500:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__epilogue_restores__+0x18>

00003504 <__gesf2>:
    3504:	a8 e1       	ldi	r26, 0x18	; 24
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	e8 e8       	ldi	r30, 0x88	; 136
    350a:	fa e1       	ldi	r31, 0x1A	; 26
    350c:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__prologue_saves__+0x18>
    3510:	69 83       	std	Y+1, r22	; 0x01
    3512:	7a 83       	std	Y+2, r23	; 0x02
    3514:	8b 83       	std	Y+3, r24	; 0x03
    3516:	9c 83       	std	Y+4, r25	; 0x04
    3518:	2d 83       	std	Y+5, r18	; 0x05
    351a:	3e 83       	std	Y+6, r19	; 0x06
    351c:	4f 83       	std	Y+7, r20	; 0x07
    351e:	58 87       	std	Y+8, r21	; 0x08
    3520:	89 e0       	ldi	r24, 0x09	; 9
    3522:	e8 2e       	mov	r14, r24
    3524:	f1 2c       	mov	r15, r1
    3526:	ec 0e       	add	r14, r28
    3528:	fd 1e       	adc	r15, r29
    352a:	ce 01       	movw	r24, r28
    352c:	01 96       	adiw	r24, 0x01	; 1
    352e:	b7 01       	movw	r22, r14
    3530:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    3534:	8e 01       	movw	r16, r28
    3536:	0f 5e       	subi	r16, 0xEF	; 239
    3538:	1f 4f       	sbci	r17, 0xFF	; 255
    353a:	ce 01       	movw	r24, r28
    353c:	05 96       	adiw	r24, 0x05	; 5
    353e:	b8 01       	movw	r22, r16
    3540:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	82 30       	cpi	r24, 0x02	; 2
    3548:	40 f0       	brcs	.+16     	; 0x355a <__gesf2+0x56>
    354a:	89 89       	ldd	r24, Y+17	; 0x11
    354c:	82 30       	cpi	r24, 0x02	; 2
    354e:	28 f0       	brcs	.+10     	; 0x355a <__gesf2+0x56>
    3550:	c7 01       	movw	r24, r14
    3552:	b8 01       	movw	r22, r16
    3554:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__fpcmp_parts_f>
    3558:	01 c0       	rjmp	.+2      	; 0x355c <__gesf2+0x58>
    355a:	8f ef       	ldi	r24, 0xFF	; 255
    355c:	68 96       	adiw	r28, 0x18	; 24
    355e:	e6 e0       	ldi	r30, 0x06	; 6
    3560:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__epilogue_restores__+0x18>

00003564 <__ltsf2>:
    3564:	a8 e1       	ldi	r26, 0x18	; 24
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e8 eb       	ldi	r30, 0xB8	; 184
    356a:	fa e1       	ldi	r31, 0x1A	; 26
    356c:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__prologue_saves__+0x18>
    3570:	69 83       	std	Y+1, r22	; 0x01
    3572:	7a 83       	std	Y+2, r23	; 0x02
    3574:	8b 83       	std	Y+3, r24	; 0x03
    3576:	9c 83       	std	Y+4, r25	; 0x04
    3578:	2d 83       	std	Y+5, r18	; 0x05
    357a:	3e 83       	std	Y+6, r19	; 0x06
    357c:	4f 83       	std	Y+7, r20	; 0x07
    357e:	58 87       	std	Y+8, r21	; 0x08
    3580:	89 e0       	ldi	r24, 0x09	; 9
    3582:	e8 2e       	mov	r14, r24
    3584:	f1 2c       	mov	r15, r1
    3586:	ec 0e       	add	r14, r28
    3588:	fd 1e       	adc	r15, r29
    358a:	ce 01       	movw	r24, r28
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	b7 01       	movw	r22, r14
    3590:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    3594:	8e 01       	movw	r16, r28
    3596:	0f 5e       	subi	r16, 0xEF	; 239
    3598:	1f 4f       	sbci	r17, 0xFF	; 255
    359a:	ce 01       	movw	r24, r28
    359c:	05 96       	adiw	r24, 0x05	; 5
    359e:	b8 01       	movw	r22, r16
    35a0:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    35a4:	89 85       	ldd	r24, Y+9	; 0x09
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	40 f0       	brcs	.+16     	; 0x35ba <__ltsf2+0x56>
    35aa:	89 89       	ldd	r24, Y+17	; 0x11
    35ac:	82 30       	cpi	r24, 0x02	; 2
    35ae:	28 f0       	brcs	.+10     	; 0x35ba <__ltsf2+0x56>
    35b0:	c7 01       	movw	r24, r14
    35b2:	b8 01       	movw	r22, r16
    35b4:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__fpcmp_parts_f>
    35b8:	01 c0       	rjmp	.+2      	; 0x35bc <__ltsf2+0x58>
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	68 96       	adiw	r28, 0x18	; 24
    35be:	e6 e0       	ldi	r30, 0x06	; 6
    35c0:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__epilogue_restores__+0x18>

000035c4 <__floatsisf>:
    35c4:	a8 e0       	ldi	r26, 0x08	; 8
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e8 ee       	ldi	r30, 0xE8	; 232
    35ca:	fa e1       	ldi	r31, 0x1A	; 26
    35cc:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__prologue_saves__+0x12>
    35d0:	9b 01       	movw	r18, r22
    35d2:	ac 01       	movw	r20, r24
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	da 01       	movw	r26, r20
    35da:	c9 01       	movw	r24, r18
    35dc:	88 27       	eor	r24, r24
    35de:	b7 fd       	sbrc	r27, 7
    35e0:	83 95       	inc	r24
    35e2:	99 27       	eor	r25, r25
    35e4:	aa 27       	eor	r26, r26
    35e6:	bb 27       	eor	r27, r27
    35e8:	b8 2e       	mov	r11, r24
    35ea:	21 15       	cp	r18, r1
    35ec:	31 05       	cpc	r19, r1
    35ee:	41 05       	cpc	r20, r1
    35f0:	51 05       	cpc	r21, r1
    35f2:	19 f4       	brne	.+6      	; 0x35fa <__floatsisf+0x36>
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	89 83       	std	Y+1, r24	; 0x01
    35f8:	3a c0       	rjmp	.+116    	; 0x366e <__floatsisf+0xaa>
    35fa:	88 23       	and	r24, r24
    35fc:	a9 f0       	breq	.+42     	; 0x3628 <__floatsisf+0x64>
    35fe:	20 30       	cpi	r18, 0x00	; 0
    3600:	80 e0       	ldi	r24, 0x00	; 0
    3602:	38 07       	cpc	r19, r24
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	48 07       	cpc	r20, r24
    3608:	80 e8       	ldi	r24, 0x80	; 128
    360a:	58 07       	cpc	r21, r24
    360c:	29 f4       	brne	.+10     	; 0x3618 <__floatsisf+0x54>
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	9f ec       	ldi	r25, 0xCF	; 207
    3616:	30 c0       	rjmp	.+96     	; 0x3678 <__floatsisf+0xb4>
    3618:	ee 24       	eor	r14, r14
    361a:	ff 24       	eor	r15, r15
    361c:	87 01       	movw	r16, r14
    361e:	e2 1a       	sub	r14, r18
    3620:	f3 0a       	sbc	r15, r19
    3622:	04 0b       	sbc	r16, r20
    3624:	15 0b       	sbc	r17, r21
    3626:	02 c0       	rjmp	.+4      	; 0x362c <__floatsisf+0x68>
    3628:	79 01       	movw	r14, r18
    362a:	8a 01       	movw	r16, r20
    362c:	8e e1       	ldi	r24, 0x1E	; 30
    362e:	c8 2e       	mov	r12, r24
    3630:	d1 2c       	mov	r13, r1
    3632:	dc 82       	std	Y+4, r13	; 0x04
    3634:	cb 82       	std	Y+3, r12	; 0x03
    3636:	ed 82       	std	Y+5, r14	; 0x05
    3638:	fe 82       	std	Y+6, r15	; 0x06
    363a:	0f 83       	std	Y+7, r16	; 0x07
    363c:	18 87       	std	Y+8, r17	; 0x08
    363e:	c8 01       	movw	r24, r16
    3640:	b7 01       	movw	r22, r14
    3642:	0e 94 94 1b 	call	0x3728	; 0x3728 <__clzsi2>
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	18 16       	cp	r1, r24
    364a:	19 06       	cpc	r1, r25
    364c:	84 f4       	brge	.+32     	; 0x366e <__floatsisf+0xaa>
    364e:	08 2e       	mov	r0, r24
    3650:	04 c0       	rjmp	.+8      	; 0x365a <__floatsisf+0x96>
    3652:	ee 0c       	add	r14, r14
    3654:	ff 1c       	adc	r15, r15
    3656:	00 1f       	adc	r16, r16
    3658:	11 1f       	adc	r17, r17
    365a:	0a 94       	dec	r0
    365c:	d2 f7       	brpl	.-12     	; 0x3652 <__floatsisf+0x8e>
    365e:	ed 82       	std	Y+5, r14	; 0x05
    3660:	fe 82       	std	Y+6, r15	; 0x06
    3662:	0f 83       	std	Y+7, r16	; 0x07
    3664:	18 87       	std	Y+8, r17	; 0x08
    3666:	c8 1a       	sub	r12, r24
    3668:	d9 0a       	sbc	r13, r25
    366a:	dc 82       	std	Y+4, r13	; 0x04
    366c:	cb 82       	std	Y+3, r12	; 0x03
    366e:	ba 82       	std	Y+2, r11	; 0x02
    3670:	ce 01       	movw	r24, r28
    3672:	01 96       	adiw	r24, 0x01	; 1
    3674:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__pack_f>
    3678:	28 96       	adiw	r28, 0x08	; 8
    367a:	e9 e0       	ldi	r30, 0x09	; 9
    367c:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__epilogue_restores__+0x12>

00003680 <__fixsfsi>:
    3680:	ac e0       	ldi	r26, 0x0C	; 12
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e6 e4       	ldi	r30, 0x46	; 70
    3686:	fb e1       	ldi	r31, 0x1B	; 27
    3688:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__prologue_saves__+0x20>
    368c:	69 83       	std	Y+1, r22	; 0x01
    368e:	7a 83       	std	Y+2, r23	; 0x02
    3690:	8b 83       	std	Y+3, r24	; 0x03
    3692:	9c 83       	std	Y+4, r25	; 0x04
    3694:	ce 01       	movw	r24, r28
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	be 01       	movw	r22, r28
    369a:	6b 5f       	subi	r22, 0xFB	; 251
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
    369e:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__unpack_f>
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	82 30       	cpi	r24, 0x02	; 2
    36a6:	61 f1       	breq	.+88     	; 0x3700 <__fixsfsi+0x80>
    36a8:	82 30       	cpi	r24, 0x02	; 2
    36aa:	50 f1       	brcs	.+84     	; 0x3700 <__fixsfsi+0x80>
    36ac:	84 30       	cpi	r24, 0x04	; 4
    36ae:	21 f4       	brne	.+8      	; 0x36b8 <__fixsfsi+0x38>
    36b0:	8e 81       	ldd	r24, Y+6	; 0x06
    36b2:	88 23       	and	r24, r24
    36b4:	51 f1       	breq	.+84     	; 0x370a <__fixsfsi+0x8a>
    36b6:	2e c0       	rjmp	.+92     	; 0x3714 <__fixsfsi+0x94>
    36b8:	2f 81       	ldd	r18, Y+7	; 0x07
    36ba:	38 85       	ldd	r19, Y+8	; 0x08
    36bc:	37 fd       	sbrc	r19, 7
    36be:	20 c0       	rjmp	.+64     	; 0x3700 <__fixsfsi+0x80>
    36c0:	6e 81       	ldd	r22, Y+6	; 0x06
    36c2:	2f 31       	cpi	r18, 0x1F	; 31
    36c4:	31 05       	cpc	r19, r1
    36c6:	1c f0       	brlt	.+6      	; 0x36ce <__fixsfsi+0x4e>
    36c8:	66 23       	and	r22, r22
    36ca:	f9 f0       	breq	.+62     	; 0x370a <__fixsfsi+0x8a>
    36cc:	23 c0       	rjmp	.+70     	; 0x3714 <__fixsfsi+0x94>
    36ce:	8e e1       	ldi	r24, 0x1E	; 30
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	82 1b       	sub	r24, r18
    36d4:	93 0b       	sbc	r25, r19
    36d6:	29 85       	ldd	r18, Y+9	; 0x09
    36d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    36da:	4b 85       	ldd	r20, Y+11	; 0x0b
    36dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    36de:	04 c0       	rjmp	.+8      	; 0x36e8 <__fixsfsi+0x68>
    36e0:	56 95       	lsr	r21
    36e2:	47 95       	ror	r20
    36e4:	37 95       	ror	r19
    36e6:	27 95       	ror	r18
    36e8:	8a 95       	dec	r24
    36ea:	d2 f7       	brpl	.-12     	; 0x36e0 <__fixsfsi+0x60>
    36ec:	66 23       	and	r22, r22
    36ee:	b1 f0       	breq	.+44     	; 0x371c <__fixsfsi+0x9c>
    36f0:	50 95       	com	r21
    36f2:	40 95       	com	r20
    36f4:	30 95       	com	r19
    36f6:	21 95       	neg	r18
    36f8:	3f 4f       	sbci	r19, 0xFF	; 255
    36fa:	4f 4f       	sbci	r20, 0xFF	; 255
    36fc:	5f 4f       	sbci	r21, 0xFF	; 255
    36fe:	0e c0       	rjmp	.+28     	; 0x371c <__fixsfsi+0x9c>
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	09 c0       	rjmp	.+18     	; 0x371c <__fixsfsi+0x9c>
    370a:	2f ef       	ldi	r18, 0xFF	; 255
    370c:	3f ef       	ldi	r19, 0xFF	; 255
    370e:	4f ef       	ldi	r20, 0xFF	; 255
    3710:	5f e7       	ldi	r21, 0x7F	; 127
    3712:	04 c0       	rjmp	.+8      	; 0x371c <__fixsfsi+0x9c>
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	50 e8       	ldi	r21, 0x80	; 128
    371c:	b9 01       	movw	r22, r18
    371e:	ca 01       	movw	r24, r20
    3720:	2c 96       	adiw	r28, 0x0c	; 12
    3722:	e2 e0       	ldi	r30, 0x02	; 2
    3724:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <__epilogue_restores__+0x20>

00003728 <__clzsi2>:
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	7b 01       	movw	r14, r22
    3732:	8c 01       	movw	r16, r24
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	e8 16       	cp	r14, r24
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	f8 06       	cpc	r15, r24
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	08 07       	cpc	r16, r24
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	18 07       	cpc	r17, r24
    3744:	88 f4       	brcc	.+34     	; 0x3768 <__clzsi2+0x40>
    3746:	8f ef       	ldi	r24, 0xFF	; 255
    3748:	e8 16       	cp	r14, r24
    374a:	f1 04       	cpc	r15, r1
    374c:	01 05       	cpc	r16, r1
    374e:	11 05       	cpc	r17, r1
    3750:	31 f0       	breq	.+12     	; 0x375e <__clzsi2+0x36>
    3752:	28 f0       	brcs	.+10     	; 0x375e <__clzsi2+0x36>
    3754:	88 e0       	ldi	r24, 0x08	; 8
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a0 e0       	ldi	r26, 0x00	; 0
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	17 c0       	rjmp	.+46     	; 0x378c <__clzsi2+0x64>
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	a0 e0       	ldi	r26, 0x00	; 0
    3764:	b0 e0       	ldi	r27, 0x00	; 0
    3766:	12 c0       	rjmp	.+36     	; 0x378c <__clzsi2+0x64>
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	e8 16       	cp	r14, r24
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	f8 06       	cpc	r15, r24
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	08 07       	cpc	r16, r24
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	18 07       	cpc	r17, r24
    3778:	28 f0       	brcs	.+10     	; 0x3784 <__clzsi2+0x5c>
    377a:	88 e1       	ldi	r24, 0x18	; 24
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	a0 e0       	ldi	r26, 0x00	; 0
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	04 c0       	rjmp	.+8      	; 0x378c <__clzsi2+0x64>
    3784:	80 e1       	ldi	r24, 0x10	; 16
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	a0 e0       	ldi	r26, 0x00	; 0
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	20 e2       	ldi	r18, 0x20	; 32
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	28 1b       	sub	r18, r24
    3796:	39 0b       	sbc	r19, r25
    3798:	4a 0b       	sbc	r20, r26
    379a:	5b 0b       	sbc	r21, r27
    379c:	04 c0       	rjmp	.+8      	; 0x37a6 <__clzsi2+0x7e>
    379e:	16 95       	lsr	r17
    37a0:	07 95       	ror	r16
    37a2:	f7 94       	ror	r15
    37a4:	e7 94       	ror	r14
    37a6:	8a 95       	dec	r24
    37a8:	d2 f7       	brpl	.-12     	; 0x379e <__clzsi2+0x76>
    37aa:	f7 01       	movw	r30, r14
    37ac:	e0 53       	subi	r30, 0x30	; 48
    37ae:	f9 4f       	sbci	r31, 0xF9	; 249
    37b0:	80 81       	ld	r24, Z
    37b2:	28 1b       	sub	r18, r24
    37b4:	31 09       	sbc	r19, r1
    37b6:	41 09       	sbc	r20, r1
    37b8:	51 09       	sbc	r21, r1
    37ba:	c9 01       	movw	r24, r18
    37bc:	1f 91       	pop	r17
    37be:	0f 91       	pop	r16
    37c0:	ff 90       	pop	r15
    37c2:	ef 90       	pop	r14
    37c4:	08 95       	ret

000037c6 <__pack_f>:
    37c6:	df 92       	push	r13
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	fc 01       	movw	r30, r24
    37d2:	e4 80       	ldd	r14, Z+4	; 0x04
    37d4:	f5 80       	ldd	r15, Z+5	; 0x05
    37d6:	06 81       	ldd	r16, Z+6	; 0x06
    37d8:	17 81       	ldd	r17, Z+7	; 0x07
    37da:	d1 80       	ldd	r13, Z+1	; 0x01
    37dc:	80 81       	ld	r24, Z
    37de:	82 30       	cpi	r24, 0x02	; 2
    37e0:	48 f4       	brcc	.+18     	; 0x37f4 <__pack_f+0x2e>
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	a0 e1       	ldi	r26, 0x10	; 16
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	e8 2a       	or	r14, r24
    37ec:	f9 2a       	or	r15, r25
    37ee:	0a 2b       	or	r16, r26
    37f0:	1b 2b       	or	r17, r27
    37f2:	a5 c0       	rjmp	.+330    	; 0x393e <__pack_f+0x178>
    37f4:	84 30       	cpi	r24, 0x04	; 4
    37f6:	09 f4       	brne	.+2      	; 0x37fa <__pack_f+0x34>
    37f8:	9f c0       	rjmp	.+318    	; 0x3938 <__pack_f+0x172>
    37fa:	82 30       	cpi	r24, 0x02	; 2
    37fc:	21 f4       	brne	.+8      	; 0x3806 <__pack_f+0x40>
    37fe:	ee 24       	eor	r14, r14
    3800:	ff 24       	eor	r15, r15
    3802:	87 01       	movw	r16, r14
    3804:	05 c0       	rjmp	.+10     	; 0x3810 <__pack_f+0x4a>
    3806:	e1 14       	cp	r14, r1
    3808:	f1 04       	cpc	r15, r1
    380a:	01 05       	cpc	r16, r1
    380c:	11 05       	cpc	r17, r1
    380e:	19 f4       	brne	.+6      	; 0x3816 <__pack_f+0x50>
    3810:	e0 e0       	ldi	r30, 0x00	; 0
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	96 c0       	rjmp	.+300    	; 0x3942 <__pack_f+0x17c>
    3816:	62 81       	ldd	r22, Z+2	; 0x02
    3818:	73 81       	ldd	r23, Z+3	; 0x03
    381a:	9f ef       	ldi	r25, 0xFF	; 255
    381c:	62 38       	cpi	r22, 0x82	; 130
    381e:	79 07       	cpc	r23, r25
    3820:	0c f0       	brlt	.+2      	; 0x3824 <__pack_f+0x5e>
    3822:	5b c0       	rjmp	.+182    	; 0x38da <__pack_f+0x114>
    3824:	22 e8       	ldi	r18, 0x82	; 130
    3826:	3f ef       	ldi	r19, 0xFF	; 255
    3828:	26 1b       	sub	r18, r22
    382a:	37 0b       	sbc	r19, r23
    382c:	2a 31       	cpi	r18, 0x1A	; 26
    382e:	31 05       	cpc	r19, r1
    3830:	2c f0       	brlt	.+10     	; 0x383c <__pack_f+0x76>
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e0       	ldi	r20, 0x00	; 0
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	2a c0       	rjmp	.+84     	; 0x3890 <__pack_f+0xca>
    383c:	b8 01       	movw	r22, r16
    383e:	a7 01       	movw	r20, r14
    3840:	02 2e       	mov	r0, r18
    3842:	04 c0       	rjmp	.+8      	; 0x384c <__pack_f+0x86>
    3844:	76 95       	lsr	r23
    3846:	67 95       	ror	r22
    3848:	57 95       	ror	r21
    384a:	47 95       	ror	r20
    384c:	0a 94       	dec	r0
    384e:	d2 f7       	brpl	.-12     	; 0x3844 <__pack_f+0x7e>
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	a0 e0       	ldi	r26, 0x00	; 0
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	04 c0       	rjmp	.+8      	; 0x3862 <__pack_f+0x9c>
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	aa 1f       	adc	r26, r26
    3860:	bb 1f       	adc	r27, r27
    3862:	2a 95       	dec	r18
    3864:	d2 f7       	brpl	.-12     	; 0x385a <__pack_f+0x94>
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	a1 09       	sbc	r26, r1
    386a:	b1 09       	sbc	r27, r1
    386c:	8e 21       	and	r24, r14
    386e:	9f 21       	and	r25, r15
    3870:	a0 23       	and	r26, r16
    3872:	b1 23       	and	r27, r17
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	a1 05       	cpc	r26, r1
    3878:	b1 05       	cpc	r27, r1
    387a:	21 f0       	breq	.+8      	; 0x3884 <__pack_f+0xbe>
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	a0 e0       	ldi	r26, 0x00	; 0
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	9a 01       	movw	r18, r20
    3886:	ab 01       	movw	r20, r22
    3888:	28 2b       	or	r18, r24
    388a:	39 2b       	or	r19, r25
    388c:	4a 2b       	or	r20, r26
    388e:	5b 2b       	or	r21, r27
    3890:	da 01       	movw	r26, r20
    3892:	c9 01       	movw	r24, r18
    3894:	8f 77       	andi	r24, 0x7F	; 127
    3896:	90 70       	andi	r25, 0x00	; 0
    3898:	a0 70       	andi	r26, 0x00	; 0
    389a:	b0 70       	andi	r27, 0x00	; 0
    389c:	80 34       	cpi	r24, 0x40	; 64
    389e:	91 05       	cpc	r25, r1
    38a0:	a1 05       	cpc	r26, r1
    38a2:	b1 05       	cpc	r27, r1
    38a4:	39 f4       	brne	.+14     	; 0x38b4 <__pack_f+0xee>
    38a6:	27 ff       	sbrs	r18, 7
    38a8:	09 c0       	rjmp	.+18     	; 0x38bc <__pack_f+0xf6>
    38aa:	20 5c       	subi	r18, 0xC0	; 192
    38ac:	3f 4f       	sbci	r19, 0xFF	; 255
    38ae:	4f 4f       	sbci	r20, 0xFF	; 255
    38b0:	5f 4f       	sbci	r21, 0xFF	; 255
    38b2:	04 c0       	rjmp	.+8      	; 0x38bc <__pack_f+0xf6>
    38b4:	21 5c       	subi	r18, 0xC1	; 193
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	4f 4f       	sbci	r20, 0xFF	; 255
    38ba:	5f 4f       	sbci	r21, 0xFF	; 255
    38bc:	e0 e0       	ldi	r30, 0x00	; 0
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	20 30       	cpi	r18, 0x00	; 0
    38c2:	a0 e0       	ldi	r26, 0x00	; 0
    38c4:	3a 07       	cpc	r19, r26
    38c6:	a0 e0       	ldi	r26, 0x00	; 0
    38c8:	4a 07       	cpc	r20, r26
    38ca:	a0 e4       	ldi	r26, 0x40	; 64
    38cc:	5a 07       	cpc	r21, r26
    38ce:	10 f0       	brcs	.+4      	; 0x38d4 <__pack_f+0x10e>
    38d0:	e1 e0       	ldi	r30, 0x01	; 1
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	79 01       	movw	r14, r18
    38d6:	8a 01       	movw	r16, r20
    38d8:	27 c0       	rjmp	.+78     	; 0x3928 <__pack_f+0x162>
    38da:	60 38       	cpi	r22, 0x80	; 128
    38dc:	71 05       	cpc	r23, r1
    38de:	64 f5       	brge	.+88     	; 0x3938 <__pack_f+0x172>
    38e0:	fb 01       	movw	r30, r22
    38e2:	e1 58       	subi	r30, 0x81	; 129
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	d8 01       	movw	r26, r16
    38e8:	c7 01       	movw	r24, r14
    38ea:	8f 77       	andi	r24, 0x7F	; 127
    38ec:	90 70       	andi	r25, 0x00	; 0
    38ee:	a0 70       	andi	r26, 0x00	; 0
    38f0:	b0 70       	andi	r27, 0x00	; 0
    38f2:	80 34       	cpi	r24, 0x40	; 64
    38f4:	91 05       	cpc	r25, r1
    38f6:	a1 05       	cpc	r26, r1
    38f8:	b1 05       	cpc	r27, r1
    38fa:	39 f4       	brne	.+14     	; 0x390a <__pack_f+0x144>
    38fc:	e7 fe       	sbrs	r14, 7
    38fe:	0d c0       	rjmp	.+26     	; 0x391a <__pack_f+0x154>
    3900:	80 e4       	ldi	r24, 0x40	; 64
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a0 e0       	ldi	r26, 0x00	; 0
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	04 c0       	rjmp	.+8      	; 0x3912 <__pack_f+0x14c>
    390a:	8f e3       	ldi	r24, 0x3F	; 63
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	a0 e0       	ldi	r26, 0x00	; 0
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e8 0e       	add	r14, r24
    3914:	f9 1e       	adc	r15, r25
    3916:	0a 1f       	adc	r16, r26
    3918:	1b 1f       	adc	r17, r27
    391a:	17 ff       	sbrs	r17, 7
    391c:	05 c0       	rjmp	.+10     	; 0x3928 <__pack_f+0x162>
    391e:	16 95       	lsr	r17
    3920:	07 95       	ror	r16
    3922:	f7 94       	ror	r15
    3924:	e7 94       	ror	r14
    3926:	31 96       	adiw	r30, 0x01	; 1
    3928:	87 e0       	ldi	r24, 0x07	; 7
    392a:	16 95       	lsr	r17
    392c:	07 95       	ror	r16
    392e:	f7 94       	ror	r15
    3930:	e7 94       	ror	r14
    3932:	8a 95       	dec	r24
    3934:	d1 f7       	brne	.-12     	; 0x392a <__pack_f+0x164>
    3936:	05 c0       	rjmp	.+10     	; 0x3942 <__pack_f+0x17c>
    3938:	ee 24       	eor	r14, r14
    393a:	ff 24       	eor	r15, r15
    393c:	87 01       	movw	r16, r14
    393e:	ef ef       	ldi	r30, 0xFF	; 255
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	6e 2f       	mov	r22, r30
    3944:	67 95       	ror	r22
    3946:	66 27       	eor	r22, r22
    3948:	67 95       	ror	r22
    394a:	90 2f       	mov	r25, r16
    394c:	9f 77       	andi	r25, 0x7F	; 127
    394e:	d7 94       	ror	r13
    3950:	dd 24       	eor	r13, r13
    3952:	d7 94       	ror	r13
    3954:	8e 2f       	mov	r24, r30
    3956:	86 95       	lsr	r24
    3958:	49 2f       	mov	r20, r25
    395a:	46 2b       	or	r20, r22
    395c:	58 2f       	mov	r21, r24
    395e:	5d 29       	or	r21, r13
    3960:	b7 01       	movw	r22, r14
    3962:	ca 01       	movw	r24, r20
    3964:	1f 91       	pop	r17
    3966:	0f 91       	pop	r16
    3968:	ff 90       	pop	r15
    396a:	ef 90       	pop	r14
    396c:	df 90       	pop	r13
    396e:	08 95       	ret

00003970 <__unpack_f>:
    3970:	fc 01       	movw	r30, r24
    3972:	db 01       	movw	r26, r22
    3974:	40 81       	ld	r20, Z
    3976:	51 81       	ldd	r21, Z+1	; 0x01
    3978:	22 81       	ldd	r18, Z+2	; 0x02
    397a:	62 2f       	mov	r22, r18
    397c:	6f 77       	andi	r22, 0x7F	; 127
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	22 1f       	adc	r18, r18
    3982:	22 27       	eor	r18, r18
    3984:	22 1f       	adc	r18, r18
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	89 2f       	mov	r24, r25
    398a:	88 0f       	add	r24, r24
    398c:	82 2b       	or	r24, r18
    398e:	28 2f       	mov	r18, r24
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	99 1f       	adc	r25, r25
    3994:	99 27       	eor	r25, r25
    3996:	99 1f       	adc	r25, r25
    3998:	11 96       	adiw	r26, 0x01	; 1
    399a:	9c 93       	st	X, r25
    399c:	11 97       	sbiw	r26, 0x01	; 1
    399e:	21 15       	cp	r18, r1
    39a0:	31 05       	cpc	r19, r1
    39a2:	a9 f5       	brne	.+106    	; 0x3a0e <__unpack_f+0x9e>
    39a4:	41 15       	cp	r20, r1
    39a6:	51 05       	cpc	r21, r1
    39a8:	61 05       	cpc	r22, r1
    39aa:	71 05       	cpc	r23, r1
    39ac:	11 f4       	brne	.+4      	; 0x39b2 <__unpack_f+0x42>
    39ae:	82 e0       	ldi	r24, 0x02	; 2
    39b0:	37 c0       	rjmp	.+110    	; 0x3a20 <__unpack_f+0xb0>
    39b2:	82 e8       	ldi	r24, 0x82	; 130
    39b4:	9f ef       	ldi	r25, 0xFF	; 255
    39b6:	13 96       	adiw	r26, 0x03	; 3
    39b8:	9c 93       	st	X, r25
    39ba:	8e 93       	st	-X, r24
    39bc:	12 97       	sbiw	r26, 0x02	; 2
    39be:	9a 01       	movw	r18, r20
    39c0:	ab 01       	movw	r20, r22
    39c2:	67 e0       	ldi	r22, 0x07	; 7
    39c4:	22 0f       	add	r18, r18
    39c6:	33 1f       	adc	r19, r19
    39c8:	44 1f       	adc	r20, r20
    39ca:	55 1f       	adc	r21, r21
    39cc:	6a 95       	dec	r22
    39ce:	d1 f7       	brne	.-12     	; 0x39c4 <__unpack_f+0x54>
    39d0:	83 e0       	ldi	r24, 0x03	; 3
    39d2:	8c 93       	st	X, r24
    39d4:	0d c0       	rjmp	.+26     	; 0x39f0 <__unpack_f+0x80>
    39d6:	22 0f       	add	r18, r18
    39d8:	33 1f       	adc	r19, r19
    39da:	44 1f       	adc	r20, r20
    39dc:	55 1f       	adc	r21, r21
    39de:	12 96       	adiw	r26, 0x02	; 2
    39e0:	8d 91       	ld	r24, X+
    39e2:	9c 91       	ld	r25, X
    39e4:	13 97       	sbiw	r26, 0x03	; 3
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	13 96       	adiw	r26, 0x03	; 3
    39ea:	9c 93       	st	X, r25
    39ec:	8e 93       	st	-X, r24
    39ee:	12 97       	sbiw	r26, 0x02	; 2
    39f0:	20 30       	cpi	r18, 0x00	; 0
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	38 07       	cpc	r19, r24
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	48 07       	cpc	r20, r24
    39fa:	80 e4       	ldi	r24, 0x40	; 64
    39fc:	58 07       	cpc	r21, r24
    39fe:	58 f3       	brcs	.-42     	; 0x39d6 <__unpack_f+0x66>
    3a00:	14 96       	adiw	r26, 0x04	; 4
    3a02:	2d 93       	st	X+, r18
    3a04:	3d 93       	st	X+, r19
    3a06:	4d 93       	st	X+, r20
    3a08:	5c 93       	st	X, r21
    3a0a:	17 97       	sbiw	r26, 0x07	; 7
    3a0c:	08 95       	ret
    3a0e:	2f 3f       	cpi	r18, 0xFF	; 255
    3a10:	31 05       	cpc	r19, r1
    3a12:	79 f4       	brne	.+30     	; 0x3a32 <__unpack_f+0xc2>
    3a14:	41 15       	cp	r20, r1
    3a16:	51 05       	cpc	r21, r1
    3a18:	61 05       	cpc	r22, r1
    3a1a:	71 05       	cpc	r23, r1
    3a1c:	19 f4       	brne	.+6      	; 0x3a24 <__unpack_f+0xb4>
    3a1e:	84 e0       	ldi	r24, 0x04	; 4
    3a20:	8c 93       	st	X, r24
    3a22:	08 95       	ret
    3a24:	64 ff       	sbrs	r22, 4
    3a26:	03 c0       	rjmp	.+6      	; 0x3a2e <__unpack_f+0xbe>
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	8c 93       	st	X, r24
    3a2c:	12 c0       	rjmp	.+36     	; 0x3a52 <__unpack_f+0xe2>
    3a2e:	1c 92       	st	X, r1
    3a30:	10 c0       	rjmp	.+32     	; 0x3a52 <__unpack_f+0xe2>
    3a32:	2f 57       	subi	r18, 0x7F	; 127
    3a34:	30 40       	sbci	r19, 0x00	; 0
    3a36:	13 96       	adiw	r26, 0x03	; 3
    3a38:	3c 93       	st	X, r19
    3a3a:	2e 93       	st	-X, r18
    3a3c:	12 97       	sbiw	r26, 0x02	; 2
    3a3e:	83 e0       	ldi	r24, 0x03	; 3
    3a40:	8c 93       	st	X, r24
    3a42:	87 e0       	ldi	r24, 0x07	; 7
    3a44:	44 0f       	add	r20, r20
    3a46:	55 1f       	adc	r21, r21
    3a48:	66 1f       	adc	r22, r22
    3a4a:	77 1f       	adc	r23, r23
    3a4c:	8a 95       	dec	r24
    3a4e:	d1 f7       	brne	.-12     	; 0x3a44 <__unpack_f+0xd4>
    3a50:	70 64       	ori	r23, 0x40	; 64
    3a52:	14 96       	adiw	r26, 0x04	; 4
    3a54:	4d 93       	st	X+, r20
    3a56:	5d 93       	st	X+, r21
    3a58:	6d 93       	st	X+, r22
    3a5a:	7c 93       	st	X, r23
    3a5c:	17 97       	sbiw	r26, 0x07	; 7
    3a5e:	08 95       	ret

00003a60 <__fpcmp_parts_f>:
    3a60:	1f 93       	push	r17
    3a62:	dc 01       	movw	r26, r24
    3a64:	fb 01       	movw	r30, r22
    3a66:	9c 91       	ld	r25, X
    3a68:	92 30       	cpi	r25, 0x02	; 2
    3a6a:	08 f4       	brcc	.+2      	; 0x3a6e <__fpcmp_parts_f+0xe>
    3a6c:	47 c0       	rjmp	.+142    	; 0x3afc <__fpcmp_parts_f+0x9c>
    3a6e:	80 81       	ld	r24, Z
    3a70:	82 30       	cpi	r24, 0x02	; 2
    3a72:	08 f4       	brcc	.+2      	; 0x3a76 <__fpcmp_parts_f+0x16>
    3a74:	43 c0       	rjmp	.+134    	; 0x3afc <__fpcmp_parts_f+0x9c>
    3a76:	94 30       	cpi	r25, 0x04	; 4
    3a78:	51 f4       	brne	.+20     	; 0x3a8e <__fpcmp_parts_f+0x2e>
    3a7a:	11 96       	adiw	r26, 0x01	; 1
    3a7c:	1c 91       	ld	r17, X
    3a7e:	84 30       	cpi	r24, 0x04	; 4
    3a80:	99 f5       	brne	.+102    	; 0x3ae8 <__fpcmp_parts_f+0x88>
    3a82:	81 81       	ldd	r24, Z+1	; 0x01
    3a84:	68 2f       	mov	r22, r24
    3a86:	70 e0       	ldi	r23, 0x00	; 0
    3a88:	61 1b       	sub	r22, r17
    3a8a:	71 09       	sbc	r23, r1
    3a8c:	3f c0       	rjmp	.+126    	; 0x3b0c <__fpcmp_parts_f+0xac>
    3a8e:	84 30       	cpi	r24, 0x04	; 4
    3a90:	21 f0       	breq	.+8      	; 0x3a9a <__fpcmp_parts_f+0x3a>
    3a92:	92 30       	cpi	r25, 0x02	; 2
    3a94:	31 f4       	brne	.+12     	; 0x3aa2 <__fpcmp_parts_f+0x42>
    3a96:	82 30       	cpi	r24, 0x02	; 2
    3a98:	b9 f1       	breq	.+110    	; 0x3b08 <__fpcmp_parts_f+0xa8>
    3a9a:	81 81       	ldd	r24, Z+1	; 0x01
    3a9c:	88 23       	and	r24, r24
    3a9e:	89 f1       	breq	.+98     	; 0x3b02 <__fpcmp_parts_f+0xa2>
    3aa0:	2d c0       	rjmp	.+90     	; 0x3afc <__fpcmp_parts_f+0x9c>
    3aa2:	11 96       	adiw	r26, 0x01	; 1
    3aa4:	1c 91       	ld	r17, X
    3aa6:	11 97       	sbiw	r26, 0x01	; 1
    3aa8:	82 30       	cpi	r24, 0x02	; 2
    3aaa:	f1 f0       	breq	.+60     	; 0x3ae8 <__fpcmp_parts_f+0x88>
    3aac:	81 81       	ldd	r24, Z+1	; 0x01
    3aae:	18 17       	cp	r17, r24
    3ab0:	d9 f4       	brne	.+54     	; 0x3ae8 <__fpcmp_parts_f+0x88>
    3ab2:	12 96       	adiw	r26, 0x02	; 2
    3ab4:	2d 91       	ld	r18, X+
    3ab6:	3c 91       	ld	r19, X
    3ab8:	13 97       	sbiw	r26, 0x03	; 3
    3aba:	82 81       	ldd	r24, Z+2	; 0x02
    3abc:	93 81       	ldd	r25, Z+3	; 0x03
    3abe:	82 17       	cp	r24, r18
    3ac0:	93 07       	cpc	r25, r19
    3ac2:	94 f0       	brlt	.+36     	; 0x3ae8 <__fpcmp_parts_f+0x88>
    3ac4:	28 17       	cp	r18, r24
    3ac6:	39 07       	cpc	r19, r25
    3ac8:	bc f0       	brlt	.+46     	; 0x3af8 <__fpcmp_parts_f+0x98>
    3aca:	14 96       	adiw	r26, 0x04	; 4
    3acc:	8d 91       	ld	r24, X+
    3ace:	9d 91       	ld	r25, X+
    3ad0:	0d 90       	ld	r0, X+
    3ad2:	bc 91       	ld	r27, X
    3ad4:	a0 2d       	mov	r26, r0
    3ad6:	24 81       	ldd	r18, Z+4	; 0x04
    3ad8:	35 81       	ldd	r19, Z+5	; 0x05
    3ada:	46 81       	ldd	r20, Z+6	; 0x06
    3adc:	57 81       	ldd	r21, Z+7	; 0x07
    3ade:	28 17       	cp	r18, r24
    3ae0:	39 07       	cpc	r19, r25
    3ae2:	4a 07       	cpc	r20, r26
    3ae4:	5b 07       	cpc	r21, r27
    3ae6:	18 f4       	brcc	.+6      	; 0x3aee <__fpcmp_parts_f+0x8e>
    3ae8:	11 23       	and	r17, r17
    3aea:	41 f0       	breq	.+16     	; 0x3afc <__fpcmp_parts_f+0x9c>
    3aec:	0a c0       	rjmp	.+20     	; 0x3b02 <__fpcmp_parts_f+0xa2>
    3aee:	82 17       	cp	r24, r18
    3af0:	93 07       	cpc	r25, r19
    3af2:	a4 07       	cpc	r26, r20
    3af4:	b5 07       	cpc	r27, r21
    3af6:	40 f4       	brcc	.+16     	; 0x3b08 <__fpcmp_parts_f+0xa8>
    3af8:	11 23       	and	r17, r17
    3afa:	19 f0       	breq	.+6      	; 0x3b02 <__fpcmp_parts_f+0xa2>
    3afc:	61 e0       	ldi	r22, 0x01	; 1
    3afe:	70 e0       	ldi	r23, 0x00	; 0
    3b00:	05 c0       	rjmp	.+10     	; 0x3b0c <__fpcmp_parts_f+0xac>
    3b02:	6f ef       	ldi	r22, 0xFF	; 255
    3b04:	7f ef       	ldi	r23, 0xFF	; 255
    3b06:	02 c0       	rjmp	.+4      	; 0x3b0c <__fpcmp_parts_f+0xac>
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	70 e0       	ldi	r23, 0x00	; 0
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	1f 91       	pop	r17
    3b10:	08 95       	ret

00003b12 <__mulsi3>:
    3b12:	62 9f       	mul	r22, r18
    3b14:	d0 01       	movw	r26, r0
    3b16:	73 9f       	mul	r23, r19
    3b18:	f0 01       	movw	r30, r0
    3b1a:	82 9f       	mul	r24, r18
    3b1c:	e0 0d       	add	r30, r0
    3b1e:	f1 1d       	adc	r31, r1
    3b20:	64 9f       	mul	r22, r20
    3b22:	e0 0d       	add	r30, r0
    3b24:	f1 1d       	adc	r31, r1
    3b26:	92 9f       	mul	r25, r18
    3b28:	f0 0d       	add	r31, r0
    3b2a:	83 9f       	mul	r24, r19
    3b2c:	f0 0d       	add	r31, r0
    3b2e:	74 9f       	mul	r23, r20
    3b30:	f0 0d       	add	r31, r0
    3b32:	65 9f       	mul	r22, r21
    3b34:	f0 0d       	add	r31, r0
    3b36:	99 27       	eor	r25, r25
    3b38:	72 9f       	mul	r23, r18
    3b3a:	b0 0d       	add	r27, r0
    3b3c:	e1 1d       	adc	r30, r1
    3b3e:	f9 1f       	adc	r31, r25
    3b40:	63 9f       	mul	r22, r19
    3b42:	b0 0d       	add	r27, r0
    3b44:	e1 1d       	adc	r30, r1
    3b46:	f9 1f       	adc	r31, r25
    3b48:	bd 01       	movw	r22, r26
    3b4a:	cf 01       	movw	r24, r30
    3b4c:	11 24       	eor	r1, r1
    3b4e:	08 95       	ret

00003b50 <__udivmodsi4>:
    3b50:	a1 e2       	ldi	r26, 0x21	; 33
    3b52:	1a 2e       	mov	r1, r26
    3b54:	aa 1b       	sub	r26, r26
    3b56:	bb 1b       	sub	r27, r27
    3b58:	fd 01       	movw	r30, r26
    3b5a:	0d c0       	rjmp	.+26     	; 0x3b76 <__udivmodsi4_ep>

00003b5c <__udivmodsi4_loop>:
    3b5c:	aa 1f       	adc	r26, r26
    3b5e:	bb 1f       	adc	r27, r27
    3b60:	ee 1f       	adc	r30, r30
    3b62:	ff 1f       	adc	r31, r31
    3b64:	a2 17       	cp	r26, r18
    3b66:	b3 07       	cpc	r27, r19
    3b68:	e4 07       	cpc	r30, r20
    3b6a:	f5 07       	cpc	r31, r21
    3b6c:	20 f0       	brcs	.+8      	; 0x3b76 <__udivmodsi4_ep>
    3b6e:	a2 1b       	sub	r26, r18
    3b70:	b3 0b       	sbc	r27, r19
    3b72:	e4 0b       	sbc	r30, r20
    3b74:	f5 0b       	sbc	r31, r21

00003b76 <__udivmodsi4_ep>:
    3b76:	66 1f       	adc	r22, r22
    3b78:	77 1f       	adc	r23, r23
    3b7a:	88 1f       	adc	r24, r24
    3b7c:	99 1f       	adc	r25, r25
    3b7e:	1a 94       	dec	r1
    3b80:	69 f7       	brne	.-38     	; 0x3b5c <__udivmodsi4_loop>
    3b82:	60 95       	com	r22
    3b84:	70 95       	com	r23
    3b86:	80 95       	com	r24
    3b88:	90 95       	com	r25
    3b8a:	9b 01       	movw	r18, r22
    3b8c:	ac 01       	movw	r20, r24
    3b8e:	bd 01       	movw	r22, r26
    3b90:	cf 01       	movw	r24, r30
    3b92:	08 95       	ret

00003b94 <__prologue_saves__>:
    3b94:	2f 92       	push	r2
    3b96:	3f 92       	push	r3
    3b98:	4f 92       	push	r4
    3b9a:	5f 92       	push	r5
    3b9c:	6f 92       	push	r6
    3b9e:	7f 92       	push	r7
    3ba0:	8f 92       	push	r8
    3ba2:	9f 92       	push	r9
    3ba4:	af 92       	push	r10
    3ba6:	bf 92       	push	r11
    3ba8:	cf 92       	push	r12
    3baa:	df 92       	push	r13
    3bac:	ef 92       	push	r14
    3bae:	ff 92       	push	r15
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
    3bbc:	ca 1b       	sub	r28, r26
    3bbe:	db 0b       	sbc	r29, r27
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
    3bca:	09 94       	ijmp

00003bcc <__epilogue_restores__>:
    3bcc:	2a 88       	ldd	r2, Y+18	; 0x12
    3bce:	39 88       	ldd	r3, Y+17	; 0x11
    3bd0:	48 88       	ldd	r4, Y+16	; 0x10
    3bd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bda:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bde:	b9 84       	ldd	r11, Y+9	; 0x09
    3be0:	c8 84       	ldd	r12, Y+8	; 0x08
    3be2:	df 80       	ldd	r13, Y+7	; 0x07
    3be4:	ee 80       	ldd	r14, Y+6	; 0x06
    3be6:	fd 80       	ldd	r15, Y+5	; 0x05
    3be8:	0c 81       	ldd	r16, Y+4	; 0x04
    3bea:	1b 81       	ldd	r17, Y+3	; 0x03
    3bec:	aa 81       	ldd	r26, Y+2	; 0x02
    3bee:	b9 81       	ldd	r27, Y+1	; 0x01
    3bf0:	ce 0f       	add	r28, r30
    3bf2:	d1 1d       	adc	r29, r1
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	cd bf       	out	0x3d, r28	; 61
    3bfe:	ed 01       	movw	r28, r26
    3c00:	08 95       	ret

00003c02 <atoi>:
    3c02:	fc 01       	movw	r30, r24
    3c04:	88 27       	eor	r24, r24
    3c06:	99 27       	eor	r25, r25
    3c08:	e8 94       	clt
    3c0a:	21 91       	ld	r18, Z+
    3c0c:	20 32       	cpi	r18, 0x20	; 32
    3c0e:	e9 f3       	breq	.-6      	; 0x3c0a <atoi+0x8>
    3c10:	29 30       	cpi	r18, 0x09	; 9
    3c12:	10 f0       	brcs	.+4      	; 0x3c18 <atoi+0x16>
    3c14:	2e 30       	cpi	r18, 0x0E	; 14
    3c16:	c8 f3       	brcs	.-14     	; 0x3c0a <atoi+0x8>
    3c18:	2b 32       	cpi	r18, 0x2B	; 43
    3c1a:	41 f0       	breq	.+16     	; 0x3c2c <atoi+0x2a>
    3c1c:	2d 32       	cpi	r18, 0x2D	; 45
    3c1e:	39 f4       	brne	.+14     	; 0x3c2e <atoi+0x2c>
    3c20:	68 94       	set
    3c22:	04 c0       	rjmp	.+8      	; 0x3c2c <atoi+0x2a>
    3c24:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulhi_const_10>
    3c28:	82 0f       	add	r24, r18
    3c2a:	91 1d       	adc	r25, r1
    3c2c:	21 91       	ld	r18, Z+
    3c2e:	20 53       	subi	r18, 0x30	; 48
    3c30:	2a 30       	cpi	r18, 0x0A	; 10
    3c32:	c0 f3       	brcs	.-16     	; 0x3c24 <atoi+0x22>
    3c34:	1e f4       	brtc	.+6      	; 0x3c3c <atoi+0x3a>
    3c36:	90 95       	com	r25
    3c38:	81 95       	neg	r24
    3c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3c:	08 95       	ret

00003c3e <strcat>:
    3c3e:	fb 01       	movw	r30, r22
    3c40:	dc 01       	movw	r26, r24
    3c42:	0d 90       	ld	r0, X+
    3c44:	00 20       	and	r0, r0
    3c46:	e9 f7       	brne	.-6      	; 0x3c42 <strcat+0x4>
    3c48:	11 97       	sbiw	r26, 0x01	; 1
    3c4a:	01 90       	ld	r0, Z+
    3c4c:	0d 92       	st	X+, r0
    3c4e:	00 20       	and	r0, r0
    3c50:	e1 f7       	brne	.-8      	; 0x3c4a <strcat+0xc>
    3c52:	08 95       	ret

00003c54 <strchr>:
    3c54:	fc 01       	movw	r30, r24
    3c56:	81 91       	ld	r24, Z+
    3c58:	86 17       	cp	r24, r22
    3c5a:	21 f0       	breq	.+8      	; 0x3c64 <strchr+0x10>
    3c5c:	88 23       	and	r24, r24
    3c5e:	d9 f7       	brne	.-10     	; 0x3c56 <strchr+0x2>
    3c60:	99 27       	eor	r25, r25
    3c62:	08 95       	ret
    3c64:	31 97       	sbiw	r30, 0x01	; 1
    3c66:	cf 01       	movw	r24, r30
    3c68:	08 95       	ret

00003c6a <strcpy>:
    3c6a:	fb 01       	movw	r30, r22
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	01 90       	ld	r0, Z+
    3c70:	0d 92       	st	X+, r0
    3c72:	00 20       	and	r0, r0
    3c74:	e1 f7       	brne	.-8      	; 0x3c6e <strcpy+0x4>
    3c76:	08 95       	ret

00003c78 <strncat>:
    3c78:	fb 01       	movw	r30, r22
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	0d 90       	ld	r0, X+
    3c7e:	00 20       	and	r0, r0
    3c80:	e9 f7       	brne	.-6      	; 0x3c7c <strncat+0x4>
    3c82:	11 97       	sbiw	r26, 0x01	; 1
    3c84:	41 50       	subi	r20, 0x01	; 1
    3c86:	50 40       	sbci	r21, 0x00	; 0
    3c88:	28 f0       	brcs	.+10     	; 0x3c94 <strncat+0x1c>
    3c8a:	01 90       	ld	r0, Z+
    3c8c:	00 20       	and	r0, r0
    3c8e:	0d 92       	st	X+, r0
    3c90:	c9 f7       	brne	.-14     	; 0x3c84 <strncat+0xc>
    3c92:	08 95       	ret
    3c94:	1c 92       	st	X, r1
    3c96:	08 95       	ret

00003c98 <strncmp>:
    3c98:	fb 01       	movw	r30, r22
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	41 50       	subi	r20, 0x01	; 1
    3c9e:	50 40       	sbci	r21, 0x00	; 0
    3ca0:	30 f0       	brcs	.+12     	; 0x3cae <strncmp+0x16>
    3ca2:	8d 91       	ld	r24, X+
    3ca4:	01 90       	ld	r0, Z+
    3ca6:	80 19       	sub	r24, r0
    3ca8:	19 f4       	brne	.+6      	; 0x3cb0 <strncmp+0x18>
    3caa:	00 20       	and	r0, r0
    3cac:	b9 f7       	brne	.-18     	; 0x3c9c <strncmp+0x4>
    3cae:	88 1b       	sub	r24, r24
    3cb0:	99 0b       	sbc	r25, r25
    3cb2:	08 95       	ret

00003cb4 <strncpy>:
    3cb4:	fb 01       	movw	r30, r22
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	41 50       	subi	r20, 0x01	; 1
    3cba:	50 40       	sbci	r21, 0x00	; 0
    3cbc:	48 f0       	brcs	.+18     	; 0x3cd0 <strncpy+0x1c>
    3cbe:	01 90       	ld	r0, Z+
    3cc0:	0d 92       	st	X+, r0
    3cc2:	00 20       	and	r0, r0
    3cc4:	c9 f7       	brne	.-14     	; 0x3cb8 <strncpy+0x4>
    3cc6:	01 c0       	rjmp	.+2      	; 0x3cca <strncpy+0x16>
    3cc8:	1d 92       	st	X+, r1
    3cca:	41 50       	subi	r20, 0x01	; 1
    3ccc:	50 40       	sbci	r21, 0x00	; 0
    3cce:	e0 f7       	brcc	.-8      	; 0x3cc8 <strncpy+0x14>
    3cd0:	08 95       	ret

00003cd2 <strstr>:
    3cd2:	fb 01       	movw	r30, r22
    3cd4:	51 91       	ld	r21, Z+
    3cd6:	55 23       	and	r21, r21
    3cd8:	a9 f0       	breq	.+42     	; 0x3d04 <strstr+0x32>
    3cda:	bf 01       	movw	r22, r30
    3cdc:	dc 01       	movw	r26, r24
    3cde:	4d 91       	ld	r20, X+
    3ce0:	45 17       	cp	r20, r21
    3ce2:	41 11       	cpse	r20, r1
    3ce4:	e1 f7       	brne	.-8      	; 0x3cde <strstr+0xc>
    3ce6:	59 f4       	brne	.+22     	; 0x3cfe <strstr+0x2c>
    3ce8:	cd 01       	movw	r24, r26
    3cea:	01 90       	ld	r0, Z+
    3cec:	00 20       	and	r0, r0
    3cee:	49 f0       	breq	.+18     	; 0x3d02 <strstr+0x30>
    3cf0:	4d 91       	ld	r20, X+
    3cf2:	40 15       	cp	r20, r0
    3cf4:	41 11       	cpse	r20, r1
    3cf6:	c9 f3       	breq	.-14     	; 0x3cea <strstr+0x18>
    3cf8:	fb 01       	movw	r30, r22
    3cfa:	41 11       	cpse	r20, r1
    3cfc:	ef cf       	rjmp	.-34     	; 0x3cdc <strstr+0xa>
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	08 95       	ret

00003d06 <itoa>:
    3d06:	fb 01       	movw	r30, r22
    3d08:	9f 01       	movw	r18, r30
    3d0a:	e8 94       	clt
    3d0c:	42 30       	cpi	r20, 0x02	; 2
    3d0e:	c4 f0       	brlt	.+48     	; 0x3d40 <itoa+0x3a>
    3d10:	45 32       	cpi	r20, 0x25	; 37
    3d12:	b4 f4       	brge	.+44     	; 0x3d40 <itoa+0x3a>
    3d14:	4a 30       	cpi	r20, 0x0A	; 10
    3d16:	29 f4       	brne	.+10     	; 0x3d22 <itoa+0x1c>
    3d18:	97 fb       	bst	r25, 7
    3d1a:	1e f4       	brtc	.+6      	; 0x3d22 <itoa+0x1c>
    3d1c:	90 95       	com	r25
    3d1e:	81 95       	neg	r24
    3d20:	9f 4f       	sbci	r25, 0xFF	; 255
    3d22:	64 2f       	mov	r22, r20
    3d24:	77 27       	eor	r23, r23
    3d26:	0e 94 93 21 	call	0x4326	; 0x4326 <__udivmodhi4>
    3d2a:	80 5d       	subi	r24, 0xD0	; 208
    3d2c:	8a 33       	cpi	r24, 0x3A	; 58
    3d2e:	0c f0       	brlt	.+2      	; 0x3d32 <itoa+0x2c>
    3d30:	89 5d       	subi	r24, 0xD9	; 217
    3d32:	81 93       	st	Z+, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	a1 f7       	brne	.-24     	; 0x3d22 <itoa+0x1c>
    3d3a:	16 f4       	brtc	.+4      	; 0x3d40 <itoa+0x3a>
    3d3c:	5d e2       	ldi	r21, 0x2D	; 45
    3d3e:	51 93       	st	Z+, r21
    3d40:	10 82       	st	Z, r1
    3d42:	c9 01       	movw	r24, r18
    3d44:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <strrev>

00003d48 <__mulhi_const_10>:
    3d48:	7a e0       	ldi	r23, 0x0A	; 10
    3d4a:	97 9f       	mul	r25, r23
    3d4c:	90 2d       	mov	r25, r0
    3d4e:	87 9f       	mul	r24, r23
    3d50:	80 2d       	mov	r24, r0
    3d52:	91 0d       	add	r25, r1
    3d54:	11 24       	eor	r1, r1
    3d56:	08 95       	ret

00003d58 <sprintf>:
    3d58:	0f 93       	push	r16
    3d5a:	1f 93       	push	r17
    3d5c:	df 93       	push	r29
    3d5e:	cf 93       	push	r28
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	2e 97       	sbiw	r28, 0x0e	; 14
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	0d 89       	ldd	r16, Y+21	; 0x15
    3d72:	1e 89       	ldd	r17, Y+22	; 0x16
    3d74:	86 e0       	ldi	r24, 0x06	; 6
    3d76:	8c 83       	std	Y+4, r24	; 0x04
    3d78:	1a 83       	std	Y+2, r17	; 0x02
    3d7a:	09 83       	std	Y+1, r16	; 0x01
    3d7c:	8f ef       	ldi	r24, 0xFF	; 255
    3d7e:	9f e7       	ldi	r25, 0x7F	; 127
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	9e 01       	movw	r18, r28
    3d86:	27 5e       	subi	r18, 0xE7	; 231
    3d88:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	6f 89       	ldd	r22, Y+23	; 0x17
    3d90:	78 8d       	ldd	r23, Y+24	; 0x18
    3d92:	a9 01       	movw	r20, r18
    3d94:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <vfprintf>
    3d98:	2f 81       	ldd	r18, Y+7	; 0x07
    3d9a:	38 85       	ldd	r19, Y+8	; 0x08
    3d9c:	02 0f       	add	r16, r18
    3d9e:	13 1f       	adc	r17, r19
    3da0:	f8 01       	movw	r30, r16
    3da2:	10 82       	st	Z, r1
    3da4:	2e 96       	adiw	r28, 0x0e	; 14
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	08 95       	ret

00003dba <vfprintf>:
    3dba:	2f 92       	push	r2
    3dbc:	3f 92       	push	r3
    3dbe:	4f 92       	push	r4
    3dc0:	5f 92       	push	r5
    3dc2:	6f 92       	push	r6
    3dc4:	7f 92       	push	r7
    3dc6:	8f 92       	push	r8
    3dc8:	9f 92       	push	r9
    3dca:	af 92       	push	r10
    3dcc:	bf 92       	push	r11
    3dce:	cf 92       	push	r12
    3dd0:	df 92       	push	r13
    3dd2:	ef 92       	push	r14
    3dd4:	ff 92       	push	r15
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	2b 97       	sbiw	r28, 0x0b	; 11
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	3c 01       	movw	r6, r24
    3df0:	2b 01       	movw	r4, r22
    3df2:	5a 01       	movw	r10, r20
    3df4:	fc 01       	movw	r30, r24
    3df6:	17 82       	std	Z+7, r1	; 0x07
    3df8:	16 82       	std	Z+6, r1	; 0x06
    3dfa:	83 81       	ldd	r24, Z+3	; 0x03
    3dfc:	81 fd       	sbrc	r24, 1
    3dfe:	03 c0       	rjmp	.+6      	; 0x3e06 <vfprintf+0x4c>
    3e00:	6f ef       	ldi	r22, 0xFF	; 255
    3e02:	7f ef       	ldi	r23, 0xFF	; 255
    3e04:	c6 c1       	rjmp	.+908    	; 0x4192 <vfprintf+0x3d8>
    3e06:	9a e0       	ldi	r25, 0x0A	; 10
    3e08:	89 2e       	mov	r8, r25
    3e0a:	1e 01       	movw	r2, r28
    3e0c:	08 94       	sec
    3e0e:	21 1c       	adc	r2, r1
    3e10:	31 1c       	adc	r3, r1
    3e12:	f3 01       	movw	r30, r6
    3e14:	23 81       	ldd	r18, Z+3	; 0x03
    3e16:	f2 01       	movw	r30, r4
    3e18:	23 fd       	sbrc	r18, 3
    3e1a:	85 91       	lpm	r24, Z+
    3e1c:	23 ff       	sbrs	r18, 3
    3e1e:	81 91       	ld	r24, Z+
    3e20:	2f 01       	movw	r4, r30
    3e22:	88 23       	and	r24, r24
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <vfprintf+0x6e>
    3e26:	b2 c1       	rjmp	.+868    	; 0x418c <vfprintf+0x3d2>
    3e28:	85 32       	cpi	r24, 0x25	; 37
    3e2a:	39 f4       	brne	.+14     	; 0x3e3a <vfprintf+0x80>
    3e2c:	23 fd       	sbrc	r18, 3
    3e2e:	85 91       	lpm	r24, Z+
    3e30:	23 ff       	sbrs	r18, 3
    3e32:	81 91       	ld	r24, Z+
    3e34:	2f 01       	movw	r4, r30
    3e36:	85 32       	cpi	r24, 0x25	; 37
    3e38:	29 f4       	brne	.+10     	; 0x3e44 <vfprintf+0x8a>
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	b3 01       	movw	r22, r6
    3e3e:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    3e42:	e7 cf       	rjmp	.-50     	; 0x3e12 <vfprintf+0x58>
    3e44:	98 2f       	mov	r25, r24
    3e46:	ff 24       	eor	r15, r15
    3e48:	ee 24       	eor	r14, r14
    3e4a:	99 24       	eor	r9, r9
    3e4c:	ff e1       	ldi	r31, 0x1F	; 31
    3e4e:	ff 15       	cp	r31, r15
    3e50:	d0 f0       	brcs	.+52     	; 0x3e86 <vfprintf+0xcc>
    3e52:	9b 32       	cpi	r25, 0x2B	; 43
    3e54:	69 f0       	breq	.+26     	; 0x3e70 <vfprintf+0xb6>
    3e56:	9c 32       	cpi	r25, 0x2C	; 44
    3e58:	28 f4       	brcc	.+10     	; 0x3e64 <vfprintf+0xaa>
    3e5a:	90 32       	cpi	r25, 0x20	; 32
    3e5c:	59 f0       	breq	.+22     	; 0x3e74 <vfprintf+0xba>
    3e5e:	93 32       	cpi	r25, 0x23	; 35
    3e60:	91 f4       	brne	.+36     	; 0x3e86 <vfprintf+0xcc>
    3e62:	0e c0       	rjmp	.+28     	; 0x3e80 <vfprintf+0xc6>
    3e64:	9d 32       	cpi	r25, 0x2D	; 45
    3e66:	49 f0       	breq	.+18     	; 0x3e7a <vfprintf+0xc0>
    3e68:	90 33       	cpi	r25, 0x30	; 48
    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <vfprintf+0xcc>
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	24 c0       	rjmp	.+72     	; 0x3eb8 <vfprintf+0xfe>
    3e70:	52 e0       	ldi	r21, 0x02	; 2
    3e72:	f5 2a       	or	r15, r21
    3e74:	84 e0       	ldi	r24, 0x04	; 4
    3e76:	f8 2a       	or	r15, r24
    3e78:	28 c0       	rjmp	.+80     	; 0x3eca <vfprintf+0x110>
    3e7a:	98 e0       	ldi	r25, 0x08	; 8
    3e7c:	f9 2a       	or	r15, r25
    3e7e:	25 c0       	rjmp	.+74     	; 0x3eca <vfprintf+0x110>
    3e80:	e0 e1       	ldi	r30, 0x10	; 16
    3e82:	fe 2a       	or	r15, r30
    3e84:	22 c0       	rjmp	.+68     	; 0x3eca <vfprintf+0x110>
    3e86:	f7 fc       	sbrc	r15, 7
    3e88:	29 c0       	rjmp	.+82     	; 0x3edc <vfprintf+0x122>
    3e8a:	89 2f       	mov	r24, r25
    3e8c:	80 53       	subi	r24, 0x30	; 48
    3e8e:	8a 30       	cpi	r24, 0x0A	; 10
    3e90:	70 f4       	brcc	.+28     	; 0x3eae <vfprintf+0xf4>
    3e92:	f6 fe       	sbrs	r15, 6
    3e94:	05 c0       	rjmp	.+10     	; 0x3ea0 <vfprintf+0xe6>
    3e96:	98 9c       	mul	r9, r8
    3e98:	90 2c       	mov	r9, r0
    3e9a:	11 24       	eor	r1, r1
    3e9c:	98 0e       	add	r9, r24
    3e9e:	15 c0       	rjmp	.+42     	; 0x3eca <vfprintf+0x110>
    3ea0:	e8 9c       	mul	r14, r8
    3ea2:	e0 2c       	mov	r14, r0
    3ea4:	11 24       	eor	r1, r1
    3ea6:	e8 0e       	add	r14, r24
    3ea8:	f0 e2       	ldi	r31, 0x20	; 32
    3eaa:	ff 2a       	or	r15, r31
    3eac:	0e c0       	rjmp	.+28     	; 0x3eca <vfprintf+0x110>
    3eae:	9e 32       	cpi	r25, 0x2E	; 46
    3eb0:	29 f4       	brne	.+10     	; 0x3ebc <vfprintf+0x102>
    3eb2:	f6 fc       	sbrc	r15, 6
    3eb4:	6b c1       	rjmp	.+726    	; 0x418c <vfprintf+0x3d2>
    3eb6:	40 e4       	ldi	r20, 0x40	; 64
    3eb8:	f4 2a       	or	r15, r20
    3eba:	07 c0       	rjmp	.+14     	; 0x3eca <vfprintf+0x110>
    3ebc:	9c 36       	cpi	r25, 0x6C	; 108
    3ebe:	19 f4       	brne	.+6      	; 0x3ec6 <vfprintf+0x10c>
    3ec0:	50 e8       	ldi	r21, 0x80	; 128
    3ec2:	f5 2a       	or	r15, r21
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <vfprintf+0x110>
    3ec6:	98 36       	cpi	r25, 0x68	; 104
    3ec8:	49 f4       	brne	.+18     	; 0x3edc <vfprintf+0x122>
    3eca:	f2 01       	movw	r30, r4
    3ecc:	23 fd       	sbrc	r18, 3
    3ece:	95 91       	lpm	r25, Z+
    3ed0:	23 ff       	sbrs	r18, 3
    3ed2:	91 91       	ld	r25, Z+
    3ed4:	2f 01       	movw	r4, r30
    3ed6:	99 23       	and	r25, r25
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <vfprintf+0x122>
    3eda:	b8 cf       	rjmp	.-144    	; 0x3e4c <vfprintf+0x92>
    3edc:	89 2f       	mov	r24, r25
    3ede:	85 54       	subi	r24, 0x45	; 69
    3ee0:	83 30       	cpi	r24, 0x03	; 3
    3ee2:	18 f0       	brcs	.+6      	; 0x3eea <vfprintf+0x130>
    3ee4:	80 52       	subi	r24, 0x20	; 32
    3ee6:	83 30       	cpi	r24, 0x03	; 3
    3ee8:	38 f4       	brcc	.+14     	; 0x3ef8 <vfprintf+0x13e>
    3eea:	44 e0       	ldi	r20, 0x04	; 4
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	a4 0e       	add	r10, r20
    3ef0:	b5 1e       	adc	r11, r21
    3ef2:	5f e3       	ldi	r21, 0x3F	; 63
    3ef4:	59 83       	std	Y+1, r21	; 0x01
    3ef6:	0f c0       	rjmp	.+30     	; 0x3f16 <vfprintf+0x15c>
    3ef8:	93 36       	cpi	r25, 0x63	; 99
    3efa:	31 f0       	breq	.+12     	; 0x3f08 <vfprintf+0x14e>
    3efc:	93 37       	cpi	r25, 0x73	; 115
    3efe:	79 f0       	breq	.+30     	; 0x3f1e <vfprintf+0x164>
    3f00:	93 35       	cpi	r25, 0x53	; 83
    3f02:	09 f0       	breq	.+2      	; 0x3f06 <vfprintf+0x14c>
    3f04:	56 c0       	rjmp	.+172    	; 0x3fb2 <vfprintf+0x1f8>
    3f06:	20 c0       	rjmp	.+64     	; 0x3f48 <vfprintf+0x18e>
    3f08:	f5 01       	movw	r30, r10
    3f0a:	80 81       	ld	r24, Z
    3f0c:	89 83       	std	Y+1, r24	; 0x01
    3f0e:	42 e0       	ldi	r20, 0x02	; 2
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	a4 0e       	add	r10, r20
    3f14:	b5 1e       	adc	r11, r21
    3f16:	61 01       	movw	r12, r2
    3f18:	01 e0       	ldi	r16, 0x01	; 1
    3f1a:	10 e0       	ldi	r17, 0x00	; 0
    3f1c:	12 c0       	rjmp	.+36     	; 0x3f42 <vfprintf+0x188>
    3f1e:	f5 01       	movw	r30, r10
    3f20:	c0 80       	ld	r12, Z
    3f22:	d1 80       	ldd	r13, Z+1	; 0x01
    3f24:	f6 fc       	sbrc	r15, 6
    3f26:	03 c0       	rjmp	.+6      	; 0x3f2e <vfprintf+0x174>
    3f28:	6f ef       	ldi	r22, 0xFF	; 255
    3f2a:	7f ef       	ldi	r23, 0xFF	; 255
    3f2c:	02 c0       	rjmp	.+4      	; 0x3f32 <vfprintf+0x178>
    3f2e:	69 2d       	mov	r22, r9
    3f30:	70 e0       	ldi	r23, 0x00	; 0
    3f32:	42 e0       	ldi	r20, 0x02	; 2
    3f34:	50 e0       	ldi	r21, 0x00	; 0
    3f36:	a4 0e       	add	r10, r20
    3f38:	b5 1e       	adc	r11, r21
    3f3a:	c6 01       	movw	r24, r12
    3f3c:	0e 94 ee 20 	call	0x41dc	; 0x41dc <strnlen>
    3f40:	8c 01       	movw	r16, r24
    3f42:	5f e7       	ldi	r21, 0x7F	; 127
    3f44:	f5 22       	and	r15, r21
    3f46:	14 c0       	rjmp	.+40     	; 0x3f70 <vfprintf+0x1b6>
    3f48:	f5 01       	movw	r30, r10
    3f4a:	c0 80       	ld	r12, Z
    3f4c:	d1 80       	ldd	r13, Z+1	; 0x01
    3f4e:	f6 fc       	sbrc	r15, 6
    3f50:	03 c0       	rjmp	.+6      	; 0x3f58 <vfprintf+0x19e>
    3f52:	6f ef       	ldi	r22, 0xFF	; 255
    3f54:	7f ef       	ldi	r23, 0xFF	; 255
    3f56:	02 c0       	rjmp	.+4      	; 0x3f5c <vfprintf+0x1a2>
    3f58:	69 2d       	mov	r22, r9
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	42 e0       	ldi	r20, 0x02	; 2
    3f5e:	50 e0       	ldi	r21, 0x00	; 0
    3f60:	a4 0e       	add	r10, r20
    3f62:	b5 1e       	adc	r11, r21
    3f64:	c6 01       	movw	r24, r12
    3f66:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <strnlen_P>
    3f6a:	8c 01       	movw	r16, r24
    3f6c:	50 e8       	ldi	r21, 0x80	; 128
    3f6e:	f5 2a       	or	r15, r21
    3f70:	f3 fe       	sbrs	r15, 3
    3f72:	07 c0       	rjmp	.+14     	; 0x3f82 <vfprintf+0x1c8>
    3f74:	1a c0       	rjmp	.+52     	; 0x3faa <vfprintf+0x1f0>
    3f76:	80 e2       	ldi	r24, 0x20	; 32
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	b3 01       	movw	r22, r6
    3f7c:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    3f80:	ea 94       	dec	r14
    3f82:	8e 2d       	mov	r24, r14
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	08 17       	cp	r16, r24
    3f88:	19 07       	cpc	r17, r25
    3f8a:	a8 f3       	brcs	.-22     	; 0x3f76 <vfprintf+0x1bc>
    3f8c:	0e c0       	rjmp	.+28     	; 0x3faa <vfprintf+0x1f0>
    3f8e:	f6 01       	movw	r30, r12
    3f90:	f7 fc       	sbrc	r15, 7
    3f92:	85 91       	lpm	r24, Z+
    3f94:	f7 fe       	sbrs	r15, 7
    3f96:	81 91       	ld	r24, Z+
    3f98:	6f 01       	movw	r12, r30
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	b3 01       	movw	r22, r6
    3f9e:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    3fa2:	e1 10       	cpse	r14, r1
    3fa4:	ea 94       	dec	r14
    3fa6:	01 50       	subi	r16, 0x01	; 1
    3fa8:	10 40       	sbci	r17, 0x00	; 0
    3faa:	01 15       	cp	r16, r1
    3fac:	11 05       	cpc	r17, r1
    3fae:	79 f7       	brne	.-34     	; 0x3f8e <vfprintf+0x1d4>
    3fb0:	ea c0       	rjmp	.+468    	; 0x4186 <vfprintf+0x3cc>
    3fb2:	94 36       	cpi	r25, 0x64	; 100
    3fb4:	11 f0       	breq	.+4      	; 0x3fba <vfprintf+0x200>
    3fb6:	99 36       	cpi	r25, 0x69	; 105
    3fb8:	69 f5       	brne	.+90     	; 0x4014 <vfprintf+0x25a>
    3fba:	f7 fe       	sbrs	r15, 7
    3fbc:	08 c0       	rjmp	.+16     	; 0x3fce <vfprintf+0x214>
    3fbe:	f5 01       	movw	r30, r10
    3fc0:	20 81       	ld	r18, Z
    3fc2:	31 81       	ldd	r19, Z+1	; 0x01
    3fc4:	42 81       	ldd	r20, Z+2	; 0x02
    3fc6:	53 81       	ldd	r21, Z+3	; 0x03
    3fc8:	84 e0       	ldi	r24, 0x04	; 4
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	0a c0       	rjmp	.+20     	; 0x3fe2 <vfprintf+0x228>
    3fce:	f5 01       	movw	r30, r10
    3fd0:	80 81       	ld	r24, Z
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	9c 01       	movw	r18, r24
    3fd6:	44 27       	eor	r20, r20
    3fd8:	37 fd       	sbrc	r19, 7
    3fda:	40 95       	com	r20
    3fdc:	54 2f       	mov	r21, r20
    3fde:	82 e0       	ldi	r24, 0x02	; 2
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	a8 0e       	add	r10, r24
    3fe4:	b9 1e       	adc	r11, r25
    3fe6:	9f e6       	ldi	r25, 0x6F	; 111
    3fe8:	f9 22       	and	r15, r25
    3fea:	57 ff       	sbrs	r21, 7
    3fec:	09 c0       	rjmp	.+18     	; 0x4000 <vfprintf+0x246>
    3fee:	50 95       	com	r21
    3ff0:	40 95       	com	r20
    3ff2:	30 95       	com	r19
    3ff4:	21 95       	neg	r18
    3ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff8:	4f 4f       	sbci	r20, 0xFF	; 255
    3ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    3ffc:	e0 e8       	ldi	r30, 0x80	; 128
    3ffe:	fe 2a       	or	r15, r30
    4000:	ca 01       	movw	r24, r20
    4002:	b9 01       	movw	r22, r18
    4004:	a1 01       	movw	r20, r2
    4006:	2a e0       	ldi	r18, 0x0A	; 10
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	0e 94 35 21 	call	0x426a	; 0x426a <__ultoa_invert>
    400e:	d8 2e       	mov	r13, r24
    4010:	d2 18       	sub	r13, r2
    4012:	40 c0       	rjmp	.+128    	; 0x4094 <vfprintf+0x2da>
    4014:	95 37       	cpi	r25, 0x75	; 117
    4016:	29 f4       	brne	.+10     	; 0x4022 <vfprintf+0x268>
    4018:	1f 2d       	mov	r17, r15
    401a:	1f 7e       	andi	r17, 0xEF	; 239
    401c:	2a e0       	ldi	r18, 0x0A	; 10
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	1d c0       	rjmp	.+58     	; 0x405c <vfprintf+0x2a2>
    4022:	1f 2d       	mov	r17, r15
    4024:	19 7f       	andi	r17, 0xF9	; 249
    4026:	9f 36       	cpi	r25, 0x6F	; 111
    4028:	61 f0       	breq	.+24     	; 0x4042 <vfprintf+0x288>
    402a:	90 37       	cpi	r25, 0x70	; 112
    402c:	20 f4       	brcc	.+8      	; 0x4036 <vfprintf+0x27c>
    402e:	98 35       	cpi	r25, 0x58	; 88
    4030:	09 f0       	breq	.+2      	; 0x4034 <vfprintf+0x27a>
    4032:	ac c0       	rjmp	.+344    	; 0x418c <vfprintf+0x3d2>
    4034:	0f c0       	rjmp	.+30     	; 0x4054 <vfprintf+0x29a>
    4036:	90 37       	cpi	r25, 0x70	; 112
    4038:	39 f0       	breq	.+14     	; 0x4048 <vfprintf+0x28e>
    403a:	98 37       	cpi	r25, 0x78	; 120
    403c:	09 f0       	breq	.+2      	; 0x4040 <vfprintf+0x286>
    403e:	a6 c0       	rjmp	.+332    	; 0x418c <vfprintf+0x3d2>
    4040:	04 c0       	rjmp	.+8      	; 0x404a <vfprintf+0x290>
    4042:	28 e0       	ldi	r18, 0x08	; 8
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	0a c0       	rjmp	.+20     	; 0x405c <vfprintf+0x2a2>
    4048:	10 61       	ori	r17, 0x10	; 16
    404a:	14 fd       	sbrc	r17, 4
    404c:	14 60       	ori	r17, 0x04	; 4
    404e:	20 e1       	ldi	r18, 0x10	; 16
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	04 c0       	rjmp	.+8      	; 0x405c <vfprintf+0x2a2>
    4054:	14 fd       	sbrc	r17, 4
    4056:	16 60       	ori	r17, 0x06	; 6
    4058:	20 e1       	ldi	r18, 0x10	; 16
    405a:	32 e0       	ldi	r19, 0x02	; 2
    405c:	17 ff       	sbrs	r17, 7
    405e:	08 c0       	rjmp	.+16     	; 0x4070 <vfprintf+0x2b6>
    4060:	f5 01       	movw	r30, r10
    4062:	60 81       	ld	r22, Z
    4064:	71 81       	ldd	r23, Z+1	; 0x01
    4066:	82 81       	ldd	r24, Z+2	; 0x02
    4068:	93 81       	ldd	r25, Z+3	; 0x03
    406a:	44 e0       	ldi	r20, 0x04	; 4
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	08 c0       	rjmp	.+16     	; 0x4080 <vfprintf+0x2c6>
    4070:	f5 01       	movw	r30, r10
    4072:	80 81       	ld	r24, Z
    4074:	91 81       	ldd	r25, Z+1	; 0x01
    4076:	bc 01       	movw	r22, r24
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	42 e0       	ldi	r20, 0x02	; 2
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	a4 0e       	add	r10, r20
    4082:	b5 1e       	adc	r11, r21
    4084:	a1 01       	movw	r20, r2
    4086:	0e 94 35 21 	call	0x426a	; 0x426a <__ultoa_invert>
    408a:	d8 2e       	mov	r13, r24
    408c:	d2 18       	sub	r13, r2
    408e:	8f e7       	ldi	r24, 0x7F	; 127
    4090:	f8 2e       	mov	r15, r24
    4092:	f1 22       	and	r15, r17
    4094:	f6 fe       	sbrs	r15, 6
    4096:	0b c0       	rjmp	.+22     	; 0x40ae <vfprintf+0x2f4>
    4098:	5e ef       	ldi	r21, 0xFE	; 254
    409a:	f5 22       	and	r15, r21
    409c:	d9 14       	cp	r13, r9
    409e:	38 f4       	brcc	.+14     	; 0x40ae <vfprintf+0x2f4>
    40a0:	f4 fe       	sbrs	r15, 4
    40a2:	07 c0       	rjmp	.+14     	; 0x40b2 <vfprintf+0x2f8>
    40a4:	f2 fc       	sbrc	r15, 2
    40a6:	05 c0       	rjmp	.+10     	; 0x40b2 <vfprintf+0x2f8>
    40a8:	8f ee       	ldi	r24, 0xEF	; 239
    40aa:	f8 22       	and	r15, r24
    40ac:	02 c0       	rjmp	.+4      	; 0x40b2 <vfprintf+0x2f8>
    40ae:	1d 2d       	mov	r17, r13
    40b0:	01 c0       	rjmp	.+2      	; 0x40b4 <vfprintf+0x2fa>
    40b2:	19 2d       	mov	r17, r9
    40b4:	f4 fe       	sbrs	r15, 4
    40b6:	0d c0       	rjmp	.+26     	; 0x40d2 <vfprintf+0x318>
    40b8:	fe 01       	movw	r30, r28
    40ba:	ed 0d       	add	r30, r13
    40bc:	f1 1d       	adc	r31, r1
    40be:	80 81       	ld	r24, Z
    40c0:	80 33       	cpi	r24, 0x30	; 48
    40c2:	19 f4       	brne	.+6      	; 0x40ca <vfprintf+0x310>
    40c4:	99 ee       	ldi	r25, 0xE9	; 233
    40c6:	f9 22       	and	r15, r25
    40c8:	08 c0       	rjmp	.+16     	; 0x40da <vfprintf+0x320>
    40ca:	1f 5f       	subi	r17, 0xFF	; 255
    40cc:	f2 fe       	sbrs	r15, 2
    40ce:	05 c0       	rjmp	.+10     	; 0x40da <vfprintf+0x320>
    40d0:	03 c0       	rjmp	.+6      	; 0x40d8 <vfprintf+0x31e>
    40d2:	8f 2d       	mov	r24, r15
    40d4:	86 78       	andi	r24, 0x86	; 134
    40d6:	09 f0       	breq	.+2      	; 0x40da <vfprintf+0x320>
    40d8:	1f 5f       	subi	r17, 0xFF	; 255
    40da:	0f 2d       	mov	r16, r15
    40dc:	f3 fc       	sbrc	r15, 3
    40de:	14 c0       	rjmp	.+40     	; 0x4108 <vfprintf+0x34e>
    40e0:	f0 fe       	sbrs	r15, 0
    40e2:	0f c0       	rjmp	.+30     	; 0x4102 <vfprintf+0x348>
    40e4:	1e 15       	cp	r17, r14
    40e6:	10 f0       	brcs	.+4      	; 0x40ec <vfprintf+0x332>
    40e8:	9d 2c       	mov	r9, r13
    40ea:	0b c0       	rjmp	.+22     	; 0x4102 <vfprintf+0x348>
    40ec:	9d 2c       	mov	r9, r13
    40ee:	9e 0c       	add	r9, r14
    40f0:	91 1a       	sub	r9, r17
    40f2:	1e 2d       	mov	r17, r14
    40f4:	06 c0       	rjmp	.+12     	; 0x4102 <vfprintf+0x348>
    40f6:	80 e2       	ldi	r24, 0x20	; 32
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	b3 01       	movw	r22, r6
    40fc:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    4100:	1f 5f       	subi	r17, 0xFF	; 255
    4102:	1e 15       	cp	r17, r14
    4104:	c0 f3       	brcs	.-16     	; 0x40f6 <vfprintf+0x33c>
    4106:	04 c0       	rjmp	.+8      	; 0x4110 <vfprintf+0x356>
    4108:	1e 15       	cp	r17, r14
    410a:	10 f4       	brcc	.+4      	; 0x4110 <vfprintf+0x356>
    410c:	e1 1a       	sub	r14, r17
    410e:	01 c0       	rjmp	.+2      	; 0x4112 <vfprintf+0x358>
    4110:	ee 24       	eor	r14, r14
    4112:	04 ff       	sbrs	r16, 4
    4114:	0f c0       	rjmp	.+30     	; 0x4134 <vfprintf+0x37a>
    4116:	80 e3       	ldi	r24, 0x30	; 48
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	b3 01       	movw	r22, r6
    411c:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    4120:	02 ff       	sbrs	r16, 2
    4122:	1d c0       	rjmp	.+58     	; 0x415e <vfprintf+0x3a4>
    4124:	01 fd       	sbrc	r16, 1
    4126:	03 c0       	rjmp	.+6      	; 0x412e <vfprintf+0x374>
    4128:	88 e7       	ldi	r24, 0x78	; 120
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0e c0       	rjmp	.+28     	; 0x414a <vfprintf+0x390>
    412e:	88 e5       	ldi	r24, 0x58	; 88
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0b c0       	rjmp	.+22     	; 0x414a <vfprintf+0x390>
    4134:	80 2f       	mov	r24, r16
    4136:	86 78       	andi	r24, 0x86	; 134
    4138:	91 f0       	breq	.+36     	; 0x415e <vfprintf+0x3a4>
    413a:	01 ff       	sbrs	r16, 1
    413c:	02 c0       	rjmp	.+4      	; 0x4142 <vfprintf+0x388>
    413e:	8b e2       	ldi	r24, 0x2B	; 43
    4140:	01 c0       	rjmp	.+2      	; 0x4144 <vfprintf+0x38a>
    4142:	80 e2       	ldi	r24, 0x20	; 32
    4144:	f7 fc       	sbrc	r15, 7
    4146:	8d e2       	ldi	r24, 0x2D	; 45
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	b3 01       	movw	r22, r6
    414c:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    4150:	06 c0       	rjmp	.+12     	; 0x415e <vfprintf+0x3a4>
    4152:	80 e3       	ldi	r24, 0x30	; 48
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	b3 01       	movw	r22, r6
    4158:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    415c:	9a 94       	dec	r9
    415e:	d9 14       	cp	r13, r9
    4160:	c0 f3       	brcs	.-16     	; 0x4152 <vfprintf+0x398>
    4162:	da 94       	dec	r13
    4164:	f1 01       	movw	r30, r2
    4166:	ed 0d       	add	r30, r13
    4168:	f1 1d       	adc	r31, r1
    416a:	80 81       	ld	r24, Z
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	b3 01       	movw	r22, r6
    4170:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    4174:	dd 20       	and	r13, r13
    4176:	a9 f7       	brne	.-22     	; 0x4162 <vfprintf+0x3a8>
    4178:	06 c0       	rjmp	.+12     	; 0x4186 <vfprintf+0x3cc>
    417a:	80 e2       	ldi	r24, 0x20	; 32
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	b3 01       	movw	r22, r6
    4180:	0e 94 09 21 	call	0x4212	; 0x4212 <fputc>
    4184:	ea 94       	dec	r14
    4186:	ee 20       	and	r14, r14
    4188:	c1 f7       	brne	.-16     	; 0x417a <vfprintf+0x3c0>
    418a:	43 ce       	rjmp	.-890    	; 0x3e12 <vfprintf+0x58>
    418c:	f3 01       	movw	r30, r6
    418e:	66 81       	ldd	r22, Z+6	; 0x06
    4190:	77 81       	ldd	r23, Z+7	; 0x07
    4192:	cb 01       	movw	r24, r22
    4194:	2b 96       	adiw	r28, 0x0b	; 11
    4196:	0f b6       	in	r0, 0x3f	; 63
    4198:	f8 94       	cli
    419a:	de bf       	out	0x3e, r29	; 62
    419c:	0f be       	out	0x3f, r0	; 63
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	cf 91       	pop	r28
    41a2:	df 91       	pop	r29
    41a4:	1f 91       	pop	r17
    41a6:	0f 91       	pop	r16
    41a8:	ff 90       	pop	r15
    41aa:	ef 90       	pop	r14
    41ac:	df 90       	pop	r13
    41ae:	cf 90       	pop	r12
    41b0:	bf 90       	pop	r11
    41b2:	af 90       	pop	r10
    41b4:	9f 90       	pop	r9
    41b6:	8f 90       	pop	r8
    41b8:	7f 90       	pop	r7
    41ba:	6f 90       	pop	r6
    41bc:	5f 90       	pop	r5
    41be:	4f 90       	pop	r4
    41c0:	3f 90       	pop	r3
    41c2:	2f 90       	pop	r2
    41c4:	08 95       	ret

000041c6 <strnlen_P>:
    41c6:	fc 01       	movw	r30, r24
    41c8:	05 90       	lpm	r0, Z+
    41ca:	61 50       	subi	r22, 0x01	; 1
    41cc:	70 40       	sbci	r23, 0x00	; 0
    41ce:	01 10       	cpse	r0, r1
    41d0:	d8 f7       	brcc	.-10     	; 0x41c8 <strnlen_P+0x2>
    41d2:	80 95       	com	r24
    41d4:	90 95       	com	r25
    41d6:	8e 0f       	add	r24, r30
    41d8:	9f 1f       	adc	r25, r31
    41da:	08 95       	ret

000041dc <strnlen>:
    41dc:	fc 01       	movw	r30, r24
    41de:	61 50       	subi	r22, 0x01	; 1
    41e0:	70 40       	sbci	r23, 0x00	; 0
    41e2:	01 90       	ld	r0, Z+
    41e4:	01 10       	cpse	r0, r1
    41e6:	d8 f7       	brcc	.-10     	; 0x41de <strnlen+0x2>
    41e8:	80 95       	com	r24
    41ea:	90 95       	com	r25
    41ec:	8e 0f       	add	r24, r30
    41ee:	9f 1f       	adc	r25, r31
    41f0:	08 95       	ret

000041f2 <strrev>:
    41f2:	dc 01       	movw	r26, r24
    41f4:	fc 01       	movw	r30, r24
    41f6:	67 2f       	mov	r22, r23
    41f8:	71 91       	ld	r23, Z+
    41fa:	77 23       	and	r23, r23
    41fc:	e1 f7       	brne	.-8      	; 0x41f6 <strrev+0x4>
    41fe:	32 97       	sbiw	r30, 0x02	; 2
    4200:	04 c0       	rjmp	.+8      	; 0x420a <strrev+0x18>
    4202:	7c 91       	ld	r23, X
    4204:	6d 93       	st	X+, r22
    4206:	70 83       	st	Z, r23
    4208:	62 91       	ld	r22, -Z
    420a:	ae 17       	cp	r26, r30
    420c:	bf 07       	cpc	r27, r31
    420e:	c8 f3       	brcs	.-14     	; 0x4202 <strrev+0x10>
    4210:	08 95       	ret

00004212 <fputc>:
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	8c 01       	movw	r16, r24
    421c:	eb 01       	movw	r28, r22
    421e:	8b 81       	ldd	r24, Y+3	; 0x03
    4220:	81 ff       	sbrs	r24, 1
    4222:	1b c0       	rjmp	.+54     	; 0x425a <fputc+0x48>
    4224:	82 ff       	sbrs	r24, 2
    4226:	0d c0       	rjmp	.+26     	; 0x4242 <fputc+0x30>
    4228:	2e 81       	ldd	r18, Y+6	; 0x06
    422a:	3f 81       	ldd	r19, Y+7	; 0x07
    422c:	8c 81       	ldd	r24, Y+4	; 0x04
    422e:	9d 81       	ldd	r25, Y+5	; 0x05
    4230:	28 17       	cp	r18, r24
    4232:	39 07       	cpc	r19, r25
    4234:	64 f4       	brge	.+24     	; 0x424e <fputc+0x3c>
    4236:	e8 81       	ld	r30, Y
    4238:	f9 81       	ldd	r31, Y+1	; 0x01
    423a:	01 93       	st	Z+, r16
    423c:	f9 83       	std	Y+1, r31	; 0x01
    423e:	e8 83       	st	Y, r30
    4240:	06 c0       	rjmp	.+12     	; 0x424e <fputc+0x3c>
    4242:	e8 85       	ldd	r30, Y+8	; 0x08
    4244:	f9 85       	ldd	r31, Y+9	; 0x09
    4246:	80 2f       	mov	r24, r16
    4248:	09 95       	icall
    424a:	89 2b       	or	r24, r25
    424c:	31 f4       	brne	.+12     	; 0x425a <fputc+0x48>
    424e:	8e 81       	ldd	r24, Y+6	; 0x06
    4250:	9f 81       	ldd	r25, Y+7	; 0x07
    4252:	01 96       	adiw	r24, 0x01	; 1
    4254:	9f 83       	std	Y+7, r25	; 0x07
    4256:	8e 83       	std	Y+6, r24	; 0x06
    4258:	02 c0       	rjmp	.+4      	; 0x425e <fputc+0x4c>
    425a:	0f ef       	ldi	r16, 0xFF	; 255
    425c:	1f ef       	ldi	r17, 0xFF	; 255
    425e:	c8 01       	movw	r24, r16
    4260:	df 91       	pop	r29
    4262:	cf 91       	pop	r28
    4264:	1f 91       	pop	r17
    4266:	0f 91       	pop	r16
    4268:	08 95       	ret

0000426a <__ultoa_invert>:
    426a:	fa 01       	movw	r30, r20
    426c:	aa 27       	eor	r26, r26
    426e:	28 30       	cpi	r18, 0x08	; 8
    4270:	51 f1       	breq	.+84     	; 0x42c6 <__ultoa_invert+0x5c>
    4272:	20 31       	cpi	r18, 0x10	; 16
    4274:	81 f1       	breq	.+96     	; 0x42d6 <__ultoa_invert+0x6c>
    4276:	e8 94       	clt
    4278:	6f 93       	push	r22
    427a:	6e 7f       	andi	r22, 0xFE	; 254
    427c:	6e 5f       	subi	r22, 0xFE	; 254
    427e:	7f 4f       	sbci	r23, 0xFF	; 255
    4280:	8f 4f       	sbci	r24, 0xFF	; 255
    4282:	9f 4f       	sbci	r25, 0xFF	; 255
    4284:	af 4f       	sbci	r26, 0xFF	; 255
    4286:	b1 e0       	ldi	r27, 0x01	; 1
    4288:	3e d0       	rcall	.+124    	; 0x4306 <__ultoa_invert+0x9c>
    428a:	b4 e0       	ldi	r27, 0x04	; 4
    428c:	3c d0       	rcall	.+120    	; 0x4306 <__ultoa_invert+0x9c>
    428e:	67 0f       	add	r22, r23
    4290:	78 1f       	adc	r23, r24
    4292:	89 1f       	adc	r24, r25
    4294:	9a 1f       	adc	r25, r26
    4296:	a1 1d       	adc	r26, r1
    4298:	68 0f       	add	r22, r24
    429a:	79 1f       	adc	r23, r25
    429c:	8a 1f       	adc	r24, r26
    429e:	91 1d       	adc	r25, r1
    42a0:	a1 1d       	adc	r26, r1
    42a2:	6a 0f       	add	r22, r26
    42a4:	71 1d       	adc	r23, r1
    42a6:	81 1d       	adc	r24, r1
    42a8:	91 1d       	adc	r25, r1
    42aa:	a1 1d       	adc	r26, r1
    42ac:	20 d0       	rcall	.+64     	; 0x42ee <__ultoa_invert+0x84>
    42ae:	09 f4       	brne	.+2      	; 0x42b2 <__ultoa_invert+0x48>
    42b0:	68 94       	set
    42b2:	3f 91       	pop	r19
    42b4:	2a e0       	ldi	r18, 0x0A	; 10
    42b6:	26 9f       	mul	r18, r22
    42b8:	11 24       	eor	r1, r1
    42ba:	30 19       	sub	r19, r0
    42bc:	30 5d       	subi	r19, 0xD0	; 208
    42be:	31 93       	st	Z+, r19
    42c0:	de f6       	brtc	.-74     	; 0x4278 <__ultoa_invert+0xe>
    42c2:	cf 01       	movw	r24, r30
    42c4:	08 95       	ret
    42c6:	46 2f       	mov	r20, r22
    42c8:	47 70       	andi	r20, 0x07	; 7
    42ca:	40 5d       	subi	r20, 0xD0	; 208
    42cc:	41 93       	st	Z+, r20
    42ce:	b3 e0       	ldi	r27, 0x03	; 3
    42d0:	0f d0       	rcall	.+30     	; 0x42f0 <__ultoa_invert+0x86>
    42d2:	c9 f7       	brne	.-14     	; 0x42c6 <__ultoa_invert+0x5c>
    42d4:	f6 cf       	rjmp	.-20     	; 0x42c2 <__ultoa_invert+0x58>
    42d6:	46 2f       	mov	r20, r22
    42d8:	4f 70       	andi	r20, 0x0F	; 15
    42da:	40 5d       	subi	r20, 0xD0	; 208
    42dc:	4a 33       	cpi	r20, 0x3A	; 58
    42de:	18 f0       	brcs	.+6      	; 0x42e6 <__ultoa_invert+0x7c>
    42e0:	49 5d       	subi	r20, 0xD9	; 217
    42e2:	31 fd       	sbrc	r19, 1
    42e4:	40 52       	subi	r20, 0x20	; 32
    42e6:	41 93       	st	Z+, r20
    42e8:	02 d0       	rcall	.+4      	; 0x42ee <__ultoa_invert+0x84>
    42ea:	a9 f7       	brne	.-22     	; 0x42d6 <__ultoa_invert+0x6c>
    42ec:	ea cf       	rjmp	.-44     	; 0x42c2 <__ultoa_invert+0x58>
    42ee:	b4 e0       	ldi	r27, 0x04	; 4
    42f0:	a6 95       	lsr	r26
    42f2:	97 95       	ror	r25
    42f4:	87 95       	ror	r24
    42f6:	77 95       	ror	r23
    42f8:	67 95       	ror	r22
    42fa:	ba 95       	dec	r27
    42fc:	c9 f7       	brne	.-14     	; 0x42f0 <__ultoa_invert+0x86>
    42fe:	00 97       	sbiw	r24, 0x00	; 0
    4300:	61 05       	cpc	r22, r1
    4302:	71 05       	cpc	r23, r1
    4304:	08 95       	ret
    4306:	9b 01       	movw	r18, r22
    4308:	ac 01       	movw	r20, r24
    430a:	0a 2e       	mov	r0, r26
    430c:	06 94       	lsr	r0
    430e:	57 95       	ror	r21
    4310:	47 95       	ror	r20
    4312:	37 95       	ror	r19
    4314:	27 95       	ror	r18
    4316:	ba 95       	dec	r27
    4318:	c9 f7       	brne	.-14     	; 0x430c <__ultoa_invert+0xa2>
    431a:	62 0f       	add	r22, r18
    431c:	73 1f       	adc	r23, r19
    431e:	84 1f       	adc	r24, r20
    4320:	95 1f       	adc	r25, r21
    4322:	a0 1d       	adc	r26, r0
    4324:	08 95       	ret

00004326 <__udivmodhi4>:
    4326:	aa 1b       	sub	r26, r26
    4328:	bb 1b       	sub	r27, r27
    432a:	51 e1       	ldi	r21, 0x11	; 17
    432c:	07 c0       	rjmp	.+14     	; 0x433c <__udivmodhi4_ep>

0000432e <__udivmodhi4_loop>:
    432e:	aa 1f       	adc	r26, r26
    4330:	bb 1f       	adc	r27, r27
    4332:	a6 17       	cp	r26, r22
    4334:	b7 07       	cpc	r27, r23
    4336:	10 f0       	brcs	.+4      	; 0x433c <__udivmodhi4_ep>
    4338:	a6 1b       	sub	r26, r22
    433a:	b7 0b       	sbc	r27, r23

0000433c <__udivmodhi4_ep>:
    433c:	88 1f       	adc	r24, r24
    433e:	99 1f       	adc	r25, r25
    4340:	5a 95       	dec	r21
    4342:	a9 f7       	brne	.-22     	; 0x432e <__udivmodhi4_loop>
    4344:	80 95       	com	r24
    4346:	90 95       	com	r25
    4348:	bc 01       	movw	r22, r24
    434a:	cd 01       	movw	r24, r26
    434c:	08 95       	ret

0000434e <_exit>:
    434e:	f8 94       	cli

00004350 <__stop_program>:
    4350:	ff cf       	rjmp	.-2      	; 0x4350 <__stop_program>
